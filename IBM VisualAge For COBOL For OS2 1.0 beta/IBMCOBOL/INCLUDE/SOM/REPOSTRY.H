
/*
 * This file was generated by the SOM Compiler.
 * FileName: repostry.h.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.7
 *     SOM Emitter emith: 2.42
 */

/*
 * 
 *    COMPONENT_NAME: somi
 * 
 *    ORIGINS: 27
 * 
 * 
 *    10H9767, 10H9769  (C) COPYRIGHT International Business Machines Corp. 1992,1994
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 *   Repository: CORBA Interface for access to repository objects
 *   See CORBA 7.5.2, pp.132-133
 */


#ifndef SOM_Repository_h
#define SOM_Repository_h


/*
 * Passthru lines: File: "C.h", "before"
 */

    #include <stdio.h>
    #include <somtcnst.h>
    #include <somir.h>
    #include <containd.h>


#include <som.h>

/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * Define the class name as an object type
 */
#ifndef Repository
#define Repository SOMObject
#endif
#include <containr.h>

/*
 * Start of user-defined types:
 */
#ifndef SOMClass
    #define SOMClass SOMObject
#endif /* SOMClass */
#ifndef Contained
    #define Contained SOMObject
#endif /* Contained */
typedef
struct RepositoryDescription {
Identifier name;
string  id;
string  defined_in;
} RepositoryDescription;

/*
 *  The inherited describe_contents method returns an instance
 *  of this (RepositoryDescription) structure in the value
 *  member of the Description structure defined in the Container
 *  interface.
 */
typedef unsigned long irOpenErrorCodes;
#define Repository_NOACCESS 1UL
#define Repository_BADMAGICNUMBER 2UL
#define Repository_MISSINGVERSIONINFO 3UL
#define Repository_IOERROR 4UL
#define Repository_VERSIONMISMATCH 5UL
#define ex_irOpenError "::Repository::irOpenError"
typedef
struct irOpenError {
irOpenErrorCodes errorCode;
string  fileName;
} irOpenError;

/*
 *  The irOpenError and associated irOpenErrorCodes are a
 *  SOM-unique extension to the Interface Repository.  These
 *  errors may be raised by the somNew when instantiating the
 *  Repository object and can be found in the SOM global
 *  Environment.
 */

/*
 * End of user-defined types.
 */

#define Repository_MajorVersion 2
#define Repository_MinorVersion 1

/*
 * External name shortening if required
 */
#ifdef SOM_USE_SHORT_EXTERNAL_NAMES
#define RepositoryNewClass c
#pragma linkage(c, system)
#define RepositoryClassData d
#define RepositoryCClassData x
#endif /* SOM_USE_SHORT_EXTERNAL_NAMES */
/*--------------Migration------------*/
#define Repository_classObj RepositoryClassData.classObject
#define _Repository Repository_classObj

/*
 * Declare the class creation procedure
 */
SOMEXTERN SOMClass * SOMLINK RepositoryNewClass(integer4 somtmajorVersion,
		integer4 somtminorVersion);
#pragma linkage(RepositoryNewClass, system)

/*
 * Declare the class data structure
 */
SOMEXTERN struct RepositoryClassDataStructure {
	SOMClass *classObject;
	somMToken lookup_id;
	somMToken lookup_modifier;
	somMToken release_cache;
} SOMDLINK RepositoryClassData;

/*
 * Declare the C specific class data structure
 */
SOMEXTERN struct RepositoryCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken instanceDataToken;
} SOMDLINK RepositoryCClassData;

/*
 * New and Renew macros for Repository
 */
#define RepositoryNew() \
   (_somNew(_Repository ? _Repository : RepositoryNewClass(Repository_MajorVersion, Repository_MinorVersion)))
#define RepositoryRenew(buf) \
   (_somRenew(_Repository ? _Repository : RepositoryNewClass(Repository_MajorVersion, Repository_MinorVersion), buf))

/*
 * Override method: describe_contents
 */
#define Repository_describe_contents(somSelf,ev,limit_type,exclude_inherited,max_returned_objs) \
	Container_describe_contents(somSelf,ev,limit_type,exclude_inherited,max_returned_objs)

/*
 * Override method: somFree
 */
#define Repository_somFree(somSelf) \
	SOMObject_somFree(somSelf)

/*
 * Override method: somDumpSelf
 */
#define Repository_somDumpSelf(somSelf,level) \
	SOMObject_somDumpSelf(somSelf,level)

/*
 * Override method: somDumpSelfInt
 */
#define Repository_somDumpSelfInt(somSelf,level) \
	SOMObject_somDumpSelfInt(somSelf,level)

/*
 * New Method: lookup_id
 */
typedef Contained*   SOMLINK somTP_Repository_lookup_id(Repository *somSelf, Environment *ev,
		string search_id);
#pragma linkage(somTP_Repository_lookup_id, system)
typedef somTP_Repository_lookup_id *somTD_Repository_lookup_id;
#define somMD_Repository_lookup_id "::Repository::lookup_id"
#define Repository_lookup_id(somSelf,ev,search_id) \
    (SOM_Resolve(somSelf, Repository, lookup_id) \
	(somSelf,ev,search_id))
#ifndef SOMGD_lookup_id
    #if (defined(_lookup_id) || defined(__lookup_id))
        #undef _lookup_id
        #undef __lookup_id
        #define SOMGD_lookup_id 1
    #else
        #define _lookup_id Repository_lookup_id
    #endif /* _lookup_id */
#endif /* SOMGD_lookup_id */

/*
 * New Method: lookup_modifier
 */
typedef string   SOMLINK somTP_Repository_lookup_modifier(Repository *somSelf, Environment *ev,
		string name,
		string modifier);
#pragma linkage(somTP_Repository_lookup_modifier, system)
typedef somTP_Repository_lookup_modifier *somTD_Repository_lookup_modifier;
#define somMD_Repository_lookup_modifier "::Repository::lookup_modifier"
#define Repository_lookup_modifier(somSelf,ev,name,modifier) \
    (SOM_Resolve(somSelf, Repository, lookup_modifier) \
	(somSelf,ev,name,modifier))
#ifndef SOMGD_lookup_modifier
    #if (defined(_lookup_modifier) || defined(__lookup_modifier))
        #undef _lookup_modifier
        #undef __lookup_modifier
        #define SOMGD_lookup_modifier 1
    #else
        #define _lookup_modifier Repository_lookup_modifier
    #endif /* _lookup_modifier */
#endif /* SOMGD_lookup_modifier */

/*
 * New Method: release_cache
 */
typedef void   SOMLINK somTP_Repository_release_cache(Repository *somSelf, Environment *ev);
#pragma linkage(somTP_Repository_release_cache, system)
typedef somTP_Repository_release_cache *somTD_Repository_release_cache;
#define somMD_Repository_release_cache "::Repository::release_cache"
#define Repository_release_cache(somSelf,ev) \
    (SOM_Resolve(somSelf, Repository, release_cache) \
	(somSelf,ev))
#ifndef SOMGD_release_cache
    #if (defined(_release_cache) || defined(__release_cache))
        #undef _release_cache
        #undef __release_cache
        #define SOMGD_release_cache 1
    #else
        #define _release_cache Repository_release_cache
    #endif /* _release_cache */
#endif /* SOMGD_release_cache */
#ifndef SOM_DONT_USE_INHERITED_MACROS
#define Repository_contents Container_contents
#define Repository_lookup_name Container_lookup_name
#define Repository_somDefaultInit SOMObject_somDefaultInit
#define Repository_somDestruct SOMObject_somDestruct
#define Repository_somDefaultCopyInit SOMObject_somDefaultCopyInit
#define Repository_somDefaultAssign SOMObject_somDefaultAssign
#define Repository_somDefaultConstCopyInit SOMObject_somDefaultConstCopyInit
#define Repository_somDefaultVCopyInit SOMObject_somDefaultVCopyInit
#define Repository_somDefaultConstVCopyInit SOMObject_somDefaultConstVCopyInit
#define Repository_somDefaultConstAssign SOMObject_somDefaultConstAssign
#define Repository_somDefaultVAssign SOMObject_somDefaultVAssign
#define Repository_somDefaultConstVAssign SOMObject_somDefaultConstVAssign
#define Repository_somInit SOMObject_somInit
#define Repository_somUninit SOMObject_somUninit
#define Repository_somGetClass SOMObject_somGetClass
#define Repository_somGetClassName SOMObject_somGetClassName
#define Repository_somGetSize SOMObject_somGetSize
#define Repository_somIsA SOMObject_somIsA
#define Repository_somIsInstanceOf SOMObject_somIsInstanceOf
#define Repository_somRespondsTo SOMObject_somRespondsTo
#define Repository_somDispatch SOMObject_somDispatch
#define Repository_somClassDispatch SOMObject_somClassDispatch
#define Repository_somCastObj SOMObject_somCastObj
#define Repository_somResetObj SOMObject_somResetObj
#define Repository_somDispatchV SOMObject_somDispatchV
#define Repository_somDispatchL SOMObject_somDispatchL
#define Repository_somDispatchA SOMObject_somDispatchA
#define Repository_somDispatchD SOMObject_somDispatchD
#define Repository_somPrintSelf SOMObject_somPrintSelf
#endif /* SOM_DONT_USE_INHERITED_MACROS */

#endif       /* SOM_Repository_h */
