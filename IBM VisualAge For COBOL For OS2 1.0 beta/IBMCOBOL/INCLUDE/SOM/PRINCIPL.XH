
/*
 * This file was generated by the SOM Compiler.
 * FileName: c:\somtk\include\PRINCIPL.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.7
 *     SOM Emitter emitxh: 2.42
 */

/*
 * 
 *    COMPONENT_NAME: somd
 * 
 *    ORIGINS: 27
 * 
 * 
 *    10H9767, 10H9769  (C) COPYRIGHT International Business Machines Corp. 1992,1994
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 */


#ifndef SOM_Principal_xh
#define SOM_Principal_xh

class Principal;

/*
 *    This is a class interface definition which defines the CORBA-defined
 *    Principal object. CORBA defines the Principal object but (at this
 *    time) does not define the interface to this object. The methods for
 *    this object are, therefore, subject to change in future implementations.
 * 
 *    The BOA guarantees that for every method invocation it will identify
 *    the principal on whose behalf the request is performed. An object
 *    implementation may request an instance of this class to determine
 *    if a method invocation has been made by someone with the appropriate
 *    authority. An instance of this class is returned when the following
 *    method is invoked on the BOA:
 * 
 *      get_principal(in BOA boaobj, in Environment lcl_ev,
 *                    in SOMDObject obj, in Environment req_ev);
 * 
 */

#define Principal_MajorVersion 1
#define Principal_MinorVersion 0

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef Principal_API
#define Principal_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;

/*
 * End of user-defined types.
 */

/* A procedure to create the Principal Class */
SOMEXTERN SOMClass * SOMLINK PrincipalNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the Principal class object, and the methods it introduces. */
SOMEXTERN struct PrincipalClassDataStructure {
	SOMClass *classObject;
	somMToken _set_userName;
	somMToken _get_userName;
	somMToken _set_hostName;
	somMToken _get_hostName;
} SOMDLINK PrincipalClassData;
#define _Principal PrincipalClassData.classObject

/* The API to parentMtabs for Principal, and the instance data it introduces. */
SOMEXTERN struct PrincipalCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK PrincipalCClassData;

/*
 * -- Typedefs for Principal Method Procedures
 */
SOMEXTERN {
typedef string   SOMLINK somTP_Principal__get_userName(Principal *somSelf, Environment *ev);
typedef somTP_Principal__get_userName *somTD_Principal__get_userName;
typedef void   SOMLINK somTP_Principal__set_userName(Principal *somSelf, Environment *ev,
		string userName);
typedef somTP_Principal__set_userName *somTD_Principal__set_userName;
typedef string   SOMLINK somTP_Principal__get_hostName(Principal *somSelf, Environment *ev);
typedef somTP_Principal__get_hostName *somTD_Principal__get_hostName;
typedef void   SOMLINK somTP_Principal__set_hostName(Principal *somSelf, Environment *ev,
		string hostName);
typedef somTP_Principal__set_hostName *somTD_Principal__set_hostName;
}

#endif /* Principal_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for Principal
 */
class Principal : public SOMObject
{
public:

// Principal::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_Principal) PrincipalNewClass(Principal_MajorVersion,Principal_MinorVersion);
   return (void*)
      SOM_Resolve(_Principal,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_Principal));
}

// Principal::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

Principal()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (PrincipalCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

Principal(Principal* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (PrincipalCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

Principal(const Principal* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (PrincipalCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: _get_userName */
string   _get_userName(Environment *ev)
{
   return SOM_ResolveD(this,Principal,Principal,_get_userName)
	(this, ev);
}


/* method: _set_userName */
void   _set_userName(Environment *ev,
		string userName)
{
   SOM_ResolveD(this,Principal,Principal,_set_userName)
	(this, ev,userName);
}


/* method: _get_hostName */
string   _get_hostName(Environment *ev)
{
   return SOM_ResolveD(this,Principal,Principal,_get_hostName)
	(this, ev);
}


/* method: _set_hostName */
void   _set_hostName(Environment *ev,
		string hostName)
{
   SOM_ResolveD(this,Principal,Principal,_set_hostName)
	(this, ev,hostName);
}



};   /* Principal */



#endif       /* SOM_Principal_xh */
