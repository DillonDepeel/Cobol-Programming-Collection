
/*
 * This file was generated by the SOM Compiler.
 * FileName: c:\somtk\include\containd.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.7
 *     SOM Emitter emitxh: 2.42
 */

/*
 * 
 *    COMPONENT_NAME: somi
 * 
 *    ORIGINS: 27
 * 
 * 
 *    10H9767, 10H9769  (C) COPYRIGHT International Business Machines Corp. 1992,1994
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 *   Contained: CORBA Interface for objects contained
 *   in the Interface Repository.  See CORBA 7.5.1 pp. 129-130
 */


#ifndef SOM_Contained_xh
#define SOM_Contained_xh

class Contained;

#define Contained_MajorVersion 2
#define Contained_MinorVersion 1

/*
 * Passthru lines: File: "C.xh", "before"
 */

    #include <somtcnst.xh>
    #include <stdio.h>
    #include <somir.xh>

    #define RepositoryId string
    #define _IDL_SEQUENCE_RepositoryId _IDL_SEQUENCE_string
    #define TC_Contained ((TypeCode) &TC__Contained)
    typedef struct {TCKind t; long f; string s;} TC_Contained_td;
    SOMEXTERN TC_Contained_td SOMDLINK TC__Contained;


/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef Contained_API
#define Contained_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;
class Container;
typedef
struct Description {
Identifier name;
any  value;
} Description;
struct somModifier;
#ifndef _IDL_SEQUENCE_somModifier_defined
#define _IDL_SEQUENCE_somModifier_defined
typedef struct {
    unsigned long _maximum;
    unsigned long _length;
    struct somModifier *_buffer;
} _IDL_SEQUENCE_somModifier;
#endif /* _IDL_SEQUENCE_somModifier_defined */ 
#ifndef _IDL_SEQUENCE_Container_defined
#define _IDL_SEQUENCE_Container_defined
typedef struct {
    unsigned long _maximum;
    unsigned long _length;
    Container **_buffer;
} _IDL_SEQUENCE_Container;
#endif /* _IDL_SEQUENCE_Container_defined */ 

/*
 * End of user-defined types.
 */

/* A procedure to create the Contained Class */
SOMEXTERN SOMClass * SOMLINK ContainedNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the Contained class object, and the methods it introduces. */
SOMEXTERN struct ContainedClassDataStructure {
	SOMClass *classObject;
	somMToken within;
	somMToken describe;
	somMToken _get_name;
	somMToken _set_name;
	somMToken _get_id;
	somMToken _set_id;
	somMToken _get_defined_in;
	somMToken _set_defined_in;
	somMToken _get_somModifiers;
	somMToken _set_somModifiers;
} SOMDLINK ContainedClassData;
#define _Contained ContainedClassData.classObject

/* The API to parentMtabs for Contained, and the instance data it introduces. */
SOMEXTERN struct ContainedCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK ContainedCClassData;

/*
 * -- Typedefs for Contained Method Procedures
 */
SOMEXTERN {
typedef Identifier   SOMLINK somTP_Contained__get_name(Contained *somSelf, Environment *ev);
typedef somTP_Contained__get_name *somTD_Contained__get_name;
typedef void   SOMLINK somTP_Contained__set_name(Contained *somSelf, Environment *ev,
		Identifier name);
typedef somTP_Contained__set_name *somTD_Contained__set_name;
typedef RepositoryId   SOMLINK somTP_Contained__get_id(Contained *somSelf, Environment *ev);
typedef somTP_Contained__get_id *somTD_Contained__get_id;
typedef void   SOMLINK somTP_Contained__set_id(Contained *somSelf, Environment *ev,
		RepositoryId id);
typedef somTP_Contained__set_id *somTD_Contained__set_id;
typedef RepositoryId   SOMLINK somTP_Contained__get_defined_in(Contained *somSelf, Environment *ev);
typedef somTP_Contained__get_defined_in *somTD_Contained__get_defined_in;
typedef void   SOMLINK somTP_Contained__set_defined_in(Contained *somSelf, Environment *ev,
		RepositoryId defined_in);
typedef somTP_Contained__set_defined_in *somTD_Contained__set_defined_in;
typedef _IDL_SEQUENCE_somModifier   SOMLINK somTP_Contained__get_somModifiers(Contained *somSelf, Environment *ev);
typedef somTP_Contained__get_somModifiers *somTD_Contained__get_somModifiers;
typedef void   SOMLINK somTP_Contained__set_somModifiers(Contained *somSelf, Environment *ev,
		_IDL_SEQUENCE_somModifier* somModifiers);
typedef somTP_Contained__set_somModifiers *somTD_Contained__set_somModifiers;
typedef _IDL_SEQUENCE_Container   SOMLINK somTP_Contained_within(Contained *somSelf, Environment *ev);
typedef somTP_Contained_within *somTD_Contained_within;
typedef Description   SOMLINK somTP_Contained_describe(Contained *somSelf, Environment *ev);
typedef somTP_Contained_describe *somTD_Contained_describe;
}

#endif /* Contained_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for Contained
 */
class Contained : public SOMObject
{
public:

// Contained::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_Contained) ContainedNewClass(Contained_MajorVersion,Contained_MinorVersion);
   return (void*)
      SOM_Resolve(_Contained,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_Contained));
}

// Contained::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

Contained()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ContainedCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

Contained(Contained* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ContainedCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

Contained(const Contained* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ContainedCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: _get_name */
Identifier   _get_name(Environment *ev)
{
   return SOM_ResolveD(this,Contained,Contained,_get_name)
	(this, ev);
}


/* method: _set_name */
void   _set_name(Environment *ev,
		Identifier name)
{
   SOM_ResolveD(this,Contained,Contained,_set_name)
	(this, ev,name);
}


/* method: _get_id */
RepositoryId   _get_id(Environment *ev)
{
   return SOM_ResolveD(this,Contained,Contained,_get_id)
	(this, ev);
}


/* method: _set_id */
void   _set_id(Environment *ev,
		RepositoryId id)
{
   SOM_ResolveD(this,Contained,Contained,_set_id)
	(this, ev,id);
}


/* method: _get_defined_in */
RepositoryId   _get_defined_in(Environment *ev)
{
   return SOM_ResolveD(this,Contained,Contained,_get_defined_in)
	(this, ev);
}


/* method: _set_defined_in */
void   _set_defined_in(Environment *ev,
		RepositoryId defined_in)
{
   SOM_ResolveD(this,Contained,Contained,_set_defined_in)
	(this, ev,defined_in);
}


/* method: _get_somModifiers */
_IDL_SEQUENCE_somModifier   _get_somModifiers(Environment *ev)
{
   return SOM_ResolveD(this,Contained,Contained,_get_somModifiers)
	(this, ev);
}


/* method: _set_somModifiers */
void   _set_somModifiers(Environment *ev,
		_IDL_SEQUENCE_somModifier* somModifiers)
{
   SOM_ResolveD(this,Contained,Contained,_set_somModifiers)
	(this, ev,somModifiers);
}


/* method: within */
_IDL_SEQUENCE_Container   within(Environment *ev)
{
   return SOM_ResolveD(this,Contained,Contained,within)
	(this, ev);
}


/* method: describe */
Description   describe(Environment *ev)
{
   return SOM_ResolveD(this,Contained,Contained,describe)
	(this, ev);
}



};   /* Contained */



#endif       /* SOM_Contained_xh */
