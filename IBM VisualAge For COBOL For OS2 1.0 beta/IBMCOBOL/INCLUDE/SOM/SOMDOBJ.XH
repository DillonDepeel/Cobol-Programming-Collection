
/*
 * This file was generated by the SOM Compiler.
 * FileName: c:\somtk\include\SOMDOBJ.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.7
 *     SOM Emitter emitxh: 2.42
 */

/*
 * 
 *    COMPONENT_NAME: somd
 * 
 *    ORIGINS: 27
 * 
 * 
 *    10H9767, 10H9769  (C) COPYRIGHT International Business Machines Corp. 1992,1994
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 *    Interface for CORBA Object Reference.
 * 
 *    This is the class that implements the behavior of CORBA object references,
 *    e.g., get_implementation, get_interface, duplicate, release, etc.
 * 
 *    In addition, there are some private methods, which are exposed only to
 *    the ORB classes, to implement the ORB functions related to object
 *    references (e.g., ORB_object_to_string).
 * 
 *    In DSOM, there is also another derivation of this class:  SOMDClientProxy.
 *    This subclass inherits the implementation of this class, but extends it
 *    by overriding somDispatch with a "remote dispatch" method, and caches the
 *    binding to the server process.  Whenever a remote object is accessed, it
 *    is represented in the client process by a SOMDClientProxy object.
 * 
 * 
 */


#ifndef SOM_SOMDObject_xh
#define SOM_SOMDObject_xh

class SOMDObject;

#define SOMDObject_MajorVersion 2
#define SOMDObject_MinorVersion 1

/*
 * Passthru lines: File: "C.xh", "before"
 */

#include <somdtype.xh>


/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef SOMDObject_API
#define SOMDObject_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;
class Container;
class ImplementationDef;
class InterfaceDef;
class NVList;
class Context;
class Request;

/*
 * End of user-defined types.
 */

/* A procedure to create the SOMDObject Class */
SOMEXTERN SOMClass * SOMLINK SOMDObjectNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the SOMDObject class object, and the methods it introduces. */
SOMEXTERN struct SOMDObjectClassDataStructure {
	SOMClass *classObject;
	somMToken get_implementation;
	somMToken get_interface;
	somMToken set_to_nil;
	somMethodProc *is_nil;
	somMToken is_SOM_ref;
	somMToken is_constant;
	somMToken is_proxy;
	somMToken duplicate;
	somMToken release;
	somMToken create_request;
	somMToken create_request_args;
	somMToken _get_somd_tag;
	somMToken _get_somd_flags;
	somMToken _set_somd_flags;
	somMToken _get_somd_impl;
	somMToken _set_somd_impl;
	somMToken _get_somd_rid;
	somMToken _set_somd_rid;
	somMToken _get_somd_id;
	somMToken _set_somd_id;
} SOMDLINK SOMDObjectClassData;
#define _SOMDObject SOMDObjectClassData.classObject

/* The API to parentMtabs for SOMDObject, and the instance data it introduces. */
SOMEXTERN struct SOMDObjectCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK SOMDObjectCClassData;

/*
 * -- Typedefs for SOMDObject Method Procedures
 */
SOMEXTERN {
typedef ImplementationDef*   SOMLINK somTP_SOMDObject_get_implementation(SOMDObject *somSelf, Environment *ev);
typedef somTP_SOMDObject_get_implementation *somTD_SOMDObject_get_implementation;
typedef InterfaceDef*   SOMLINK somTP_SOMDObject_get_interface(SOMDObject *somSelf, Environment *ev);
typedef somTP_SOMDObject_get_interface *somTD_SOMDObject_get_interface;
typedef boolean   SOMLINK somTP_SOMDObject_is_nil(SOMDObject *somSelf, Environment *ev);
typedef somTP_SOMDObject_is_nil *somTD_SOMDObject_is_nil;
typedef boolean   SOMLINK somTP_SOMDObject_is_SOM_ref(SOMDObject *somSelf, Environment *ev);
typedef somTP_SOMDObject_is_SOM_ref *somTD_SOMDObject_is_SOM_ref;
typedef boolean   SOMLINK somTP_SOMDObject_is_constant(SOMDObject *somSelf, Environment *ev);
typedef somTP_SOMDObject_is_constant *somTD_SOMDObject_is_constant;
typedef boolean   SOMLINK somTP_SOMDObject_is_proxy(SOMDObject *somSelf, Environment *ev);
typedef somTP_SOMDObject_is_proxy *somTD_SOMDObject_is_proxy;
typedef SOMDObject*   SOMLINK somTP_SOMDObject_duplicate(SOMDObject *somSelf, Environment *ev);
typedef somTP_SOMDObject_duplicate *somTD_SOMDObject_duplicate;
typedef void   SOMLINK somTP_SOMDObject_release(SOMDObject *somSelf, Environment *ev);
typedef somTP_SOMDObject_release *somTD_SOMDObject_release;
typedef ORBStatus   SOMLINK somTP_SOMDObject_create_request(SOMDObject *somSelf, Environment *ev,
		Context* ctx,
		Identifier operation,
		NVList* arg_list,
		NamedValue* result,
		Request** request,
		Flags req_flags);
typedef somTP_SOMDObject_create_request *somTD_SOMDObject_create_request;
typedef ORBStatus   SOMLINK somTP_SOMDObject_create_request_args(SOMDObject *somSelf, Environment *ev,
		Identifier operation,
		NVList** arg_list,
		NamedValue* result);
typedef somTP_SOMDObject_create_request_args *somTD_SOMDObject_create_request_args;
}

#endif /* SOMDObject_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for SOMDObject
 */
class SOMDObject : public SOMObject
{
public:

// SOMDObject::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_SOMDObject) SOMDObjectNewClass(SOMDObject_MajorVersion,SOMDObject_MinorVersion);
   return (void*)
      SOM_Resolve(_SOMDObject,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_SOMDObject));
}

// SOMDObject::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

SOMDObject()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMDObjectCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

SOMDObject(SOMDObject* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMDObjectCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

SOMDObject(const SOMDObject* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMDObjectCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: get_implementation */
ImplementationDef*   get_implementation(Environment *ev)
{
   return SOM_ResolveD(this,SOMDObject,SOMDObject,get_implementation)
	(this, ev);
}


/* method: get_interface */
InterfaceDef*   get_interface(Environment *ev)
{
   return SOM_ResolveD(this,SOMDObject,SOMDObject,get_interface)
	(this, ev);
}


/* procedure: is_nil */
static boolean   is_nil(SOMDObject *somSelf, Environment *ev)
{
   return ((somTD_SOMDObject_is_nil)SOMDObjectClassData.is_nil)
	(somSelf, ev);
}


/* method: is_SOM_ref */
boolean   is_SOM_ref(Environment *ev)
{
   return SOM_ResolveD(this,SOMDObject,SOMDObject,is_SOM_ref)
	(this, ev);
}


/* method: is_constant */
boolean   is_constant(Environment *ev)
{
   return SOM_ResolveD(this,SOMDObject,SOMDObject,is_constant)
	(this, ev);
}


/* method: is_proxy */
boolean   is_proxy(Environment *ev)
{
   return SOM_ResolveD(this,SOMDObject,SOMDObject,is_proxy)
	(this, ev);
}


/* method: duplicate */
SOMDObject*   duplicate(Environment *ev)
{
   return SOM_ResolveD(this,SOMDObject,SOMDObject,duplicate)
	(this, ev);
}


/* method: release */
void   release(Environment *ev)
{
   SOM_ResolveD(this,SOMDObject,SOMDObject,release)
	(this, ev);
}


/* method: create_request */
ORBStatus   create_request(Environment *ev,
		Context* ctx,
		Identifier operation,
		NVList* arg_list,
		NamedValue* result,
		Request** request,
		Flags req_flags)
{
   return SOM_ResolveD(this,SOMDObject,SOMDObject,create_request)
	(this, ev,ctx,operation,arg_list,result,request,req_flags);
}


/* method: create_request_args */
ORBStatus   create_request_args(Environment *ev,
		Identifier operation,
		NVList** arg_list,
		NamedValue* result)
{
   return SOM_ResolveD(this,SOMDObject,SOMDObject,create_request_args)
	(this, ev,operation,arg_list,result);
}



};   /* SOMDObject */



#endif       /* SOM_SOMDObject_xh */
