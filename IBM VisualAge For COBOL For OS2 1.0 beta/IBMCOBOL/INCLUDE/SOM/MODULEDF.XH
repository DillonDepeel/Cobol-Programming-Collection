
/*
 * This file was generated by the SOM Compiler.
 * FileName: c:\somtk\include\moduledf.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.7
 *     SOM Emitter emitxh: 2.42
 */

/*
 * 
 *    COMPONENT_NAME: somi
 * 
 *    ORIGINS: 27
 * 
 * 
 *    10H9767, 10H9769  (C) COPYRIGHT International Business Machines Corp. 1992,1994
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 *   ModuleDef: CORBA Interface for module definitions
 *   See CORBA 7.5.3, p.133
 */


#ifndef SOM_ModuleDef_xh
#define SOM_ModuleDef_xh

class ModuleDef;

#define ModuleDef_MajorVersion 2
#define ModuleDef_MinorVersion 1

/*
 * Passthru lines: File: "C.xh", "before"
 */

    #include <somtcnst.xh>
    #include <somir.xh>
    #include <containd.xh>


/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_Contained_xh
#include <containd.xh>
#endif
#ifndef SOM_Container_xh
#include <containr.xh>
#endif

#ifndef ModuleDef_API
#define ModuleDef_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;
class Container;
typedef
struct ModuleDescription {
Identifier name;
RepositoryId id;
RepositoryId defined_in;
} ModuleDescription;

/*
 *  The inherited describe method returns an instance of this
 *  (ModuleDescription) structure in the "value" member of the
 *  Description structure defined in the Contained interface.
 *  The inherited describe_contents method in the Container
 *  interface returns a sequence of these Description structures
 *  each carrying a reference to a ModuleDescription structure
 *  in its "value" member.
 */

/*
 * End of user-defined types.
 */

/* A procedure to create the ModuleDef Class */
SOMEXTERN SOMClass * SOMLINK ModuleDefNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the ModuleDef class object, and the methods it introduces. */
SOMEXTERN struct ModuleDefClassDataStructure {
	SOMClass *classObject;
} SOMDLINK ModuleDefClassData;
#define _ModuleDef ModuleDefClassData.classObject

/* The API to parentMtabs for ModuleDef, and the instance data it introduces. */
SOMEXTERN struct ModuleDefCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK ModuleDefCClassData;

/*
 * -- Typedefs for ModuleDef Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef void   SOMLINK somTP_ModuleDef_somFree(ModuleDef *somSelf);
typedef somTP_ModuleDef_somFree *somTD_ModuleDef_somFree;
typedef void   SOMLINK somTP_ModuleDef_somInit(ModuleDef *somSelf);
typedef somTP_ModuleDef_somInit *somTD_ModuleDef_somInit;
typedef void   SOMLINK somTP_ModuleDef_somUninit(ModuleDef *somSelf);
typedef somTP_ModuleDef_somUninit *somTD_ModuleDef_somUninit;
typedef void   SOMLINK somTP_ModuleDef_somDumpSelf(ModuleDef *somSelf,
		long level);
typedef somTP_ModuleDef_somDumpSelf *somTD_ModuleDef_somDumpSelf;
typedef void   SOMLINK somTP_ModuleDef_somDumpSelfInt(ModuleDef *somSelf,
		long level);
typedef somTP_ModuleDef_somDumpSelfInt *somTD_ModuleDef_somDumpSelfInt;
typedef void   SOMLINK somTP_ModuleDef_somDefaultInit(ModuleDef *somSelf,
		somInitCtrl* ctrl);
typedef somTP_ModuleDef_somDefaultInit *somTD_ModuleDef_somDefaultInit;
typedef void   SOMLINK somTP_ModuleDef_somDestruct(ModuleDef *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_ModuleDef_somDestruct *somTD_ModuleDef_somDestruct;
typedef void   SOMLINK somTP_ModuleDef_somDefaultCopyInit(ModuleDef *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ModuleDef_somDefaultCopyInit *somTD_ModuleDef_somDefaultCopyInit;
typedef ModuleDef*   SOMLINK somTP_ModuleDef_somDefaultAssign(ModuleDef *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ModuleDef_somDefaultAssign *somTD_ModuleDef_somDefaultAssign;
typedef void   SOMLINK somTP_ModuleDef_somDefaultConstCopyInit(ModuleDef *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ModuleDef_somDefaultConstCopyInit *somTD_ModuleDef_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_ModuleDef_somDefaultVCopyInit(ModuleDef *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ModuleDef_somDefaultVCopyInit *somTD_ModuleDef_somDefaultVCopyInit;
typedef void   SOMLINK somTP_ModuleDef_somDefaultConstVCopyInit(ModuleDef *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ModuleDef_somDefaultConstVCopyInit *somTD_ModuleDef_somDefaultConstVCopyInit;
typedef ModuleDef*   SOMLINK somTP_ModuleDef_somDefaultConstAssign(ModuleDef *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ModuleDef_somDefaultConstAssign *somTD_ModuleDef_somDefaultConstAssign;
typedef ModuleDef*   SOMLINK somTP_ModuleDef_somDefaultVAssign(ModuleDef *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ModuleDef_somDefaultVAssign *somTD_ModuleDef_somDefaultVAssign;
typedef ModuleDef*   SOMLINK somTP_ModuleDef_somDefaultConstVAssign(ModuleDef *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_ModuleDef_somDefaultConstVAssign *somTD_ModuleDef_somDefaultConstVAssign;
typedef SOMClass*   SOMLINK somTP_ModuleDef_somGetClass(ModuleDef *somSelf);
typedef somTP_ModuleDef_somGetClass *somTD_ModuleDef_somGetClass;
typedef string   SOMLINK somTP_ModuleDef_somGetClassName(ModuleDef *somSelf);
typedef somTP_ModuleDef_somGetClassName *somTD_ModuleDef_somGetClassName;
typedef long   SOMLINK somTP_ModuleDef_somGetSize(ModuleDef *somSelf);
typedef somTP_ModuleDef_somGetSize *somTD_ModuleDef_somGetSize;
typedef boolean   SOMLINK somTP_ModuleDef_somIsA(ModuleDef *somSelf,
		SOMClass* aClassObj);
typedef somTP_ModuleDef_somIsA *somTD_ModuleDef_somIsA;
typedef boolean   SOMLINK somTP_ModuleDef_somIsInstanceOf(ModuleDef *somSelf,
		SOMClass* aClassObj);
typedef somTP_ModuleDef_somIsInstanceOf *somTD_ModuleDef_somIsInstanceOf;
typedef boolean   SOMLINK somTP_ModuleDef_somRespondsTo(ModuleDef *somSelf,
		somId mId);
typedef somTP_ModuleDef_somRespondsTo *somTD_ModuleDef_somRespondsTo;
typedef boolean   SOMLINK somTP_ModuleDef_somDispatch(ModuleDef *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_ModuleDef_somDispatch *somTD_ModuleDef_somDispatch;
typedef boolean   SOMLINK somTP_ModuleDef_somClassDispatch(ModuleDef *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_ModuleDef_somClassDispatch *somTD_ModuleDef_somClassDispatch;
typedef boolean   SOMLINK somTP_ModuleDef_somCastObj(ModuleDef *somSelf,
		SOMClass* cls);
typedef somTP_ModuleDef_somCastObj *somTD_ModuleDef_somCastObj;
typedef boolean   SOMLINK somTP_ModuleDef_somResetObj(ModuleDef *somSelf);
typedef somTP_ModuleDef_somResetObj *somTD_ModuleDef_somResetObj;
typedef void   SOMLINK somTP_ModuleDef_somDispatchV(ModuleDef *somSelf,
		somId methodId,
		somId descriptor,
		va_list ap);
typedef somTP_ModuleDef_somDispatchV *somTD_ModuleDef_somDispatchV;
typedef long   SOMLINK somTP_ModuleDef_somDispatchL(ModuleDef *somSelf,
		somId methodId,
		somId descriptor,
		va_list ap);
typedef somTP_ModuleDef_somDispatchL *somTD_ModuleDef_somDispatchL;
typedef void*   SOMLINK somTP_ModuleDef_somDispatchA(ModuleDef *somSelf,
		somId methodId,
		somId descriptor,
		va_list ap);
typedef somTP_ModuleDef_somDispatchA *somTD_ModuleDef_somDispatchA;
typedef double   SOMLINK somTP_ModuleDef_somDispatchD(ModuleDef *somSelf,
		somId methodId,
		somId descriptor,
		va_list ap);
typedef somTP_ModuleDef_somDispatchD *somTD_ModuleDef_somDispatchD;
typedef SOMObject*   SOMLINK somTP_ModuleDef_somPrintSelf(ModuleDef *somSelf);
typedef somTP_ModuleDef_somPrintSelf *somTD_ModuleDef_somPrintSelf;
}

#endif /* ModuleDef_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for ModuleDef
 */
class ModuleDef : public Contained, public Container
{
public:

// ModuleDef::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_ModuleDef) ModuleDefNewClass(ModuleDef_MajorVersion,ModuleDef_MinorVersion);
   return (void*)
      SOM_Resolve(_ModuleDef,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_ModuleDef));
}

// ModuleDef::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

ModuleDef()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ModuleDefCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

ModuleDef(ModuleDef* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ModuleDefCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

ModuleDef(const ModuleDef* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ModuleDefCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,ModuleDef,SOMObject,somFree)
	(this);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,ModuleDef,SOMObject,somInit)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,ModuleDef,SOMObject,somUninit)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,ModuleDef,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,ModuleDef,SOMObject,somDumpSelfInt)
	(this,level);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,ModuleDef,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,ModuleDef,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ModuleDef,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
ModuleDef*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ModuleDef,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ModuleDef,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ModuleDef,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,ModuleDef,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
ModuleDef*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ModuleDef,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
ModuleDef*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ModuleDef,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
ModuleDef*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,ModuleDef,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,ModuleDef,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,ModuleDef,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,ModuleDef,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,ModuleDef,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,ModuleDef,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,ModuleDef,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   ModuleDef_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,ModuleDef,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,ModuleDef,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   ModuleDef_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,ModuleDef,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,ModuleDef,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,ModuleDef,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,ModuleDef,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */
/* the va_list invocation form */
void   ModuleDef_somDispatchV(somId methodId,
		somId descriptor,
		va_list ap)
{
   SOM_ResolveD(this,ModuleDef,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId,
		somId descriptor,
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,ModuleDef,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */
/* the va_list invocation form */
long   ModuleDef_somDispatchL(somId methodId,
		somId descriptor,
		va_list ap)
{
return SOM_ResolveD(this,ModuleDef,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId,
		somId descriptor,
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,ModuleDef,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */
/* the va_list invocation form */
void*   ModuleDef_somDispatchA(somId methodId,
		somId descriptor,
		va_list ap)
{
return SOM_ResolveD(this,ModuleDef,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId,
		somId descriptor,
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,ModuleDef,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */
/* the va_list invocation form */
double   ModuleDef_somDispatchD(somId methodId,
		somId descriptor,
		va_list ap)
{
return SOM_ResolveD(this,ModuleDef,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId,
		somId descriptor,
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,ModuleDef,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,ModuleDef,SOMObject,somPrintSelf)
	(this);
}



};   /* ModuleDef */



#endif       /* SOM_ModuleDef_xh */
