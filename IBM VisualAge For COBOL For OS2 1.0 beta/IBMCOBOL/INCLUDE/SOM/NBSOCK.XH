
/*
 * This file was generated by the SOM Compiler.
 * FileName: c:\somtk\include\NBSOCK.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.7
 *     SOM Emitter emitxh: 2.42
 */

/*
 * 
 *    COMPONENT_NAME: somu
 * 
 *    ORIGINS: 27
 * 
 * 
 *    10H9767, 10H9769  (C) COPYRIGHT International Business Machines Corp. 1992,1994
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 */


#ifndef SOM_NBSockets_xh
#define SOM_NBSockets_xh

class NBSockets;

#define NBSockets_MajorVersion 2
#define NBSockets_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_Sockets_xh
#include <somssock.xh>
#endif

/*
 * C++ metaclass def
 */
#include <snglicls.xh>

#ifndef NBSockets_API
#define NBSockets_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;

/*
 * End of user-defined types.
 */

/* A procedure to create the NBSockets Class */
class SOMMSingleInstance;
SOMEXTERN SOMMSingleInstance * SOMLINK NBSocketsNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the NBSockets class object, and the methods it introduces. */
SOMEXTERN struct NBSocketsClassDataStructure {
	SOMMSingleInstance *classObject;
} SOMDLINK NBSocketsClassData;
#define _NBSockets NBSocketsClassData.classObject

/* The API to parentMtabs for NBSockets, and the instance data it introduces. */
SOMEXTERN struct NBSocketsCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK NBSocketsCClassData;

/*
 * -- Typedefs for NBSockets Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef SOMMSingleInstance*   SOMLINK somTP_NBSockets_somGetClass(NBSockets *somSelf);
typedef somTP_NBSockets_somGetClass *somTD_NBSockets_somGetClass;
}

#endif /* NBSockets_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for NBSockets
 */
class NBSockets : public Sockets
{
public:

// NBSockets::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_NBSockets) NBSocketsNewClass(NBSockets_MajorVersion,NBSockets_MinorVersion);
   return (void*)
      SOM_Resolve(_NBSockets,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_NBSockets));
}

// NBSockets::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

NBSockets()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (NBSocketsCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

NBSockets(NBSockets* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (NBSocketsCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

NBSockets(const NBSockets* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (NBSocketsCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
SOMMSingleInstance*  somGetClass()
{
   return SOM_ResolveD(this,NBSockets,SOMObject,somGetClass)
	(this);
}



};   /* NBSockets */



#endif       /* SOM_NBSockets_xh */
