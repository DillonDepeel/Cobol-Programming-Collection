
/*
 * This file was generated by the SOM Compiler.
 * FileName: c:\somtk\include\paramdef.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.7
 *     SOM Emitter emitxh: 2.42
 */

/*
 * 
 *    COMPONENT_NAME: somi
 * 
 *    ORIGINS: 27
 * 
 * 
 *    10H9767, 10H9769  (C) COPYRIGHT International Business Machines Corp. 1992,1994
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 *   ParameterDef: CORBA Interface for parameter definitions
 *   See CORBA 7.5.7, p.136
 */


#ifndef SOM_ParameterDef_xh
#define SOM_ParameterDef_xh

class ParameterDef;

#define ParameterDef_MajorVersion 2
#define ParameterDef_MinorVersion 1

/*
 * Passthru lines: File: "C.xh", "before"
 */

    #include <somtcnst.xh>
    #include <somir.xh>
    #include <containd.xh>


/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_Contained_xh
#include <containd.xh>
#endif

#ifndef ParameterDef_API
#define ParameterDef_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;
class Container;
typedef unsigned long ParameterMode;
#define ParameterDef_IN 1UL
#define ParameterDef_OUT 2UL
#define ParameterDef_INOUT 3UL
typedef
struct ParameterDescription {
Identifier name;
RepositoryId id;
RepositoryId defined_in;
TypeCode type;
ParameterMode mode;
} ParameterDescription;

/*
 *  The inherited describe method returns an instance of this
 *  (ParameterDescription) structure in the "value" member of the
 *  Description structure defined in the Contained interface.
 */

/*
 * End of user-defined types.
 */

/* A procedure to create the ParameterDef Class */
SOMEXTERN SOMClass * SOMLINK ParameterDefNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the ParameterDef class object, and the methods it introduces. */
SOMEXTERN struct ParameterDefClassDataStructure {
	SOMClass *classObject;
	somMToken _get_type;
	somMToken _set_type;
	somMToken _get_mode;
	somMToken _set_mode;
} SOMDLINK ParameterDefClassData;
#define _ParameterDef ParameterDefClassData.classObject

/* The API to parentMtabs for ParameterDef, and the instance data it introduces. */
SOMEXTERN struct ParameterDefCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK ParameterDefCClassData;

/*
 * -- Typedefs for ParameterDef Method Procedures
 */
SOMEXTERN {
typedef TypeCode   SOMLINK somTP_ParameterDef__get_type(ParameterDef *somSelf, Environment *ev);
typedef somTP_ParameterDef__get_type *somTD_ParameterDef__get_type;
typedef void   SOMLINK somTP_ParameterDef__set_type(ParameterDef *somSelf, Environment *ev,
		TypeCode type);
typedef somTP_ParameterDef__set_type *somTD_ParameterDef__set_type;
typedef ParameterMode   SOMLINK somTP_ParameterDef__get_mode(ParameterDef *somSelf, Environment *ev);
typedef somTP_ParameterDef__get_mode *somTD_ParameterDef__get_mode;
typedef void   SOMLINK somTP_ParameterDef__set_mode(ParameterDef *somSelf, Environment *ev,
		ParameterMode mode);
typedef somTP_ParameterDef__set_mode *somTD_ParameterDef__set_mode;
}

#endif /* ParameterDef_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for ParameterDef
 */
class ParameterDef : public Contained
{
public:

// ParameterDef::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_ParameterDef) ParameterDefNewClass(ParameterDef_MajorVersion,ParameterDef_MinorVersion);
   return (void*)
      SOM_Resolve(_ParameterDef,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_ParameterDef));
}

// ParameterDef::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

ParameterDef()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ParameterDefCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

ParameterDef(ParameterDef* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ParameterDefCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

ParameterDef(const ParameterDef* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ParameterDefCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: _get_type */
TypeCode   _get_type(Environment *ev)
{
   return SOM_ResolveD(this,ParameterDef,ParameterDef,_get_type)
	(this, ev);
}


/* method: _set_type */
void   _set_type(Environment *ev,
		TypeCode type)
{
   SOM_ResolveD(this,ParameterDef,ParameterDef,_set_type)
	(this, ev,type);
}


/* method: _get_mode */
ParameterMode   _get_mode(Environment *ev)
{
   return SOM_ResolveD(this,ParameterDef,ParameterDef,_get_mode)
	(this, ev);
}


/* method: _set_mode */
void   _set_mode(Environment *ev,
		ParameterMode mode)
{
   SOM_ResolveD(this,ParameterDef,ParameterDef,_set_mode)
	(this, ev,mode);
}



};   /* ParameterDef */



#endif       /* SOM_ParameterDef_xh */
