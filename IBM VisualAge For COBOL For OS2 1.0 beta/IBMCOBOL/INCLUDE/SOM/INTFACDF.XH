
/*
 * This file was generated by the SOM Compiler.
 * FileName: c:\somtk\include\intfacdf.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.7
 *     SOM Emitter emitxh: 2.42
 */

/*
 * 
 *    COMPONENT_NAME: somi
 * 
 *    ORIGINS: 27
 * 
 * 
 *    10H9767, 10H9769  (C) COPYRIGHT International Business Machines Corp. 1992,1994
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 *   InterfaceDef: CORBA Interface for interface definitions
 *   See CORBA 7.5.4, p.134
 */


#ifndef SOM_InterfaceDef_xh
#define SOM_InterfaceDef_xh

class InterfaceDef;

#define InterfaceDef_MajorVersion 2
#define InterfaceDef_MinorVersion 1

/*
 * Passthru lines: File: "C.xh", "before"
 */

    #include <somtcnst.xh>
    #include <somir.xh>
    #include <operatdf.xh>
    #include <attribdf.xh>


/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_Contained_xh
#include <containd.xh>
#endif
#ifndef SOM_Container_xh
#include <containr.xh>
#endif

#ifndef InterfaceDef_API
#define InterfaceDef_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;
class Container;
struct OperationDescription;
#ifndef _IDL_SEQUENCE_OperationDescription_defined
#define _IDL_SEQUENCE_OperationDescription_defined
typedef struct {
    unsigned long _maximum;
    unsigned long _length;
    struct OperationDescription *_buffer;
} _IDL_SEQUENCE_OperationDescription;
#endif /* _IDL_SEQUENCE_OperationDescription_defined */ 
struct AttributeDescription;
#ifndef _IDL_SEQUENCE_AttributeDescription_defined
#define _IDL_SEQUENCE_AttributeDescription_defined
typedef struct {
    unsigned long _maximum;
    unsigned long _length;
    struct AttributeDescription *_buffer;
} _IDL_SEQUENCE_AttributeDescription;
#endif /* _IDL_SEQUENCE_AttributeDescription_defined */ 
typedef
struct FullInterfaceDescription {
Identifier name;
RepositoryId id;
RepositoryId defined_in;
_IDL_SEQUENCE_OperationDescription operation;
_IDL_SEQUENCE_AttributeDescription attributes;
} FullInterfaceDescription;
typedef
struct InterfaceDescription {
Identifier name;
RepositoryId id;
RepositoryId defined_in;
} InterfaceDescription;

/*
 *  The inherited describe method returns an instance of this
 *  (InterfaceDescription) structure in the "value" member of the
 *  Description structure defined in the Contained interface.
 *  The inherited describe_contents method in the Container
 *  interface returns a sequence of these Description structures
 *  each carrying a reference to an InterfaceDescription structure
 *  in its "value" member.
 */

/*
 * End of user-defined types.
 */

/* A procedure to create the InterfaceDef Class */
SOMEXTERN SOMClass * SOMLINK InterfaceDefNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the InterfaceDef class object, and the methods it introduces. */
SOMEXTERN struct InterfaceDefClassDataStructure {
	SOMClass *classObject;
	somMToken describe_interface;
	somMToken _get_base_interfaces;
	somMToken _set_base_interfaces;
	somMToken _get_instanceData;
	somMToken _set_instanceData;
} SOMDLINK InterfaceDefClassData;
#define _InterfaceDef InterfaceDefClassData.classObject

/* The API to parentMtabs for InterfaceDef, and the instance data it introduces. */
SOMEXTERN struct InterfaceDefCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK InterfaceDefCClassData;

/*
 * -- Typedefs for InterfaceDef Method Procedures
 */
SOMEXTERN {
typedef _IDL_SEQUENCE_string   SOMLINK somTP_InterfaceDef__get_base_interfaces(InterfaceDef *somSelf, Environment *ev);
typedef somTP_InterfaceDef__get_base_interfaces *somTD_InterfaceDef__get_base_interfaces;
typedef void   SOMLINK somTP_InterfaceDef__set_base_interfaces(InterfaceDef *somSelf, Environment *ev,
		_IDL_SEQUENCE_string* base_interfaces);
typedef somTP_InterfaceDef__set_base_interfaces *somTD_InterfaceDef__set_base_interfaces;
typedef FullInterfaceDescription   SOMLINK somTP_InterfaceDef_describe_interface(InterfaceDef *somSelf, Environment *ev);
typedef somTP_InterfaceDef_describe_interface *somTD_InterfaceDef_describe_interface;
typedef TypeCode   SOMLINK somTP_InterfaceDef__get_instanceData(InterfaceDef *somSelf, Environment *ev);
typedef somTP_InterfaceDef__get_instanceData *somTD_InterfaceDef__get_instanceData;
typedef void   SOMLINK somTP_InterfaceDef__set_instanceData(InterfaceDef *somSelf, Environment *ev,
		TypeCode instanceData);
typedef somTP_InterfaceDef__set_instanceData *somTD_InterfaceDef__set_instanceData;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef void   SOMLINK somTP_InterfaceDef_somFree(InterfaceDef *somSelf);
typedef somTP_InterfaceDef_somFree *somTD_InterfaceDef_somFree;
typedef void   SOMLINK somTP_InterfaceDef_somInit(InterfaceDef *somSelf);
typedef somTP_InterfaceDef_somInit *somTD_InterfaceDef_somInit;
typedef void   SOMLINK somTP_InterfaceDef_somUninit(InterfaceDef *somSelf);
typedef somTP_InterfaceDef_somUninit *somTD_InterfaceDef_somUninit;
typedef void   SOMLINK somTP_InterfaceDef_somDumpSelf(InterfaceDef *somSelf,
		long level);
typedef somTP_InterfaceDef_somDumpSelf *somTD_InterfaceDef_somDumpSelf;
typedef void   SOMLINK somTP_InterfaceDef_somDumpSelfInt(InterfaceDef *somSelf,
		long level);
typedef somTP_InterfaceDef_somDumpSelfInt *somTD_InterfaceDef_somDumpSelfInt;
typedef void   SOMLINK somTP_InterfaceDef_somDefaultInit(InterfaceDef *somSelf,
		somInitCtrl* ctrl);
typedef somTP_InterfaceDef_somDefaultInit *somTD_InterfaceDef_somDefaultInit;
typedef void   SOMLINK somTP_InterfaceDef_somDestruct(InterfaceDef *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_InterfaceDef_somDestruct *somTD_InterfaceDef_somDestruct;
typedef void   SOMLINK somTP_InterfaceDef_somDefaultCopyInit(InterfaceDef *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_InterfaceDef_somDefaultCopyInit *somTD_InterfaceDef_somDefaultCopyInit;
typedef InterfaceDef*   SOMLINK somTP_InterfaceDef_somDefaultAssign(InterfaceDef *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_InterfaceDef_somDefaultAssign *somTD_InterfaceDef_somDefaultAssign;
typedef void   SOMLINK somTP_InterfaceDef_somDefaultConstCopyInit(InterfaceDef *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_InterfaceDef_somDefaultConstCopyInit *somTD_InterfaceDef_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_InterfaceDef_somDefaultVCopyInit(InterfaceDef *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_InterfaceDef_somDefaultVCopyInit *somTD_InterfaceDef_somDefaultVCopyInit;
typedef void   SOMLINK somTP_InterfaceDef_somDefaultConstVCopyInit(InterfaceDef *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_InterfaceDef_somDefaultConstVCopyInit *somTD_InterfaceDef_somDefaultConstVCopyInit;
typedef InterfaceDef*   SOMLINK somTP_InterfaceDef_somDefaultConstAssign(InterfaceDef *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_InterfaceDef_somDefaultConstAssign *somTD_InterfaceDef_somDefaultConstAssign;
typedef InterfaceDef*   SOMLINK somTP_InterfaceDef_somDefaultVAssign(InterfaceDef *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_InterfaceDef_somDefaultVAssign *somTD_InterfaceDef_somDefaultVAssign;
typedef InterfaceDef*   SOMLINK somTP_InterfaceDef_somDefaultConstVAssign(InterfaceDef *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_InterfaceDef_somDefaultConstVAssign *somTD_InterfaceDef_somDefaultConstVAssign;
typedef SOMClass*   SOMLINK somTP_InterfaceDef_somGetClass(InterfaceDef *somSelf);
typedef somTP_InterfaceDef_somGetClass *somTD_InterfaceDef_somGetClass;
typedef string   SOMLINK somTP_InterfaceDef_somGetClassName(InterfaceDef *somSelf);
typedef somTP_InterfaceDef_somGetClassName *somTD_InterfaceDef_somGetClassName;
typedef long   SOMLINK somTP_InterfaceDef_somGetSize(InterfaceDef *somSelf);
typedef somTP_InterfaceDef_somGetSize *somTD_InterfaceDef_somGetSize;
typedef boolean   SOMLINK somTP_InterfaceDef_somIsA(InterfaceDef *somSelf,
		SOMClass* aClassObj);
typedef somTP_InterfaceDef_somIsA *somTD_InterfaceDef_somIsA;
typedef boolean   SOMLINK somTP_InterfaceDef_somIsInstanceOf(InterfaceDef *somSelf,
		SOMClass* aClassObj);
typedef somTP_InterfaceDef_somIsInstanceOf *somTD_InterfaceDef_somIsInstanceOf;
typedef boolean   SOMLINK somTP_InterfaceDef_somRespondsTo(InterfaceDef *somSelf,
		somId mId);
typedef somTP_InterfaceDef_somRespondsTo *somTD_InterfaceDef_somRespondsTo;
typedef boolean   SOMLINK somTP_InterfaceDef_somDispatch(InterfaceDef *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_InterfaceDef_somDispatch *somTD_InterfaceDef_somDispatch;
typedef boolean   SOMLINK somTP_InterfaceDef_somClassDispatch(InterfaceDef *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_InterfaceDef_somClassDispatch *somTD_InterfaceDef_somClassDispatch;
typedef boolean   SOMLINK somTP_InterfaceDef_somCastObj(InterfaceDef *somSelf,
		SOMClass* cls);
typedef somTP_InterfaceDef_somCastObj *somTD_InterfaceDef_somCastObj;
typedef boolean   SOMLINK somTP_InterfaceDef_somResetObj(InterfaceDef *somSelf);
typedef somTP_InterfaceDef_somResetObj *somTD_InterfaceDef_somResetObj;
typedef void   SOMLINK somTP_InterfaceDef_somDispatchV(InterfaceDef *somSelf,
		somId methodId,
		somId descriptor,
		va_list ap);
typedef somTP_InterfaceDef_somDispatchV *somTD_InterfaceDef_somDispatchV;
typedef long   SOMLINK somTP_InterfaceDef_somDispatchL(InterfaceDef *somSelf,
		somId methodId,
		somId descriptor,
		va_list ap);
typedef somTP_InterfaceDef_somDispatchL *somTD_InterfaceDef_somDispatchL;
typedef void*   SOMLINK somTP_InterfaceDef_somDispatchA(InterfaceDef *somSelf,
		somId methodId,
		somId descriptor,
		va_list ap);
typedef somTP_InterfaceDef_somDispatchA *somTD_InterfaceDef_somDispatchA;
typedef double   SOMLINK somTP_InterfaceDef_somDispatchD(InterfaceDef *somSelf,
		somId methodId,
		somId descriptor,
		va_list ap);
typedef somTP_InterfaceDef_somDispatchD *somTD_InterfaceDef_somDispatchD;
typedef SOMObject*   SOMLINK somTP_InterfaceDef_somPrintSelf(InterfaceDef *somSelf);
typedef somTP_InterfaceDef_somPrintSelf *somTD_InterfaceDef_somPrintSelf;
}

#endif /* InterfaceDef_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for InterfaceDef
 */
class InterfaceDef : public Contained, public Container
{
public:

// InterfaceDef::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_InterfaceDef) InterfaceDefNewClass(InterfaceDef_MajorVersion,InterfaceDef_MinorVersion);
   return (void*)
      SOM_Resolve(_InterfaceDef,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_InterfaceDef));
}

// InterfaceDef::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

InterfaceDef()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (InterfaceDefCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

InterfaceDef(InterfaceDef* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (InterfaceDefCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

InterfaceDef(const InterfaceDef* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (InterfaceDefCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: _get_base_interfaces */
_IDL_SEQUENCE_string   _get_base_interfaces(Environment *ev)
{
   return SOM_ResolveD(this,InterfaceDef,InterfaceDef,_get_base_interfaces)
	(this, ev);
}


/* method: _set_base_interfaces */
void   _set_base_interfaces(Environment *ev,
		_IDL_SEQUENCE_string* base_interfaces)
{
   SOM_ResolveD(this,InterfaceDef,InterfaceDef,_set_base_interfaces)
	(this, ev,base_interfaces);
}


/* method: describe_interface */
FullInterfaceDescription   describe_interface(Environment *ev)
{
   return SOM_ResolveD(this,InterfaceDef,InterfaceDef,describe_interface)
	(this, ev);
}


/* method: _get_instanceData */
TypeCode   _get_instanceData(Environment *ev)
{
   return SOM_ResolveD(this,InterfaceDef,InterfaceDef,_get_instanceData)
	(this, ev);
}


/* method: _set_instanceData */
void   _set_instanceData(Environment *ev,
		TypeCode instanceData)
{
   SOM_ResolveD(this,InterfaceDef,InterfaceDef,_set_instanceData)
	(this, ev,instanceData);
}


/*
 * Reintroduce inherited methods
 */

/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,InterfaceDef,SOMObject,somFree)
	(this);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,InterfaceDef,SOMObject,somInit)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,InterfaceDef,SOMObject,somUninit)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,InterfaceDef,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,InterfaceDef,SOMObject,somDumpSelfInt)
	(this,level);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,InterfaceDef,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,InterfaceDef,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,InterfaceDef,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
InterfaceDef*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,InterfaceDef,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,InterfaceDef,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,InterfaceDef,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,InterfaceDef,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
InterfaceDef*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,InterfaceDef,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
InterfaceDef*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,InterfaceDef,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
InterfaceDef*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,InterfaceDef,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,InterfaceDef,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,InterfaceDef,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,InterfaceDef,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,InterfaceDef,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,InterfaceDef,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,InterfaceDef,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   InterfaceDef_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,InterfaceDef,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,InterfaceDef,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   InterfaceDef_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,InterfaceDef,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,InterfaceDef,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,InterfaceDef,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,InterfaceDef,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */
/* the va_list invocation form */
void   InterfaceDef_somDispatchV(somId methodId,
		somId descriptor,
		va_list ap)
{
   SOM_ResolveD(this,InterfaceDef,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId,
		somId descriptor,
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,InterfaceDef,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */
/* the va_list invocation form */
long   InterfaceDef_somDispatchL(somId methodId,
		somId descriptor,
		va_list ap)
{
return SOM_ResolveD(this,InterfaceDef,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId,
		somId descriptor,
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,InterfaceDef,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */
/* the va_list invocation form */
void*   InterfaceDef_somDispatchA(somId methodId,
		somId descriptor,
		va_list ap)
{
return SOM_ResolveD(this,InterfaceDef,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId,
		somId descriptor,
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,InterfaceDef,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */
/* the va_list invocation form */
double   InterfaceDef_somDispatchD(somId methodId,
		somId descriptor,
		va_list ap)
{
return SOM_ResolveD(this,InterfaceDef,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId,
		somId descriptor,
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,InterfaceDef,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,InterfaceDef,SOMObject,somPrintSelf)
	(this);
}



};   /* InterfaceDef */



#endif       /* SOM_InterfaceDef_xh */
