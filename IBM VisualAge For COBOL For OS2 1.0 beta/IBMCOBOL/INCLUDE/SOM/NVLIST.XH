
/*
 * This file was generated by the SOM Compiler.
 * FileName: c:\somtk\include\NVLIST.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.7
 *     SOM Emitter emitxh: 2.42
 */

/*
 * 
 *    COMPONENT_NAME: somd
 * 
 *    ORIGINS: 27
 * 
 * 
 *    10H9767, 10H9769  (C) COPYRIGHT International Business Machines Corp. 1992,1994
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 *   This class implements the NVList object.
 */


#ifndef SOM_NVList_xh
#define SOM_NVList_xh

class NVList;

#define NVList_MajorVersion 2
#define NVList_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef NVList_API
#define NVList_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;
class Container;

/*
 * End of user-defined types.
 */

/* A procedure to create the NVList Class */
SOMEXTERN SOMClass * SOMLINK NVListNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the NVList class object, and the methods it introduces. */
SOMEXTERN struct NVListClassDataStructure {
	SOMClass *classObject;
	somMToken add_item;
	somMToken remove_item;
	somMToken free;
	somMToken free_memory;
	somMToken get_count;
	somMToken set_item;
	somMToken get_item;
	somMToken get_item_by_name;
} SOMDLINK NVListClassData;
#define _NVList NVListClassData.classObject

/* The API to parentMtabs for NVList, and the instance data it introduces. */
SOMEXTERN struct NVListCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK NVListCClassData;

/*
 * -- Typedefs for NVList Method Procedures
 */
SOMEXTERN {
typedef ORBStatus   SOMLINK somTP_NVList_add_item(NVList *somSelf, Environment *ev,
		Identifier item_name,
		TypeCode item_type,
		void* value,
		long value_len,
		Flags item_flags);
typedef somTP_NVList_add_item *somTD_NVList_add_item;
typedef ORBStatus   SOMLINK somTP_NVList_free(NVList *somSelf, Environment *ev);
typedef somTP_NVList_free *somTD_NVList_free;
typedef ORBStatus   SOMLINK somTP_NVList_free_memory(NVList *somSelf, Environment *ev);
typedef somTP_NVList_free_memory *somTD_NVList_free_memory;
typedef ORBStatus   SOMLINK somTP_NVList_get_count(NVList *somSelf, Environment *ev,
		long* count);
typedef somTP_NVList_get_count *somTD_NVList_get_count;
typedef ORBStatus   SOMLINK somTP_NVList_set_item(NVList *somSelf, Environment *ev,
		long item_number,
		Identifier item_name,
		TypeCode item_type,
		void* value,
		long value_len,
		Flags item_flags);
typedef somTP_NVList_set_item *somTD_NVList_set_item;
typedef ORBStatus   SOMLINK somTP_NVList_get_item(NVList *somSelf, Environment *ev,
		long item_number,
		Identifier* item_name,
		TypeCode* item_type,
		void** value,
		long* value_len,
		Flags* item_flags);
typedef somTP_NVList_get_item *somTD_NVList_get_item;
}

#endif /* NVList_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for NVList
 */
class NVList : public SOMObject
{
public:

// NVList::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_NVList) NVListNewClass(NVList_MajorVersion,NVList_MinorVersion);
   return (void*)
      SOM_Resolve(_NVList,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_NVList));
}

// NVList::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

NVList()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (NVListCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

NVList(NVList* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (NVListCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

NVList(const NVList* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (NVListCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: add_item */
ORBStatus   add_item(Environment *ev,
		Identifier item_name,
		TypeCode item_type,
		void* value,
		long value_len,
		Flags item_flags)
{
   return SOM_ResolveD(this,NVList,NVList,add_item)
	(this, ev,item_name,item_type,value,value_len,item_flags);
}


/* method: free */
ORBStatus   free(Environment *ev)
{
   return SOM_ResolveD(this,NVList,NVList,free)
	(this, ev);
}


/* method: free_memory */
ORBStatus   free_memory(Environment *ev)
{
   return SOM_ResolveD(this,NVList,NVList,free_memory)
	(this, ev);
}


/* method: get_count */
ORBStatus   get_count(Environment *ev,
		long* count)
{
   return SOM_ResolveD(this,NVList,NVList,get_count)
	(this, ev,count);
}


/* method: set_item */
ORBStatus   set_item(Environment *ev,
		long item_number,
		Identifier item_name,
		TypeCode item_type,
		void* value,
		long value_len,
		Flags item_flags)
{
   return SOM_ResolveD(this,NVList,NVList,set_item)
	(this, ev,item_number,item_name,item_type,value,value_len,item_flags);
}


/* method: get_item */
ORBStatus   get_item(Environment *ev,
		long item_number,
		Identifier* item_name,
		TypeCode* item_type,
		void** value,
		long* value_len,
		Flags* item_flags)
{
   return SOM_ResolveD(this,NVList,NVList,get_item)
	(this, ev,item_number,item_name,item_type,value,value_len,item_flags);
}



};   /* NVList */



#endif       /* SOM_NVList_xh */
