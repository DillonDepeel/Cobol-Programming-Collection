
/*
 * This file was generated by the SOM Compiler.
 * FileName: c:\somtk\include\SOMOA.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.7
 *     SOM Emitter emitxh: 2.42
 */

/*
 * 
 *    COMPONENT_NAME: somd
 * 
 *    ORIGINS: 27
 * 
 * 
 *    10H9767, 10H9769  (C) COPYRIGHT International Business Machines Corp. 1992,1994
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 *    IDL interface spec for SOM Object Adapter (derived from BOA)
 * 
 *    This is DSOM's primary Object Adapter.  It implements the BOA interface.
 */


#ifndef SOM_SOMOA_xh
#define SOM_SOMOA_xh

class SOMOA;

#define SOMOA_MajorVersion 2
#define SOMOA_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_BOA_xh
#include <boa.xh>
#endif

#ifndef SOMOA_API
#define SOMOA_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;
class Container;
class SOMDObject;
class Principal;
class ImplementationDef;
class InterfaceDef;
class Context;

/*
 * End of user-defined types.
 */

/*
 * Passthru lines: File: "C.xh", "after"
 */

#define SOMD_WAIT     1
#define SOMD_NO_WAIT  0
#define SOMD_IMPL_NOT_INITIALIZED          0
#define SOMD_IMPL_NOT_ACTIVE               1
#define SOMD_IMPL_ACTIVE                   2

class SOMOA;
SOMEXTERN SOMOA * SOMDLINK SOMD_SOMOAObject;


/* A procedure to create the SOMOA Class */
SOMEXTERN SOMClass * SOMLINK SOMOANewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the SOMOA class object, and the methods it introduces. */
SOMEXTERN struct SOMOAClassDataStructure {
	SOMClass *classObject;
	somMToken execute_next_request;
	somMToken execute_request_loop;
	somMToken create_constant;
	somMToken change_id;
	somMToken create_SOM_ref;
	somMToken get_SOM_object;
	somMToken activate_impl_failed;
	somMToken interrupt_server;
} SOMDLINK SOMOAClassData;
#define _SOMOA SOMOAClassData.classObject

/* The API to parentMtabs for SOMOA, and the instance data it introduces. */
SOMEXTERN struct SOMOACClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK SOMOACClassData;

/*
 * -- Typedefs for SOMOA Method Procedures
 */
SOMEXTERN {
typedef ORBStatus   SOMLINK somTP_SOMOA_execute_next_request(SOMOA *somSelf, Environment *ev,
		Flags waitFlag);
typedef somTP_SOMOA_execute_next_request *somTD_SOMOA_execute_next_request;
typedef ORBStatus   SOMLINK somTP_SOMOA_execute_request_loop(SOMOA *somSelf, Environment *ev,
		Flags waitFlag);
typedef somTP_SOMOA_execute_request_loop *somTD_SOMOA_execute_request_loop;
typedef void   SOMLINK somTP_SOMOA_change_id(SOMOA *somSelf, Environment *ev,
		SOMDObject* objref,
		ReferenceData* id);
typedef somTP_SOMOA_change_id *somTD_SOMOA_change_id;
typedef SOMDObject*   SOMLINK somTP_SOMOA_create_constant(SOMOA *somSelf, Environment *ev,
		ReferenceData* id,
		InterfaceDef* intf,
		ImplementationDef* impl);
typedef somTP_SOMOA_create_constant *somTD_SOMOA_create_constant;
typedef SOMDObject*   SOMLINK somTP_SOMOA_create_SOM_ref(SOMOA *somSelf, Environment *ev,
		SOMObject* somobj,
		ImplementationDef* impl);
typedef somTP_SOMOA_create_SOM_ref *somTD_SOMOA_create_SOM_ref;
typedef SOMObject*   SOMLINK somTP_SOMOA_get_SOM_object(SOMOA *somSelf, Environment *ev,
		SOMDObject* somref);
typedef somTP_SOMOA_get_SOM_object *somTD_SOMOA_get_SOM_object;
typedef void   SOMLINK somTP_SOMOA_activate_impl_failed(SOMOA *somSelf, Environment *ev,
		ImplementationDef* impl,
		ORBStatus rc);
typedef somTP_SOMOA_activate_impl_failed *somTD_SOMOA_activate_impl_failed;
typedef void   SOMLINK somTP_SOMOA_interrupt_server(SOMOA *somSelf, Environment *ev);
typedef somTP_SOMOA_interrupt_server *somTD_SOMOA_interrupt_server;
}

#endif /* SOMOA_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for SOMOA
 */
class SOMOA : public BOA
{
public:

// SOMOA::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_SOMOA) SOMOANewClass(SOMOA_MajorVersion,SOMOA_MinorVersion);
   return (void*)
      SOM_Resolve(_SOMOA,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_SOMOA));
}

// SOMOA::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

SOMOA()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMOACClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

SOMOA(SOMOA* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMOACClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

SOMOA(const SOMOA* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMOACClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: execute_next_request */
ORBStatus   execute_next_request(Environment *ev,
		Flags waitFlag)
{
   return SOM_ResolveD(this,SOMOA,SOMOA,execute_next_request)
	(this, ev,waitFlag);
}


/* method: execute_request_loop */
ORBStatus   execute_request_loop(Environment *ev,
		Flags waitFlag)
{
   return SOM_ResolveD(this,SOMOA,SOMOA,execute_request_loop)
	(this, ev,waitFlag);
}


/* method: change_id */
void   change_id(Environment *ev,
		SOMDObject* objref,
		ReferenceData* id)
{
   SOM_ResolveD(this,SOMOA,SOMOA,change_id)
	(this, ev,objref,id);
}


/* method: create_constant */
SOMDObject*   create_constant(Environment *ev,
		ReferenceData* id,
		InterfaceDef* intf,
		ImplementationDef* impl)
{
   return SOM_ResolveD(this,SOMOA,SOMOA,create_constant)
	(this, ev,id,intf,impl);
}


/* method: create_SOM_ref */
SOMDObject*   create_SOM_ref(Environment *ev,
		SOMObject* somobj,
		ImplementationDef* impl)
{
   return SOM_ResolveD(this,SOMOA,SOMOA,create_SOM_ref)
	(this, ev,somobj,impl);
}


/* method: get_SOM_object */
SOMObject*   get_SOM_object(Environment *ev,
		SOMDObject* somref)
{
   return SOM_ResolveD(this,SOMOA,SOMOA,get_SOM_object)
	(this, ev,somref);
}


/* method: activate_impl_failed */
void   activate_impl_failed(Environment *ev,
		ImplementationDef* impl,
		ORBStatus rc)
{
   SOM_ResolveD(this,SOMOA,SOMOA,activate_impl_failed)
	(this, ev,impl,rc);
}


/* method: interrupt_server */
void   interrupt_server(Environment *ev)
{
   SOM_ResolveD(this,SOMOA,SOMOA,interrupt_server)
	(this, ev);
}



};   /* SOMOA */



#endif       /* SOM_SOMOA_xh */
