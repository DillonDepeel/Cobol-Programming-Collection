
/*
 * This file was generated by the SOM Compiler.
 * FileName: c:\somtk\include\operatdf.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.7
 *     SOM Emitter emitxh: 2.42
 */

/*
 * 
 *    COMPONENT_NAME: somi
 * 
 *    ORIGINS: 27
 * 
 * 
 *    10H9767, 10H9769  (C) COPYRIGHT International Business Machines Corp. 1992,1994
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 *   OperationDef: CORBA Interface for operation definitions
 *   See CORBA 7.5.6, pp.135-136
 */


#ifndef SOM_OperationDef_xh
#define SOM_OperationDef_xh

class OperationDef;

#define OperationDef_MajorVersion 2
#define OperationDef_MinorVersion 1

/*
 * Passthru lines: File: "C.xh", "before"
 */

    #include <somtcnst.xh>
    #include <somir.xh>
    #include <paramdef.xh>
    #include <excptdef.xh>

    #define ContextIdentifier string
    #define _IDL_SEQUENCE_ContextIdentifier _IDL_SEQUENCE_string


/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_Contained_xh
#include <containd.xh>
#endif
#ifndef SOM_Container_xh
#include <containr.xh>
#endif

#ifndef OperationDef_API
#define OperationDef_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;
class Container;
typedef unsigned long OperationMode;
#define OperationDef_NORMAL 1UL
#define OperationDef_ONEWAY 2UL
#ifndef _IDL_SEQUENCE_string_defined
#define _IDL_SEQUENCE_string_defined
typedef struct {
    unsigned long _maximum;
    unsigned long _length;
    string *_buffer;
} _IDL_SEQUENCE_string;
#endif /* _IDL_SEQUENCE_string_defined */ 
struct ParameterDescription;
#ifndef _IDL_SEQUENCE_ParameterDescription_defined
#define _IDL_SEQUENCE_ParameterDescription_defined
typedef struct {
    unsigned long _maximum;
    unsigned long _length;
    struct ParameterDescription *_buffer;
} _IDL_SEQUENCE_ParameterDescription;
#endif /* _IDL_SEQUENCE_ParameterDescription_defined */ 
struct ExceptionDescription;
#ifndef _IDL_SEQUENCE_ExceptionDescription_defined
#define _IDL_SEQUENCE_ExceptionDescription_defined
typedef struct {
    unsigned long _maximum;
    unsigned long _length;
    struct ExceptionDescription *_buffer;
} _IDL_SEQUENCE_ExceptionDescription;
#endif /* _IDL_SEQUENCE_ExceptionDescription_defined */ 
typedef
struct OperationDescription {
Identifier name;
RepositoryId id;
RepositoryId defined_in;
TypeCode result;
OperationMode mode;
_IDL_SEQUENCE_string contexts;
_IDL_SEQUENCE_ParameterDescription parameter;
_IDL_SEQUENCE_ExceptionDescription exceptions;
} OperationDescription;

/*
 *  The inherited describe method returns an instance of this
 *  (OperationDescription) structure in the "value" member of the
 *  Description structure defined in the Contained interface.
 *  The inherited describe_contents method in the Container
 *  interface returns a sequence of these Description structures
 *  each carrying a reference to an OperationDescription structure
 *  in its "value" member.
 */

/*
 * End of user-defined types.
 */

/* A procedure to create the OperationDef Class */
SOMEXTERN SOMClass * SOMLINK OperationDefNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the OperationDef class object, and the methods it introduces. */
SOMEXTERN struct OperationDefClassDataStructure {
	SOMClass *classObject;
	somMToken _get_result;
	somMToken _set_result;
	somMToken _get_mode;
	somMToken _set_mode;
	somMToken _get_contexts;
	somMToken _set_contexts;
} SOMDLINK OperationDefClassData;
#define _OperationDef OperationDefClassData.classObject

/* The API to parentMtabs for OperationDef, and the instance data it introduces. */
SOMEXTERN struct OperationDefCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK OperationDefCClassData;

/*
 * -- Typedefs for OperationDef Method Procedures
 */
SOMEXTERN {
typedef TypeCode   SOMLINK somTP_OperationDef__get_result(OperationDef *somSelf, Environment *ev);
typedef somTP_OperationDef__get_result *somTD_OperationDef__get_result;
typedef void   SOMLINK somTP_OperationDef__set_result(OperationDef *somSelf, Environment *ev,
		TypeCode result);
typedef somTP_OperationDef__set_result *somTD_OperationDef__set_result;
typedef OperationMode   SOMLINK somTP_OperationDef__get_mode(OperationDef *somSelf, Environment *ev);
typedef somTP_OperationDef__get_mode *somTD_OperationDef__get_mode;
typedef void   SOMLINK somTP_OperationDef__set_mode(OperationDef *somSelf, Environment *ev,
		OperationMode mode);
typedef somTP_OperationDef__set_mode *somTD_OperationDef__set_mode;
typedef _IDL_SEQUENCE_string   SOMLINK somTP_OperationDef__get_contexts(OperationDef *somSelf, Environment *ev);
typedef somTP_OperationDef__get_contexts *somTD_OperationDef__get_contexts;
typedef void   SOMLINK somTP_OperationDef__set_contexts(OperationDef *somSelf, Environment *ev,
		_IDL_SEQUENCE_string* contexts);
typedef somTP_OperationDef__set_contexts *somTD_OperationDef__set_contexts;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef void   SOMLINK somTP_OperationDef_somFree(OperationDef *somSelf);
typedef somTP_OperationDef_somFree *somTD_OperationDef_somFree;
typedef void   SOMLINK somTP_OperationDef_somInit(OperationDef *somSelf);
typedef somTP_OperationDef_somInit *somTD_OperationDef_somInit;
typedef void   SOMLINK somTP_OperationDef_somUninit(OperationDef *somSelf);
typedef somTP_OperationDef_somUninit *somTD_OperationDef_somUninit;
typedef void   SOMLINK somTP_OperationDef_somDumpSelf(OperationDef *somSelf,
		long level);
typedef somTP_OperationDef_somDumpSelf *somTD_OperationDef_somDumpSelf;
typedef void   SOMLINK somTP_OperationDef_somDumpSelfInt(OperationDef *somSelf,
		long level);
typedef somTP_OperationDef_somDumpSelfInt *somTD_OperationDef_somDumpSelfInt;
typedef void   SOMLINK somTP_OperationDef_somDefaultInit(OperationDef *somSelf,
		somInitCtrl* ctrl);
typedef somTP_OperationDef_somDefaultInit *somTD_OperationDef_somDefaultInit;
typedef void   SOMLINK somTP_OperationDef_somDestruct(OperationDef *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef somTP_OperationDef_somDestruct *somTD_OperationDef_somDestruct;
typedef void   SOMLINK somTP_OperationDef_somDefaultCopyInit(OperationDef *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_OperationDef_somDefaultCopyInit *somTD_OperationDef_somDefaultCopyInit;
typedef OperationDef*   SOMLINK somTP_OperationDef_somDefaultAssign(OperationDef *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_OperationDef_somDefaultAssign *somTD_OperationDef_somDefaultAssign;
typedef void   SOMLINK somTP_OperationDef_somDefaultConstCopyInit(OperationDef *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_OperationDef_somDefaultConstCopyInit *somTD_OperationDef_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_OperationDef_somDefaultVCopyInit(OperationDef *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_OperationDef_somDefaultVCopyInit *somTD_OperationDef_somDefaultVCopyInit;
typedef void   SOMLINK somTP_OperationDef_somDefaultConstVCopyInit(OperationDef *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_OperationDef_somDefaultConstVCopyInit *somTD_OperationDef_somDefaultConstVCopyInit;
typedef OperationDef*   SOMLINK somTP_OperationDef_somDefaultConstAssign(OperationDef *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_OperationDef_somDefaultConstAssign *somTD_OperationDef_somDefaultConstAssign;
typedef OperationDef*   SOMLINK somTP_OperationDef_somDefaultVAssign(OperationDef *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_OperationDef_somDefaultVAssign *somTD_OperationDef_somDefaultVAssign;
typedef OperationDef*   SOMLINK somTP_OperationDef_somDefaultConstVAssign(OperationDef *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef somTP_OperationDef_somDefaultConstVAssign *somTD_OperationDef_somDefaultConstVAssign;
typedef SOMClass*   SOMLINK somTP_OperationDef_somGetClass(OperationDef *somSelf);
typedef somTP_OperationDef_somGetClass *somTD_OperationDef_somGetClass;
typedef string   SOMLINK somTP_OperationDef_somGetClassName(OperationDef *somSelf);
typedef somTP_OperationDef_somGetClassName *somTD_OperationDef_somGetClassName;
typedef long   SOMLINK somTP_OperationDef_somGetSize(OperationDef *somSelf);
typedef somTP_OperationDef_somGetSize *somTD_OperationDef_somGetSize;
typedef boolean   SOMLINK somTP_OperationDef_somIsA(OperationDef *somSelf,
		SOMClass* aClassObj);
typedef somTP_OperationDef_somIsA *somTD_OperationDef_somIsA;
typedef boolean   SOMLINK somTP_OperationDef_somIsInstanceOf(OperationDef *somSelf,
		SOMClass* aClassObj);
typedef somTP_OperationDef_somIsInstanceOf *somTD_OperationDef_somIsInstanceOf;
typedef boolean   SOMLINK somTP_OperationDef_somRespondsTo(OperationDef *somSelf,
		somId mId);
typedef somTP_OperationDef_somRespondsTo *somTD_OperationDef_somRespondsTo;
typedef boolean   SOMLINK somTP_OperationDef_somDispatch(OperationDef *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_OperationDef_somDispatch *somTD_OperationDef_somDispatch;
typedef boolean   SOMLINK somTP_OperationDef_somClassDispatch(OperationDef *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_OperationDef_somClassDispatch *somTD_OperationDef_somClassDispatch;
typedef boolean   SOMLINK somTP_OperationDef_somCastObj(OperationDef *somSelf,
		SOMClass* cls);
typedef somTP_OperationDef_somCastObj *somTD_OperationDef_somCastObj;
typedef boolean   SOMLINK somTP_OperationDef_somResetObj(OperationDef *somSelf);
typedef somTP_OperationDef_somResetObj *somTD_OperationDef_somResetObj;
typedef void   SOMLINK somTP_OperationDef_somDispatchV(OperationDef *somSelf,
		somId methodId,
		somId descriptor,
		va_list ap);
typedef somTP_OperationDef_somDispatchV *somTD_OperationDef_somDispatchV;
typedef long   SOMLINK somTP_OperationDef_somDispatchL(OperationDef *somSelf,
		somId methodId,
		somId descriptor,
		va_list ap);
typedef somTP_OperationDef_somDispatchL *somTD_OperationDef_somDispatchL;
typedef void*   SOMLINK somTP_OperationDef_somDispatchA(OperationDef *somSelf,
		somId methodId,
		somId descriptor,
		va_list ap);
typedef somTP_OperationDef_somDispatchA *somTD_OperationDef_somDispatchA;
typedef double   SOMLINK somTP_OperationDef_somDispatchD(OperationDef *somSelf,
		somId methodId,
		somId descriptor,
		va_list ap);
typedef somTP_OperationDef_somDispatchD *somTD_OperationDef_somDispatchD;
typedef SOMObject*   SOMLINK somTP_OperationDef_somPrintSelf(OperationDef *somSelf);
typedef somTP_OperationDef_somPrintSelf *somTD_OperationDef_somPrintSelf;
}

#endif /* OperationDef_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for OperationDef
 */
class OperationDef : public Contained, public Container
{
public:

// OperationDef::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_OperationDef) OperationDefNewClass(OperationDef_MajorVersion,OperationDef_MinorVersion);
   return (void*)
      SOM_Resolve(_OperationDef,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_OperationDef));
}

// OperationDef::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

OperationDef()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (OperationDefCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

OperationDef(OperationDef* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (OperationDefCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

OperationDef(const OperationDef* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (OperationDefCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: _get_result */
TypeCode   _get_result(Environment *ev)
{
   return SOM_ResolveD(this,OperationDef,OperationDef,_get_result)
	(this, ev);
}


/* method: _set_result */
void   _set_result(Environment *ev,
		TypeCode result)
{
   SOM_ResolveD(this,OperationDef,OperationDef,_set_result)
	(this, ev,result);
}


/* method: _get_mode */
OperationMode   _get_mode(Environment *ev)
{
   return SOM_ResolveD(this,OperationDef,OperationDef,_get_mode)
	(this, ev);
}


/* method: _set_mode */
void   _set_mode(Environment *ev,
		OperationMode mode)
{
   SOM_ResolveD(this,OperationDef,OperationDef,_set_mode)
	(this, ev,mode);
}


/* method: _get_contexts */
_IDL_SEQUENCE_string   _get_contexts(Environment *ev)
{
   return SOM_ResolveD(this,OperationDef,OperationDef,_get_contexts)
	(this, ev);
}


/* method: _set_contexts */
void   _set_contexts(Environment *ev,
		_IDL_SEQUENCE_string* contexts)
{
   SOM_ResolveD(this,OperationDef,OperationDef,_set_contexts)
	(this, ev,contexts);
}


/*
 * Reintroduce inherited methods
 */

/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,OperationDef,SOMObject,somFree)
	(this);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,OperationDef,SOMObject,somInit)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,OperationDef,SOMObject,somUninit)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,OperationDef,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,OperationDef,SOMObject,somDumpSelfInt)
	(this,level);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,OperationDef,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,OperationDef,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,OperationDef,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
OperationDef*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,OperationDef,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,OperationDef,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,OperationDef,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,OperationDef,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
OperationDef*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,OperationDef,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
OperationDef*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,OperationDef,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
OperationDef*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,OperationDef,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,OperationDef,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,OperationDef,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,OperationDef,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,OperationDef,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,OperationDef,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,OperationDef,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   OperationDef_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,OperationDef,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,OperationDef,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   OperationDef_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,OperationDef,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,OperationDef,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,OperationDef,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,OperationDef,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */
/* the va_list invocation form */
void   OperationDef_somDispatchV(somId methodId,
		somId descriptor,
		va_list ap)
{
   SOM_ResolveD(this,OperationDef,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId,
		somId descriptor,
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,OperationDef,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */
/* the va_list invocation form */
long   OperationDef_somDispatchL(somId methodId,
		somId descriptor,
		va_list ap)
{
return SOM_ResolveD(this,OperationDef,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId,
		somId descriptor,
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,OperationDef,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */
/* the va_list invocation form */
void*   OperationDef_somDispatchA(somId methodId,
		somId descriptor,
		va_list ap)
{
return SOM_ResolveD(this,OperationDef,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId,
		somId descriptor,
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,OperationDef,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */
/* the va_list invocation form */
double   OperationDef_somDispatchD(somId methodId,
		somId descriptor,
		va_list ap)
{
return SOM_ResolveD(this,OperationDef,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId,
		somId descriptor,
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,OperationDef,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,OperationDef,SOMObject,somPrintSelf)
	(this);
}



};   /* OperationDef */



#endif       /* SOM_OperationDef_xh */
