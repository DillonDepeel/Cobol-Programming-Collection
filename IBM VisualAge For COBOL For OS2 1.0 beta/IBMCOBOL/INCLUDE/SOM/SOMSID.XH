
/*
 * This file was generated by the SOM Compiler.
 * FileName: c:\somtk\include\somsid.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.7
 *     SOM Emitter emitxh: 2.42
 */

/*
 * 
 *    COMPONENT_NAME: somu
 * 
 *    ORIGINS: 27
 * 
 * 
 *    10H9767, 10H9769  (C) COPYRIGHT International Business Machines Corp. 1992,1994
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 */


#ifndef SOM_SOMUTStringId_xh
#define SOM_SOMUTStringId_xh

class SOMUTStringId;

/*
 *  This is the abstract base class for an ASCIIZ string (an ASCII string
 *  terminated with a zero) based ID. Refer to derived classes for details.
 * 
 *  Intances of classes derived from this one should represent a string
 *  value which can be used to identify something... such as an object,
 *  a file, a network node, etc, etc...
 * 
 */

#define SOMUTStringId_MajorVersion 2
#define SOMUTStringId_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMUTId_xh
#include <somida.xh>
#endif

#ifndef SOMUTStringId_API
#define SOMUTStringId_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;

/*
 * End of user-defined types.
 */

/* A procedure to create the SOMUTStringId Class */
SOMEXTERN SOMClass * SOMLINK SOMUTStringIdNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the SOMUTStringId class object, and the methods it introduces. */
SOMEXTERN struct SOMUTStringIdClassDataStructure {
	SOMClass *classObject;
	somMToken somutSetIdString;
	somMToken somutGetIdString;
	somMToken somutGetIdStringLen;
	somMToken somutEqualsString;
	somMToken somutCompareString;
} SOMDLINK SOMUTStringIdClassData;
#define _SOMUTStringId SOMUTStringIdClassData.classObject

/* The API to parentMtabs for SOMUTStringId, and the instance data it introduces. */
SOMEXTERN struct SOMUTStringIdCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK SOMUTStringIdCClassData;

/*
 * -- Typedefs for SOMUTStringId Method Procedures
 */
SOMEXTERN {
typedef long   SOMLINK somTP_SOMUTStringId_somutSetIdString(SOMUTStringId *somSelf, Environment *ev,
		string IdString);
typedef somTP_SOMUTStringId_somutSetIdString *somTD_SOMUTStringId_somutSetIdString;
typedef string   SOMLINK somTP_SOMUTStringId_somutGetIdString(SOMUTStringId *somSelf, Environment *ev,
		string toBuffer);
typedef somTP_SOMUTStringId_somutGetIdString *somTD_SOMUTStringId_somutGetIdString;
typedef long   SOMLINK somTP_SOMUTStringId_somutGetIdStringLen(SOMUTStringId *somSelf, Environment *ev);
typedef somTP_SOMUTStringId_somutGetIdStringLen *somTD_SOMUTStringId_somutGetIdStringLen;
typedef boolean   SOMLINK somTP_SOMUTStringId_somutEqualsString(SOMUTStringId *somSelf, Environment *ev,
		string IdString);
typedef somTP_SOMUTStringId_somutEqualsString *somTD_SOMUTStringId_somutEqualsString;
typedef short   SOMLINK somTP_SOMUTStringId_somutCompareString(SOMUTStringId *somSelf, Environment *ev,
		string IdString);
typedef somTP_SOMUTStringId_somutCompareString *somTD_SOMUTStringId_somutCompareString;
}

#endif /* SOMUTStringId_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for SOMUTStringId
 */
class SOMUTStringId : public SOMUTId
{
public:

// SOMUTStringId::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_SOMUTStringId) SOMUTStringIdNewClass(SOMUTStringId_MajorVersion,SOMUTStringId_MinorVersion);
   return (void*)
      SOM_Resolve(_SOMUTStringId,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_SOMUTStringId));
}

// SOMUTStringId::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

SOMUTStringId()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMUTStringIdCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

SOMUTStringId(SOMUTStringId* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMUTStringIdCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

SOMUTStringId(const SOMUTStringId* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMUTStringIdCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: somutSetIdString */
long   somutSetIdString(Environment *ev,
		string IdString)
{
   return SOM_ResolveD(this,SOMUTStringId,SOMUTStringId,somutSetIdString)
	(this, ev,IdString);
}


/* method: somutGetIdString */
string   somutGetIdString(Environment *ev,
		string toBuffer)
{
   return SOM_ResolveD(this,SOMUTStringId,SOMUTStringId,somutGetIdString)
	(this, ev,toBuffer);
}


/* method: somutGetIdStringLen */
long   somutGetIdStringLen(Environment *ev)
{
   return SOM_ResolveD(this,SOMUTStringId,SOMUTStringId,somutGetIdStringLen)
	(this, ev);
}


/* method: somutEqualsString */
boolean   somutEqualsString(Environment *ev,
		string IdString)
{
   return SOM_ResolveD(this,SOMUTStringId,SOMUTStringId,somutEqualsString)
	(this, ev,IdString);
}


/* method: somutCompareString */
short   somutCompareString(Environment *ev,
		string IdString)
{
   return SOM_ResolveD(this,SOMUTStringId,SOMUTStringId,somutCompareString)
	(this, ev,IdString);
}



};   /* SOMUTStringId */



#endif       /* SOM_SOMUTStringId_xh */
