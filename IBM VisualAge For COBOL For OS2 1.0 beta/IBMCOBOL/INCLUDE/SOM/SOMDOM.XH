
/*
 * This file was generated by the SOM Compiler.
 * FileName: c:\somtk\include\SOMDOM.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.7
 *     SOM Emitter emitxh: 2.42
 */

/*
 * 
 *    COMPONENT_NAME: somd
 * 
 *    ORIGINS: 27
 * 
 * 
 *    10H9767, 10H9769  (C) COPYRIGHT International Business Machines Corp. 1992,1994
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 *    IDL interface spec for DSOM Distributed Object Manager.
 * 
 * 
 *    This is a subclass of the abstract ObjectMgr class.
 *    All ObjectMgr methods are implemented with DSOM calls.
 */


#ifndef SOM_SOMDObjectMgr_xh
#define SOM_SOMDObjectMgr_xh

class SOMDObjectMgr;

#define SOMDObjectMgr_MajorVersion 2
#define SOMDObjectMgr_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_ObjectMgr_xh
#include <om.xh>
#endif

#ifndef SOMDObjectMgr_API
#define SOMDObjectMgr_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;
class Container;
class SOMDServer;
#ifndef _IDL_SEQUENCE_SOMDServer_defined
#define _IDL_SEQUENCE_SOMDServer_defined
typedef struct {
    unsigned long _maximum;
    unsigned long _length;
    SOMDServer **_buffer;
} _IDL_SEQUENCE_SOMDServer;
#endif /* _IDL_SEQUENCE_SOMDServer_defined */ 

/*
 * End of user-defined types.
 */

/*
 * Passthru lines: File: "C.xh", "after"
 */

class SOMDObjectMgr;
SOMEXTERN SOMDObjectMgr * SOMDLINK SOMD_ObjectMgr;

#include <somdserv.xh>


/* A procedure to create the SOMDObjectMgr Class */
SOMEXTERN SOMClass * SOMLINK SOMDObjectMgrNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the SOMDObjectMgr class object, and the methods it introduces. */
SOMEXTERN struct SOMDObjectMgrClassDataStructure {
	SOMClass *classObject;
	somMToken somdFindServer;
	somMToken somdFindServerByName;
	somMToken somdFindServersByClass;
	somMToken somdFindAnyServerByClass;
	somMToken _get_somd21somFree;
	somMToken _set_somd21somFree;
} SOMDLINK SOMDObjectMgrClassData;
#define _SOMDObjectMgr SOMDObjectMgrClassData.classObject

/* The API to parentMtabs for SOMDObjectMgr, and the instance data it introduces. */
SOMEXTERN struct SOMDObjectMgrCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK SOMDObjectMgrCClassData;

/*
 * -- Typedefs for SOMDObjectMgr Method Procedures
 */
SOMEXTERN {
typedef SOMDServer*   SOMLINK somTP_SOMDObjectMgr_somdFindServer(SOMDObjectMgr *somSelf, Environment *ev,
		ImplId serverid);
typedef somTP_SOMDObjectMgr_somdFindServer *somTD_SOMDObjectMgr_somdFindServer;
typedef SOMDServer*   SOMLINK somTP_SOMDObjectMgr_somdFindServerByName(SOMDObjectMgr *somSelf, Environment *ev,
		string servername);
typedef somTP_SOMDObjectMgr_somdFindServerByName *somTD_SOMDObjectMgr_somdFindServerByName;
typedef _IDL_SEQUENCE_SOMDServer   SOMLINK somTP_SOMDObjectMgr_somdFindServersByClass(SOMDObjectMgr *somSelf, Environment *ev,
		Identifier objclass);
typedef somTP_SOMDObjectMgr_somdFindServersByClass *somTD_SOMDObjectMgr_somdFindServersByClass;
typedef SOMDServer*   SOMLINK somTP_SOMDObjectMgr_somdFindAnyServerByClass(SOMDObjectMgr *somSelf, Environment *ev,
		Identifier objclass);
typedef somTP_SOMDObjectMgr_somdFindAnyServerByClass *somTD_SOMDObjectMgr_somdFindAnyServerByClass;
typedef boolean   SOMLINK somTP_SOMDObjectMgr__get_somd21somFree(SOMDObjectMgr *somSelf, Environment *ev);
typedef somTP_SOMDObjectMgr__get_somd21somFree *somTD_SOMDObjectMgr__get_somd21somFree;
typedef void   SOMLINK somTP_SOMDObjectMgr__set_somd21somFree(SOMDObjectMgr *somSelf, Environment *ev,
		boolean somd21somFree);
typedef somTP_SOMDObjectMgr__set_somd21somFree *somTD_SOMDObjectMgr__set_somd21somFree;
}

#endif /* SOMDObjectMgr_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for SOMDObjectMgr
 */
class SOMDObjectMgr : public ObjectMgr
{
public:

// SOMDObjectMgr::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_SOMDObjectMgr) SOMDObjectMgrNewClass(SOMDObjectMgr_MajorVersion,SOMDObjectMgr_MinorVersion);
   return (void*)
      SOM_Resolve(_SOMDObjectMgr,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_SOMDObjectMgr));
}

// SOMDObjectMgr::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

SOMDObjectMgr()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMDObjectMgrCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

SOMDObjectMgr(SOMDObjectMgr* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMDObjectMgrCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

SOMDObjectMgr(const SOMDObjectMgr* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMDObjectMgrCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: somdFindServer */
SOMDServer*   somdFindServer(Environment *ev,
		ImplId serverid)
{
   return SOM_ResolveD(this,SOMDObjectMgr,SOMDObjectMgr,somdFindServer)
	(this, ev,serverid);
}


/* method: somdFindServerByName */
SOMDServer*   somdFindServerByName(Environment *ev,
		string servername)
{
   return SOM_ResolveD(this,SOMDObjectMgr,SOMDObjectMgr,somdFindServerByName)
	(this, ev,servername);
}


/* method: somdFindServersByClass */
_IDL_SEQUENCE_SOMDServer   somdFindServersByClass(Environment *ev,
		Identifier objclass)
{
   return SOM_ResolveD(this,SOMDObjectMgr,SOMDObjectMgr,somdFindServersByClass)
	(this, ev,objclass);
}


/* method: somdFindAnyServerByClass */
SOMDServer*   somdFindAnyServerByClass(Environment *ev,
		Identifier objclass)
{
   return SOM_ResolveD(this,SOMDObjectMgr,SOMDObjectMgr,somdFindAnyServerByClass)
	(this, ev,objclass);
}


/* method: _get_somd21somFree */
boolean   _get_somd21somFree(Environment *ev)
{
   return SOM_ResolveD(this,SOMDObjectMgr,SOMDObjectMgr,_get_somd21somFree)
	(this, ev);
}


/* method: _set_somd21somFree */
void   _set_somd21somFree(Environment *ev,
		boolean somd21somFree)
{
   SOM_ResolveD(this,SOMDObjectMgr,SOMDObjectMgr,_set_somd21somFree)
	(this, ev,somd21somFree);
}



};   /* SOMDObjectMgr */



#endif       /* SOM_SOMDObjectMgr_xh */
