
/*
 * This file was generated by the SOM Compiler.
 * FileName: c:\somtk\include\somida.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.7
 *     SOM Emitter emitxh: 2.42
 */

/*
 * 
 *    COMPONENT_NAME: somu
 * 
 *    ORIGINS: 27
 * 
 * 
 *    10H9767, 10H9769  (C) COPYRIGHT International Business Machines Corp. 1992,1994
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 */


#ifndef SOM_SOMUTId_xh
#define SOM_SOMUTId_xh

class SOMUTId;

/*
 *  This is the abstract base class for an ID. Only the interface is
 *  defined. Refer to derived classes for details.
 * 
 *  Instances of classes derived from this one should represent a
 *  value which can be used to identify something... such as an object,
 *  a file, a network node, etc, etc...
 * 
 */

#define SOMUTId_MajorVersion 2
#define SOMUTId_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef SOMUTId_API
#define SOMUTId_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;

/*
 * End of user-defined types.
 */

/* A procedure to create the SOMUTId Class */
SOMEXTERN SOMClass * SOMLINK SOMUTIdNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the SOMUTId class object, and the methods it introduces. */
SOMEXTERN struct SOMUTIdClassDataStructure {
	SOMClass *classObject;
	somMToken somutSetIdId;
	somMToken somutEqualsId;
	somMToken somutCompareId;
	somMToken somutHashId;
} SOMDLINK SOMUTIdClassData;
#define _SOMUTId SOMUTIdClassData.classObject

/* The API to parentMtabs for SOMUTId, and the instance data it introduces. */
SOMEXTERN struct SOMUTIdCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK SOMUTIdCClassData;

/*
 * -- Typedefs for SOMUTId Method Procedures
 */
SOMEXTERN {
typedef void   SOMLINK somTP_SOMUTId_somutSetIdId(SOMUTId *somSelf, Environment *ev,
		SOMUTId* otherId);
typedef somTP_SOMUTId_somutSetIdId *somTD_SOMUTId_somutSetIdId;
typedef boolean   SOMLINK somTP_SOMUTId_somutEqualsId(SOMUTId *somSelf, Environment *ev,
		SOMUTId* otherId);
typedef somTP_SOMUTId_somutEqualsId *somTD_SOMUTId_somutEqualsId;
typedef short   SOMLINK somTP_SOMUTId_somutCompareId(SOMUTId *somSelf, Environment *ev,
		SOMUTId* otherId);
typedef somTP_SOMUTId_somutCompareId *somTD_SOMUTId_somutCompareId;
typedef unsigned long   SOMLINK somTP_SOMUTId_somutHashId(SOMUTId *somSelf, Environment *ev);
typedef somTP_SOMUTId_somutHashId *somTD_SOMUTId_somutHashId;
}

#endif /* SOMUTId_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for SOMUTId
 */
class SOMUTId : public SOMObject
{
public:

// SOMUTId::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_SOMUTId) SOMUTIdNewClass(SOMUTId_MajorVersion,SOMUTId_MinorVersion);
   return (void*)
      SOM_Resolve(_SOMUTId,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_SOMUTId));
}

// SOMUTId::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

SOMUTId()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMUTIdCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

SOMUTId(SOMUTId* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMUTIdCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

SOMUTId(const SOMUTId* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMUTIdCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: somutSetIdId */
void   somutSetIdId(Environment *ev,
		SOMUTId* otherId)
{
   SOM_ResolveD(this,SOMUTId,SOMUTId,somutSetIdId)
	(this, ev,otherId);
}


/* method: somutEqualsId */
boolean   somutEqualsId(Environment *ev,
		SOMUTId* otherId)
{
   return SOM_ResolveD(this,SOMUTId,SOMUTId,somutEqualsId)
	(this, ev,otherId);
}


/* method: somutCompareId */
short   somutCompareId(Environment *ev,
		SOMUTId* otherId)
{
   return SOM_ResolveD(this,SOMUTId,SOMUTId,somutCompareId)
	(this, ev,otherId);
}


/* method: somutHashId */
unsigned long   somutHashId(Environment *ev)
{
   return SOM_ResolveD(this,SOMUTId,SOMUTId,somutHashId)
	(this, ev);
}



};   /* SOMUTId */



#endif       /* SOM_SOMUTId_xh */
