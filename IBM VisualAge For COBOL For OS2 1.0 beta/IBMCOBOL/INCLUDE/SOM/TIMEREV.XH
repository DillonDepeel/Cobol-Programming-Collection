
/*
 * This file was generated by the SOM Compiler.
 * FileName: c:\somtk\include\timerev.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.7
 *     SOM Emitter emitxh: 2.42
 */

/*
 * 
 *    COMPONENT_NAME: somu
 * 
 *    ORIGINS: 27
 * 
 * 
 *    10H9767, 10H9769  (C) COPYRIGHT International Business Machines Corp. 1992,1994
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 */


#ifndef SOM_SOMETimerEvent_xh
#define SOM_SOMETimerEvent_xh

class SOMETimerEvent;

/*
 *  SOMETimerEvent is the class for generic timer events within the Event Manager.
 *  This class should be queried for events of the following type(s):
 *       EMTimerEvent
 *  An instance of this class is initialized and passed to the callback
 *  of a timer event.
 */

#define SOMETimerEvent_MajorVersion 2
#define SOMETimerEvent_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMEEvent_xh
#include <event.xh>
#endif

#ifndef SOMETimerEvent_API
#define SOMETimerEvent_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;

/*
 * End of user-defined types.
 */

/* A procedure to create the SOMETimerEvent Class */
SOMEXTERN SOMClass * SOMLINK SOMETimerEventNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the SOMETimerEvent class object, and the methods it introduces. */
SOMEXTERN struct SOMETimerEventClassDataStructure {
	SOMClass *classObject;
	somMToken somevGetEventInterval;
	somMToken somevSetEventInterval;
} SOMDLINK SOMETimerEventClassData;
#define _SOMETimerEvent SOMETimerEventClassData.classObject

/* The API to parentMtabs for SOMETimerEvent, and the instance data it introduces. */
SOMEXTERN struct SOMETimerEventCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK SOMETimerEventCClassData;

/*
 * -- Typedefs for SOMETimerEvent Method Procedures
 */
SOMEXTERN {
typedef long   SOMLINK somTP_SOMETimerEvent_somevGetEventInterval(SOMETimerEvent *somSelf, Environment *ev);
typedef somTP_SOMETimerEvent_somevGetEventInterval *somTD_SOMETimerEvent_somevGetEventInterval;
typedef void   SOMLINK somTP_SOMETimerEvent_somevSetEventInterval(SOMETimerEvent *somSelf, Environment *ev,
		long interval);
typedef somTP_SOMETimerEvent_somevSetEventInterval *somTD_SOMETimerEvent_somevSetEventInterval;
}

#endif /* SOMETimerEvent_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for SOMETimerEvent
 */
class SOMETimerEvent : public SOMEEvent
{
public:

// SOMETimerEvent::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_SOMETimerEvent) SOMETimerEventNewClass(SOMETimerEvent_MajorVersion,SOMETimerEvent_MinorVersion);
   return (void*)
      SOM_Resolve(_SOMETimerEvent,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_SOMETimerEvent));
}

// SOMETimerEvent::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

SOMETimerEvent()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMETimerEventCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

SOMETimerEvent(SOMETimerEvent* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMETimerEventCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

SOMETimerEvent(const SOMETimerEvent* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMETimerEventCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: somevGetEventInterval */
long   somevGetEventInterval(Environment *ev)
{
   return SOM_ResolveD(this,SOMETimerEvent,SOMETimerEvent,somevGetEventInterval)
	(this, ev);
}


/* method: somevSetEventInterval */
void   somevSetEventInterval(Environment *ev,
		long interval)
{
   SOM_ResolveD(this,SOMETimerEvent,SOMETimerEvent,somevSetEventInterval)
	(this, ev,interval);
}



};   /* SOMETimerEvent */



#endif       /* SOM_SOMETimerEvent_xh */
