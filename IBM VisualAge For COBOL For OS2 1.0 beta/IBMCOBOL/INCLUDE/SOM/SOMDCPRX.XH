
/*
 * This file was generated by the SOM Compiler.
 * FileName: c:\somtk\include\SOMDCPRX.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.7
 *     SOM Emitter emitxh: 2.42
 */

/*
 * 
 *    COMPONENT_NAME: somd
 * 
 *    ORIGINS: 27
 * 
 * 
 *    10H9767, 10H9769  (C) COPYRIGHT International Business Machines Corp. 1992,1994
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 * 
 *    This is the class that implements DSOM proxy objects in clients.
 * 
 *    This class is a subclass of SOMDObject.  It inherits the basic behavior
 *    (methods) of a CORBA object reference from that parent class.
 *    Thus, it "is a" SOMDObject.
 * 
 *    This class overrides the usual somDispatch methods with versions
 *    that build a DSOM Request for the invocation and dispatch it, remotely.
 *    It is intended that the implementation of this "generic" proxy class
 *    will be used to derive specific proxy classes via multiple inheritance.
 *    The new dispatch method is inherited from this client proxy class, while
 *    the desired interface--and language bindings--are inherited from the
 *    target class (but no implementation).
 * 
 *    E.g.,
 *           SOMDClientProxy      Animal
 *                     \           /
 *                      \         / (interface only)
 *                       \       /
 *                    Animal__Proxy
 * 
 *    Note that SOMDClientProxy is an instance of SOMDMetaProxy.
 */


#ifndef SOM_SOMDClientProxy_xh
#define SOM_SOMDClientProxy_xh

class SOMDClientProxy;

#define SOMDClientProxy_MajorVersion 2
#define SOMDClientProxy_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMDObject_xh
#include <somdobj.xh>
#endif

#ifndef SOMDClientProxy_API
#define SOMDClientProxy_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;
class Container;
class ImplementationDef;
class InterfaceDef;
class NVList;
class Context;
class Request;
class CommBinding;
class somdMemoryMgr;

/*
 * End of user-defined types.
 */

/* A procedure to create the SOMDClientProxy Class */
SOMEXTERN SOMClass * SOMLINK SOMDClientProxyNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the SOMDClientProxy class object, and the methods it introduces. */
SOMEXTERN struct SOMDClientProxyClassDataStructure {
	SOMClass *classObject;
	somMToken somdTargetFree;
	somMToken somdTargetGetClass;
	somMToken somdTargetGetClassName;
	somMToken somdProxyFree;
	somMToken somdProxyGetClass;
	somMToken somdProxyGetClassName;
	somMToken set_binding;
	somMToken get_binding;
	somMToken reset_binding;
	somMToken _get_ctx_seq;
	somMToken _set_ctx_seq;
	somMToken somdReleaseResources;
	somMToken _get_memoryMgr;
} SOMDLINK SOMDClientProxyClassData;
#define _SOMDClientProxy SOMDClientProxyClassData.classObject

/* The API to parentMtabs for SOMDClientProxy, and the instance data it introduces. */
SOMEXTERN struct SOMDClientProxyCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK SOMDClientProxyCClassData;

/*
 * -- Typedefs for SOMDClientProxy Method Procedures
 */
SOMEXTERN {
typedef void   SOMLINK somTP_SOMDClientProxy_somdTargetFree(SOMDClientProxy *somSelf, Environment *ev);
typedef somTP_SOMDClientProxy_somdTargetFree *somTD_SOMDClientProxy_somdTargetFree;
typedef SOMClass*   SOMLINK somTP_SOMDClientProxy_somdTargetGetClass(SOMDClientProxy *somSelf, Environment *ev);
typedef somTP_SOMDClientProxy_somdTargetGetClass *somTD_SOMDClientProxy_somdTargetGetClass;
typedef string   SOMLINK somTP_SOMDClientProxy_somdTargetGetClassName(SOMDClientProxy *somSelf, Environment *ev);
typedef somTP_SOMDClientProxy_somdTargetGetClassName *somTD_SOMDClientProxy_somdTargetGetClassName;
typedef void   SOMLINK somTP_SOMDClientProxy_somdProxyFree(SOMDClientProxy *somSelf, Environment *ev);
typedef somTP_SOMDClientProxy_somdProxyFree *somTD_SOMDClientProxy_somdProxyFree;
typedef SOMClass*   SOMLINK somTP_SOMDClientProxy_somdProxyGetClass(SOMDClientProxy *somSelf, Environment *ev);
typedef somTP_SOMDClientProxy_somdProxyGetClass *somTD_SOMDClientProxy_somdProxyGetClass;
typedef string   SOMLINK somTP_SOMDClientProxy_somdProxyGetClassName(SOMDClientProxy *somSelf, Environment *ev);
typedef somTP_SOMDClientProxy_somdProxyGetClassName *somTD_SOMDClientProxy_somdProxyGetClassName;
typedef void   SOMLINK somTP_SOMDClientProxy_somdReleaseResources(SOMDClientProxy *somSelf, Environment *ev);
typedef somTP_SOMDClientProxy_somdReleaseResources *somTD_SOMDClientProxy_somdReleaseResources;
}

#endif /* SOMDClientProxy_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for SOMDClientProxy
 */
class SOMDClientProxy : public SOMDObject
{
public:

// SOMDClientProxy::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_SOMDClientProxy) SOMDClientProxyNewClass(SOMDClientProxy_MajorVersion,SOMDClientProxy_MinorVersion);
   return (void*)
      SOM_Resolve(_SOMDClientProxy,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_SOMDClientProxy));
}

// SOMDClientProxy::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

SOMDClientProxy()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMDClientProxyCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

SOMDClientProxy(SOMDClientProxy* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMDClientProxyCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

SOMDClientProxy(const SOMDClientProxy* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMDClientProxyCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: somdTargetFree */
void   somdTargetFree(Environment *ev)
{
   SOM_ResolveD(this,SOMDClientProxy,SOMDClientProxy,somdTargetFree)
	(this, ev);
}


/* method: somdTargetGetClass */
SOMClass*   somdTargetGetClass(Environment *ev)
{
   return SOM_ResolveD(this,SOMDClientProxy,SOMDClientProxy,somdTargetGetClass)
	(this, ev);
}


/* method: somdTargetGetClassName */
string   somdTargetGetClassName(Environment *ev)
{
   return SOM_ResolveD(this,SOMDClientProxy,SOMDClientProxy,somdTargetGetClassName)
	(this, ev);
}


/* method: somdProxyFree */
void   somdProxyFree(Environment *ev)
{
   SOM_ResolveD(this,SOMDClientProxy,SOMDClientProxy,somdProxyFree)
	(this, ev);
}


/* method: somdProxyGetClass */
SOMClass*   somdProxyGetClass(Environment *ev)
{
   return SOM_ResolveD(this,SOMDClientProxy,SOMDClientProxy,somdProxyGetClass)
	(this, ev);
}


/* method: somdProxyGetClassName */
string   somdProxyGetClassName(Environment *ev)
{
   return SOM_ResolveD(this,SOMDClientProxy,SOMDClientProxy,somdProxyGetClassName)
	(this, ev);
}


/* method: somdReleaseResources */
void   somdReleaseResources(Environment *ev)
{
   SOM_ResolveD(this,SOMDClientProxy,SOMDClientProxy,somdReleaseResources)
	(this, ev);
}



};   /* SOMDClientProxy */



#endif       /* SOM_SOMDClientProxy_xh */
