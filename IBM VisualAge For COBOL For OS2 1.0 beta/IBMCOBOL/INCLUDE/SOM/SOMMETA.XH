
/*
 * This file was generated by the SOM Compiler.
 * FileName: sommeta.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.2
 *     SOM Emitter emitxh: 2.41
 */

/*
 * 
 *    COMPONENT_NAME: somu
 * 
 *    ORIGINS: 27
 * 
 * 
 *    10H9767, 10H9769  (C) COPYRIGHT International Business Machines Corp. 1992,1994
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 */


#ifndef SOM_SOMMCooperative_xh
#define SOM_SOMMCooperative_xh

class SOMMCooperative;

#define SOMMCooperative_MajorVersion 2
#define SOMMCooperative_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMClass_xh
#include <somcls.xh>
#endif

#ifndef SOMMCooperative_API
#define SOMMCooperative_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;
class SOMMMetaCooperative;

/*
 * End of user-defined types.
 */

/* A procedure to create the SOMMCooperative Class */
class SOMMMetaCooperative;
SOMEXTERN SOMMMetaCooperative * SOMLINK SOMMCooperativeNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the SOMMCooperative class object, and the methods it introduces. */
SOMEXTERN struct SOMMCooperativeClassDataStructure {
	SOMMMetaCooperative *classObject;
	somMToken sommRequestFinalClassMethodCall;
	somMToken sommAddCooperativeClassMethod;
	somMToken sommAddCooperativeInstanceMethod;
	somMToken sommRequestFirstCooperativeInstanceMethodCall;
	somMToken sommSatisfyRequests;
	somMToken sommRequestFirstCooperativeClassMethodCall;
} SOMDLINK SOMMCooperativeClassData;
#define _SOMMCooperative SOMMCooperativeClassData.classObject

/* The API to parentMtabs for SOMMCooperative, and the instance data it introduces. */
SOMEXTERN struct SOMMCooperativeCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK SOMMCooperativeCClassData;

/*
 * -- Typedefs for SOMMCooperative Method Procedures
 */
SOMEXTERN {
typedef somMethodProc**   (SOMLINK * somTD_SOMMCooperative_sommAddCooperativeInstanceMethod)(SOMMCooperative *somSelf,
		somId methodId,
		somMethodProc* methodProc);
typedef somMethodProc**   (SOMLINK * somTD_SOMMCooperative_sommAddCooperativeClassMethod)(SOMMCooperative *somSelf,
		somId methodId,
		somMethodProc* methodProc);
typedef void   (SOMLINK * somTD_SOMMCooperative_sommRequestFirstCooperativeInstanceMethodCall)(SOMMCooperative *somSelf,
		somId methodId,
		somMethodProc* coopProc,
		somMethodProc*** chainProcAddrAddr);
typedef void   (SOMLINK * somTD_SOMMCooperative_sommRequestFirstCooperativeClassMethodCall)(SOMMCooperative *somSelf,
		somId methodId,
		somMethodProc* coopProc,
		somMethodProc*** chainProcAddrAddr);
typedef void   (SOMLINK * somTD_SOMMCooperative_sommRequestFinalClassMethodCall)(SOMMCooperative *somSelf,
		somId methodId,
		somMethodProc* methodProc);
typedef boolean   (SOMLINK * somTD_SOMMCooperative_sommSatisfyRequests)(SOMMCooperative *somSelf);

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef long   (SOMLINK * somTD_SOMMCooperative__get_somDataAlignment)(SOMMCooperative *somSelf);
typedef SOMClass_somOffsets   (SOMLINK * somTD_SOMMCooperative__get_somInstanceDataOffsets)(SOMMCooperative *somSelf);
typedef SOMClass_SOMClassSequence   (SOMLINK * somTD_SOMMCooperative__get_somDirectInitClasses)(SOMMCooperative *somSelf);
typedef void   (SOMLINK * somTD_SOMMCooperative__set_somDirectInitClasses)(SOMMCooperative *somSelf,
		SOMClass_SOMClassSequence* somDirectInitClasses);
typedef SOMObject*   (SOMLINK * somTD_SOMMCooperative_somNew)(SOMMCooperative *somSelf);
typedef SOMObject*   (SOMLINK * somTD_SOMMCooperative_somNewNoInit)(SOMMCooperative *somSelf);
typedef SOMObject*   (SOMLINK * somTD_SOMMCooperative_somRenew)(SOMMCooperative *somSelf,
		void* obj);
typedef SOMObject*   (SOMLINK * somTD_SOMMCooperative_somRenewNoInit)(SOMMCooperative *somSelf,
		void* obj);
typedef SOMObject*   (SOMLINK * somTD_SOMMCooperative_somRenewNoZero)(SOMMCooperative *somSelf,
		void* obj);
typedef SOMObject*   (SOMLINK * somTD_SOMMCooperative_somRenewNoInitNoZero)(SOMMCooperative *somSelf,
		void* obj);
typedef string   (SOMLINK * somTD_SOMMCooperative_somAllocate)(SOMMCooperative *somSelf,
		long size);
typedef void   (SOMLINK * somTD_SOMMCooperative_somDeallocate)(SOMMCooperative *somSelf,
		string memptr);
typedef somMethodProc*   (SOMLINK * somTD_SOMMCooperative__get_somClassAllocate)(SOMMCooperative *somSelf);
typedef somMethodProc*   (SOMLINK * somTD_SOMMCooperative__get_somClassDeallocate)(SOMMCooperative *somSelf);
typedef somBooleanVector   (SOMLINK * somTD_SOMMCooperative_somGetInstanceInitMask)(SOMMCooperative *somSelf,
		somInitCtrl* ctrl);
typedef somBooleanVector   (SOMLINK * somTD_SOMMCooperative_somGetInstanceDestructionMask)(SOMMCooperative *somSelf,
		somDestructCtrl* ctrl);
typedef somBooleanVector   (SOMLINK * somTD_SOMMCooperative_somGetInstanceAssignmentMask)(SOMMCooperative *somSelf,
		somAssignCtrl* ctrl);
typedef void   (SOMLINK * somTD_SOMMCooperative_somInitClass)(SOMMCooperative *somSelf,
		string className,
		SOMClass* parentClass,
		long dataSize,
		long maxStaticMethods,
		long majorVersion,
		long minorVersion);
typedef void   (SOMLINK * somTD_SOMMCooperative_somInitMIClass)(SOMMCooperative *somSelf,
		long inherit_vars,
		string className,
		SOMClass_SOMClassSequence* parentClasses,
		long dataSize,
		long dataAlignment,
		long maxStaticMethods,
		long majorVersion,
		long minorVersion);
typedef somMToken   (SOMLINK * somTD_SOMMCooperative_somAddStaticMethod)(SOMMCooperative *somSelf,
		somId methodId,
		somId methodDescriptor,
		somMethodPtr method,
		somMethodPtr redispatchStub,
		somMethodPtr applyStub);
typedef void   (SOMLINK * somTD_SOMMCooperative_somAddDynamicMethod)(SOMMCooperative *somSelf,
		somId methodId,
		somId methodDescriptor,
		somMethodPtr method,
		somMethodPtr applyStub);
typedef void   (SOMLINK * somTD_SOMMCooperative_somOverrideSMethod)(SOMMCooperative *somSelf,
		somId methodId,
		somMethodPtr method);
typedef void   (SOMLINK * somTD_SOMMCooperative_somClassReady)(SOMMCooperative *somSelf);
typedef somMethodPtr   (SOMLINK * somTD_SOMMCooperative_somGetApplyStub)(SOMMCooperative *somSelf,
		somId methodId);
typedef somClassDataStructure*   (SOMLINK * somTD_SOMMCooperative_somGetClassData)(SOMMCooperative *somSelf);
typedef void   (SOMLINK * somTD_SOMMCooperative_somSetClassData)(SOMMCooperative *somSelf,
		somClassDataStructure* cds);
typedef somMethodTab*   (SOMLINK * somTD_SOMMCooperative_somGetClassMtab)(SOMMCooperative *somSelf);
typedef long   (SOMLINK * somTD_SOMMCooperative_somGetInstanceOffset)(SOMMCooperative *somSelf);
typedef long   (SOMLINK * somTD_SOMMCooperative_somGetInstancePartSize)(SOMMCooperative *somSelf);
typedef long   (SOMLINK * somTD_SOMMCooperative_somGetInstanceSize)(SOMMCooperative *somSelf);
typedef somDToken   (SOMLINK * somTD_SOMMCooperative_somGetInstanceToken)(SOMMCooperative *somSelf);
typedef somDToken   (SOMLINK * somTD_SOMMCooperative_somGetMemberToken)(SOMMCooperative *somSelf,
		long memberOffset,
		somDToken instanceToken);
typedef boolean   (SOMLINK * somTD_SOMMCooperative_somGetMethodData)(SOMMCooperative *somSelf,
		somId methodId,
		somMethodData* md);
typedef somMethodProc*   (SOMLINK * somTD_SOMMCooperative_somGetRdStub)(SOMMCooperative *somSelf,
		somId methodId);
typedef somId   (SOMLINK * somTD_SOMMCooperative_somGetMethodDescriptor)(SOMMCooperative *somSelf,
		somId methodId);
typedef long   (SOMLINK * somTD_SOMMCooperative_somGetMethodIndex)(SOMMCooperative *somSelf,
		somId id);
typedef somMToken   (SOMLINK * somTD_SOMMCooperative_somGetMethodToken)(SOMMCooperative *somSelf,
		somId methodId);
typedef string   (SOMLINK * somTD_SOMMCooperative_somGetName)(SOMMCooperative *somSelf);
typedef boolean   (SOMLINK * somTD_SOMMCooperative_somGetNthMethodData)(SOMMCooperative *somSelf,
		long n,
		somMethodData* md);
typedef somId   (SOMLINK * somTD_SOMMCooperative_somGetNthMethodInfo)(SOMMCooperative *somSelf,
		long n,
		somId* descriptor);
typedef long   (SOMLINK * somTD_SOMMCooperative_somGetNumMethods)(SOMMCooperative *somSelf);
typedef long   (SOMLINK * somTD_SOMMCooperative_somGetNumStaticMethods)(SOMMCooperative *somSelf);
typedef SOMClass*   (SOMLINK * somTD_SOMMCooperative_somGetParent)(SOMMCooperative *somSelf);
typedef SOMClass_SOMClassSequence   (SOMLINK * somTD_SOMMCooperative_somGetParents)(SOMMCooperative *somSelf);
typedef somMethodTabs   (SOMLINK * somTD_SOMMCooperative_somGetPClsMtab)(SOMMCooperative *somSelf);
typedef somMethodTabs   (SOMLINK * somTD_SOMMCooperative_somGetPClsMtabs)(SOMMCooperative *somSelf);
typedef void   (SOMLINK * somTD_SOMMCooperative_somGetVersionNumbers)(SOMMCooperative *somSelf,
		long* majorVersion,
		long* minorVersion);
typedef boolean   (SOMLINK * somTD_SOMMCooperative_somSetMethodDescriptor)(SOMMCooperative *somSelf,
		somId methodId,
		somId descriptor);
typedef boolean   (SOMLINK * somTD_SOMMCooperative_somFindMethod)(SOMMCooperative *somSelf,
		somId methodId,
		somMethodPtr* m);
typedef boolean   (SOMLINK * somTD_SOMMCooperative_somFindMethodOk)(SOMMCooperative *somSelf,
		somId methodId,
		somMethodPtr* m);
typedef somMethodPtr   (SOMLINK * somTD_SOMMCooperative_somFindSMethod)(SOMMCooperative *somSelf,
		somId methodId);
typedef somMethodPtr   (SOMLINK * somTD_SOMMCooperative_somFindSMethodOk)(SOMMCooperative *somSelf,
		somId methodId);
typedef somMethodPtr   (SOMLINK * somTD_SOMMCooperative_somLookupMethod)(SOMMCooperative *somSelf,
		somId methodId);
typedef boolean   (SOMLINK * somTD_SOMMCooperative_somCheckVersion)(SOMMCooperative *somSelf,
		long majorVersion,
		long minorVersion);
typedef boolean   (SOMLINK * somTD_SOMMCooperative_somDescendedFrom)(SOMMCooperative *somSelf,
		SOMClass* aClassObj);
typedef boolean   (SOMLINK * somTD_SOMMCooperative_somSupportsMethod)(SOMMCooperative *somSelf,
		somId mId);
typedef somMethodPtr   (SOMLINK * somTD_SOMMCooperative_somDefinedMethod)(SOMMCooperative *somSelf,
		somMToken method);
typedef void   (SOMLINK * somTD_SOMMCooperative_somOverrideMtab)(SOMMCooperative *somSelf);
typedef void   (SOMLINK * somTD_SOMMCooperative_somDefaultInit)(SOMMCooperative *somSelf,
		somInitCtrl* ctrl);
typedef void   (SOMLINK * somTD_SOMMCooperative_somDestruct)(SOMMCooperative *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef void   (SOMLINK * somTD_SOMMCooperative_somDefaultCopyInit)(SOMMCooperative *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef SOMMCooperative*   (SOMLINK * somTD_SOMMCooperative_somDefaultAssign)(SOMMCooperative *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef void   (SOMLINK * somTD_SOMMCooperative_somDefaultConstCopyInit)(SOMMCooperative *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef void   (SOMLINK * somTD_SOMMCooperative_somDefaultVCopyInit)(SOMMCooperative *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef void   (SOMLINK * somTD_SOMMCooperative_somDefaultConstVCopyInit)(SOMMCooperative *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef SOMMCooperative*   (SOMLINK * somTD_SOMMCooperative_somDefaultConstAssign)(SOMMCooperative *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef SOMMCooperative*   (SOMLINK * somTD_SOMMCooperative_somDefaultVAssign)(SOMMCooperative *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef SOMMCooperative*   (SOMLINK * somTD_SOMMCooperative_somDefaultConstVAssign)(SOMMCooperative *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef void   (SOMLINK * somTD_SOMMCooperative_somInit)(SOMMCooperative *somSelf);
typedef void   (SOMLINK * somTD_SOMMCooperative_somFree)(SOMMCooperative *somSelf);
typedef void   (SOMLINK * somTD_SOMMCooperative_somUninit)(SOMMCooperative *somSelf);
typedef SOMMMetaCooperative*   (SOMLINK * somTD_SOMMCooperative_somGetClass)(SOMMCooperative *somSelf);
typedef string   (SOMLINK * somTD_SOMMCooperative_somGetClassName)(SOMMCooperative *somSelf);
typedef long   (SOMLINK * somTD_SOMMCooperative_somGetSize)(SOMMCooperative *somSelf);
typedef boolean   (SOMLINK * somTD_SOMMCooperative_somIsA)(SOMMCooperative *somSelf,
		SOMClass* aClassObj);
typedef boolean   (SOMLINK * somTD_SOMMCooperative_somIsInstanceOf)(SOMMCooperative *somSelf,
		SOMClass* aClassObj);
typedef boolean   (SOMLINK * somTD_SOMMCooperative_somRespondsTo)(SOMMCooperative *somSelf,
		somId mId);
typedef boolean   (SOMLINK * somTD_SOMMCooperative_somDispatch)(SOMMCooperative *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef boolean   (SOMLINK * somTD_SOMMCooperative_somClassDispatch)(SOMMCooperative *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef boolean   (SOMLINK * somTD_SOMMCooperative_somCastObj)(SOMMCooperative *somSelf,
		SOMClass* cls);
typedef boolean   (SOMLINK * somTD_SOMMCooperative_somResetObj)(SOMMCooperative *somSelf);
typedef void   (SOMLINK * somTD_SOMMCooperative_somDispatchV)(SOMMCooperative *somSelf,
		somId methodId,
		somId descriptor,
		va_list ap);
typedef long   (SOMLINK * somTD_SOMMCooperative_somDispatchL)(SOMMCooperative *somSelf,
		somId methodId,
		somId descriptor,
		va_list ap);
typedef void*   (SOMLINK * somTD_SOMMCooperative_somDispatchA)(SOMMCooperative *somSelf,
		somId methodId,
		somId descriptor,
		va_list ap);
typedef double   (SOMLINK * somTD_SOMMCooperative_somDispatchD)(SOMMCooperative *somSelf,
		somId methodId,
		somId descriptor,
		va_list ap);
typedef SOMObject*   (SOMLINK * somTD_SOMMCooperative_somPrintSelf)(SOMMCooperative *somSelf);
typedef void   (SOMLINK * somTD_SOMMCooperative_somDumpSelf)(SOMMCooperative *somSelf,
		long level);
typedef void   (SOMLINK * somTD_SOMMCooperative_somDumpSelfInt)(SOMMCooperative *somSelf,
		long level);
}

#endif /* SOMMCooperative_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for SOMMCooperative
 */
class SOMMCooperative : public SOMClass
{
public:

// SOMMCooperative::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t size)
{
   SOM_IgnoreWarning(size);
   if (!_SOMMCooperative) SOMMCooperativeNewClass(SOMMCooperative_MajorVersion,SOMMCooperative_MinorVersion);
   return (void*)
      SOM_Resolve(_SOMMCooperative,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_SOMMCooperative));
}

// SOMMCooperative::delete uses the default deallocator for the object's class.
void operator delete(void * obj)
{
   somToken objCls = obj ? *(void**)obj : (somToken) NULL;
   if (somIsObj(objCls)) {
      SOM_Resolve(objCls,SOMClass,somDeallocate)
         ((SOMClass*)objCls, (string)obj);
   }
}

SOMMCooperative()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMMCooperativeCClassData.parentMtab))->mtab)
      return;
   somDefaultInit(0);
}

SOMMCooperative(SOMMCooperative* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMMCooperativeCClassData.parentMtab))->mtab)
      return;
   somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

SOMMCooperative(const SOMMCooperative* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMMCooperativeCClassData.parentMtab))->mtab)
      return;
   somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}

~SOMMCooperative()
{
   if (!somIsObj(this)) return;
   somDestruct(0,0);
   *(void**)this = **(void***)this;
}


/* method: sommAddCooperativeInstanceMethod */
somMethodProc**   sommAddCooperativeInstanceMethod(somId methodId,
		somMethodProc* methodProc)
{
   return SOM_ResolveD(this,SOMMCooperative,SOMMCooperative,sommAddCooperativeInstanceMethod)
	(this,methodId,methodProc);
}


/* method: sommAddCooperativeClassMethod */
somMethodProc**   sommAddCooperativeClassMethod(somId methodId,
		somMethodProc* methodProc)
{
   return SOM_ResolveD(this,SOMMCooperative,SOMMCooperative,sommAddCooperativeClassMethod)
	(this,methodId,methodProc);
}


/* method: sommRequestFirstCooperativeInstanceMethodCall */
void   sommRequestFirstCooperativeInstanceMethodCall(somId methodId,
		somMethodProc* coopProc,
		somMethodProc*** chainProcAddrAddr)
{
   SOM_ResolveD(this,SOMMCooperative,SOMMCooperative,sommRequestFirstCooperativeInstanceMethodCall)
	(this,methodId,coopProc,chainProcAddrAddr);
}


/* method: sommRequestFirstCooperativeClassMethodCall */
void   sommRequestFirstCooperativeClassMethodCall(somId methodId,
		somMethodProc* coopProc,
		somMethodProc*** chainProcAddrAddr)
{
   SOM_ResolveD(this,SOMMCooperative,SOMMCooperative,sommRequestFirstCooperativeClassMethodCall)
	(this,methodId,coopProc,chainProcAddrAddr);
}


/* method: sommRequestFinalClassMethodCall */
void   sommRequestFinalClassMethodCall(somId methodId,
		somMethodProc* methodProc)
{
   SOM_ResolveD(this,SOMMCooperative,SOMMCooperative,sommRequestFinalClassMethodCall)
	(this,methodId,methodProc);
}


/* method: sommSatisfyRequests */
boolean   sommSatisfyRequests()
{
   return SOM_ResolveD(this,SOMMCooperative,SOMMCooperative,sommSatisfyRequests)
	(this);
}


/*
 * Reintroduce inherited methods
 */

/* method: _get_somDataAlignment */
long   _get_somDataAlignment()
{
   return SOM_ResolveD(this,SOMMCooperative,SOMClass,_get_somDataAlignment)
	(this);
}


/* nonstatic method: _get_somInstanceDataOffsets */
SOMClass_somOffsets   _get_somInstanceDataOffsets()
{
   return SOM_ResolveD(this,SOMMCooperative,SOMClass,_get_somInstanceDataOffsets)
	(this);
}


/* nonstatic method: _get_somDirectInitClasses */
SOMClass_SOMClassSequence   _get_somDirectInitClasses()
{
   return SOM_ResolveD(this,SOMMCooperative,SOMClass,_get_somDirectInitClasses)
	(this);
}


/* nonstatic method: _set_somDirectInitClasses */
void   _set_somDirectInitClasses(SOMClass_SOMClassSequence* somDirectInitClasses)
{
   SOM_ResolveD(this,SOMMCooperative,SOMClass,_set_somDirectInitClasses)
	(this,somDirectInitClasses);
}


/* method: somNew */
SOMObject*   somNew()
{
   return SOM_ResolveD(this,SOMMCooperative,SOMClass,somNew)
	(this);
}


/* method: somNewNoInit */
SOMObject*   somNewNoInit()
{
   return SOM_ResolveD(this,SOMMCooperative,SOMClass,somNewNoInit)
	(this);
}


/* method: somRenew */
SOMObject*   somRenew(void* obj)
{
   return SOM_ResolveD(this,SOMMCooperative,SOMClass,somRenew)
	(this,obj);
}


/* method: somRenewNoInit */
SOMObject*   somRenewNoInit(void* obj)
{
   return SOM_ResolveD(this,SOMMCooperative,SOMClass,somRenewNoInit)
	(this,obj);
}


/* method: somRenewNoZero */
SOMObject*   somRenewNoZero(void* obj)
{
   return SOM_ResolveD(this,SOMMCooperative,SOMClass,somRenewNoZero)
	(this,obj);
}


/* method: somRenewNoInitNoZero */
SOMObject*   somRenewNoInitNoZero(void* obj)
{
   return SOM_ResolveD(this,SOMMCooperative,SOMClass,somRenewNoInitNoZero)
	(this,obj);
}


/* nonstatic method: somAllocate */
string   somAllocate(long size)
{
   return SOM_ResolveD(this,SOMMCooperative,SOMClass,somAllocate)
	(this,size);
}


/* nonstatic method: somDeallocate */
void   somDeallocate(string memptr)
{
   SOM_ResolveD(this,SOMMCooperative,SOMClass,somDeallocate)
	(this,memptr);
}


/* nonstatic method: _get_somClassAllocate */
somMethodProc*   _get_somClassAllocate()
{
   return SOM_ResolveD(this,SOMMCooperative,SOMClass,_get_somClassAllocate)
	(this);
}


/* nonstatic method: _get_somClassDeallocate */
somMethodProc*   _get_somClassDeallocate()
{
   return SOM_ResolveD(this,SOMMCooperative,SOMClass,_get_somClassDeallocate)
	(this);
}


/* method: somGetInstanceInitMask */
somBooleanVector   somGetInstanceInitMask(somInitCtrl* ctrl)
{
   return SOM_ResolveD(this,SOMMCooperative,SOMClass,somGetInstanceInitMask)
	(this,ctrl);
}


/* method: somGetInstanceDestructionMask */
somBooleanVector   somGetInstanceDestructionMask(somDestructCtrl* ctrl)
{
   return SOM_ResolveD(this,SOMMCooperative,SOMClass,somGetInstanceDestructionMask)
	(this,ctrl);
}


/* method: somGetInstanceAssignmentMask */
somBooleanVector   somGetInstanceAssignmentMask(somAssignCtrl* ctrl)
{
   return SOM_ResolveD(this,SOMMCooperative,SOMClass,somGetInstanceAssignmentMask)
	(this,ctrl);
}


/* method: somInitClass */
void   somInitClass(string className,
		SOMClass* parentClass,
		long dataSize,
		long maxStaticMethods,
		long majorVersion,
		long minorVersion)
{
   SOM_ResolveD(this,SOMMCooperative,SOMClass,somInitClass)
	(this,className,parentClass,dataSize,maxStaticMethods,majorVersion,minorVersion);
}


/* method: somInitMIClass */
void   somInitMIClass(long inherit_vars,
		string className,
		SOMClass_SOMClassSequence* parentClasses,
		long dataSize,
		long dataAlignment,
		long maxStaticMethods,
		long majorVersion,
		long minorVersion)
{
   SOM_ResolveD(this,SOMMCooperative,SOMClass,somInitMIClass)
	(this,inherit_vars,className,parentClasses,dataSize,dataAlignment,maxStaticMethods,majorVersion,minorVersion);
}


/* method: somAddStaticMethod */
somMToken   somAddStaticMethod(somId methodId,
		somId methodDescriptor,
		somMethodPtr method,
		somMethodPtr redispatchStub,
		somMethodPtr applyStub)
{
   return SOM_ResolveD(this,SOMMCooperative,SOMClass,somAddStaticMethod)
	(this,methodId,methodDescriptor,method,redispatchStub,applyStub);
}


/* method: somAddDynamicMethod */
void   somAddDynamicMethod(somId methodId,
		somId methodDescriptor,
		somMethodPtr method,
		somMethodPtr applyStub)
{
   SOM_ResolveD(this,SOMMCooperative,SOMClass,somAddDynamicMethod)
	(this,methodId,methodDescriptor,method,applyStub);
}


/* method: somOverrideSMethod */
void   somOverrideSMethod(somId methodId,
		somMethodPtr method)
{
   SOM_ResolveD(this,SOMMCooperative,SOMClass,somOverrideSMethod)
	(this,methodId,method);
}


/* method: somClassReady */
void   somClassReady()
{
   SOM_ResolveD(this,SOMMCooperative,SOMClass,somClassReady)
	(this);
}


/* method: somGetApplyStub */
somMethodPtr   somGetApplyStub(somId methodId)
{
   return SOM_ResolveD(this,SOMMCooperative,SOMClass,somGetApplyStub)
	(this,methodId);
}


/* method: somGetClassData */
somClassDataStructure*   somGetClassData()
{
   return SOM_ResolveD(this,SOMMCooperative,SOMClass,somGetClassData)
	(this);
}


/* method: somSetClassData */
void   somSetClassData(somClassDataStructure* cds)
{
   SOM_ResolveD(this,SOMMCooperative,SOMClass,somSetClassData)
	(this,cds);
}


/* method: somGetClassMtab */
somMethodTab*   somGetClassMtab()
{
   return SOM_ResolveD(this,SOMMCooperative,SOMClass,somGetClassMtab)
	(this);
}


/* method: somGetInstanceOffset */
long   somGetInstanceOffset()
{
   return SOM_ResolveD(this,SOMMCooperative,SOMClass,somGetInstanceOffset)
	(this);
}


/* method: somGetInstancePartSize */
long   somGetInstancePartSize()
{
   return SOM_ResolveD(this,SOMMCooperative,SOMClass,somGetInstancePartSize)
	(this);
}


/* method: somGetInstanceSize */
long   somGetInstanceSize()
{
   return SOM_ResolveD(this,SOMMCooperative,SOMClass,somGetInstanceSize)
	(this);
}


/* method: somGetInstanceToken */
somDToken   somGetInstanceToken()
{
   return SOM_ResolveD(this,SOMMCooperative,SOMClass,somGetInstanceToken)
	(this);
}


/* method: somGetMemberToken */
somDToken   somGetMemberToken(long memberOffset,
		somDToken instanceToken)
{
   return SOM_ResolveD(this,SOMMCooperative,SOMClass,somGetMemberToken)
	(this,memberOffset,instanceToken);
}


/* method: somGetMethodData */
boolean   somGetMethodData(somId methodId,
		somMethodData* md)
{
   return SOM_ResolveD(this,SOMMCooperative,SOMClass,somGetMethodData)
	(this,methodId,md);
}


/* method: somGetRdStub */
somMethodProc*   somGetRdStub(somId methodId)
{
   return SOM_ResolveD(this,SOMMCooperative,SOMClass,somGetRdStub)
	(this,methodId);
}


/* method: somGetMethodDescriptor */
somId   somGetMethodDescriptor(somId methodId)
{
   return SOM_ResolveD(this,SOMMCooperative,SOMClass,somGetMethodDescriptor)
	(this,methodId);
}


/* method: somGetMethodIndex */
long   somGetMethodIndex(somId id)
{
   return SOM_ResolveD(this,SOMMCooperative,SOMClass,somGetMethodIndex)
	(this,id);
}


/* method: somGetMethodToken */
somMToken   somGetMethodToken(somId methodId)
{
   return SOM_ResolveD(this,SOMMCooperative,SOMClass,somGetMethodToken)
	(this,methodId);
}


/* method: somGetName */
string   somGetName()
{
   return SOM_ResolveD(this,SOMMCooperative,SOMClass,somGetName)
	(this);
}


/* method: somGetNthMethodData */
boolean   somGetNthMethodData(long n,
		somMethodData* md)
{
   return SOM_ResolveD(this,SOMMCooperative,SOMClass,somGetNthMethodData)
	(this,n,md);
}


/* method: somGetNthMethodInfo */
somId   somGetNthMethodInfo(long n,
		somId* descriptor)
{
   return SOM_ResolveD(this,SOMMCooperative,SOMClass,somGetNthMethodInfo)
	(this,n,descriptor);
}


/* method: somGetNumMethods */
long   somGetNumMethods()
{
   return SOM_ResolveD(this,SOMMCooperative,SOMClass,somGetNumMethods)
	(this);
}


/* method: somGetNumStaticMethods */
long   somGetNumStaticMethods()
{
   return SOM_ResolveD(this,SOMMCooperative,SOMClass,somGetNumStaticMethods)
	(this);
}


/* method: somGetParent */
SOMClass*   somGetParent()
{
   return SOM_ResolveD(this,SOMMCooperative,SOMClass,somGetParent)
	(this);
}


/* method: somGetParents */
SOMClass_SOMClassSequence   somGetParents()
{
   return SOM_ResolveD(this,SOMMCooperative,SOMClass,somGetParents)
	(this);
}


/* method: somGetPClsMtab */
somMethodTabs   somGetPClsMtab()
{
   return SOM_ResolveD(this,SOMMCooperative,SOMClass,somGetPClsMtab)
	(this);
}


/* method: somGetPClsMtabs */
somMethodTabs   somGetPClsMtabs()
{
   return SOM_ResolveD(this,SOMMCooperative,SOMClass,somGetPClsMtabs)
	(this);
}


/* method: somGetVersionNumbers */
void   somGetVersionNumbers(long* majorVersion,
		long* minorVersion)
{
   SOM_ResolveD(this,SOMMCooperative,SOMClass,somGetVersionNumbers)
	(this,majorVersion,minorVersion);
}


/* method: somSetMethodDescriptor */
boolean   somSetMethodDescriptor(somId methodId,
		somId descriptor)
{
   return SOM_ResolveD(this,SOMMCooperative,SOMClass,somSetMethodDescriptor)
	(this,methodId,descriptor);
}


/* method: somFindMethod */
boolean   somFindMethod(somId methodId,
		somMethodPtr* m)
{
   return SOM_ResolveD(this,SOMMCooperative,SOMClass,somFindMethod)
	(this,methodId,m);
}


/* method: somFindMethodOk */
boolean   somFindMethodOk(somId methodId,
		somMethodPtr* m)
{
   return SOM_ResolveD(this,SOMMCooperative,SOMClass,somFindMethodOk)
	(this,methodId,m);
}


/* method: somFindSMethod */
somMethodPtr   somFindSMethod(somId methodId)
{
   return SOM_ResolveD(this,SOMMCooperative,SOMClass,somFindSMethod)
	(this,methodId);
}


/* method: somFindSMethodOk */
somMethodPtr   somFindSMethodOk(somId methodId)
{
   return SOM_ResolveD(this,SOMMCooperative,SOMClass,somFindSMethodOk)
	(this,methodId);
}


/* method: somLookupMethod */
somMethodPtr   somLookupMethod(somId methodId)
{
   return SOM_ResolveD(this,SOMMCooperative,SOMClass,somLookupMethod)
	(this,methodId);
}


/* method: somCheckVersion */
boolean   somCheckVersion(long majorVersion,
		long minorVersion)
{
   return SOM_ResolveD(this,SOMMCooperative,SOMClass,somCheckVersion)
	(this,majorVersion,minorVersion);
}


/* method: somDescendedFrom */
boolean   somDescendedFrom(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,SOMMCooperative,SOMClass,somDescendedFrom)
	(this,aClassObj);
}


/* method: somSupportsMethod */
boolean   somSupportsMethod(somId mId)
{
   return SOM_ResolveD(this,SOMMCooperative,SOMClass,somSupportsMethod)
	(this,mId);
}


/* method: somDefinedMethod */
somMethodPtr   somDefinedMethod(somMToken method)
{
   return SOM_ResolveD(this,SOMMCooperative,SOMClass,somDefinedMethod)
	(this,method);
}


/* method: somOverrideMtab */
void   somOverrideMtab()
{
   SOM_ResolveD(this,SOMMCooperative,SOMClass,somOverrideMtab)
	(this);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,SOMMCooperative,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,SOMMCooperative,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,SOMMCooperative,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
SOMMCooperative*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,SOMMCooperative,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,SOMMCooperative,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,SOMMCooperative,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,SOMMCooperative,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
SOMMCooperative*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,SOMMCooperative,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
SOMMCooperative*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,SOMMCooperative,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
SOMMCooperative*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,SOMMCooperative,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,SOMMCooperative,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,SOMMCooperative,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,SOMMCooperative,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMMMetaCooperative*  somGetClass()
{
   return SOM_ResolveD(this,SOMMCooperative,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,SOMMCooperative,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,SOMMCooperative,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,SOMMCooperative,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,SOMMCooperative,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,SOMMCooperative,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   SOMMCooperative_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,SOMMCooperative,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,SOMMCooperative,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   SOMMCooperative_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,SOMMCooperative,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,SOMMCooperative,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,SOMMCooperative,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,SOMMCooperative,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */
/* the va_list invocation form */
void   SOMMCooperative_somDispatchV(somId methodId,
		somId descriptor,
		va_list ap)
{
   SOM_ResolveD(this,SOMMCooperative,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId,
		somId descriptor,
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,SOMMCooperative,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */
/* the va_list invocation form */
long   SOMMCooperative_somDispatchL(somId methodId,
		somId descriptor,
		va_list ap)
{
return SOM_ResolveD(this,SOMMCooperative,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId,
		somId descriptor,
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,SOMMCooperative,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */
/* the va_list invocation form */
void*   SOMMCooperative_somDispatchA(somId methodId,
		somId descriptor,
		va_list ap)
{
return SOM_ResolveD(this,SOMMCooperative,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId,
		somId descriptor,
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,SOMMCooperative,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */
/* the va_list invocation form */
double   SOMMCooperative_somDispatchD(somId methodId,
		somId descriptor,
		va_list ap)
{
return SOM_ResolveD(this,SOMMCooperative,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId,
		somId descriptor,
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,SOMMCooperative,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,SOMMCooperative,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,SOMMCooperative,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,SOMMCooperative,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* SOMMCooperative */



#endif       /* SOM_SOMMCooperative_xh */

#ifndef SOM_SOMMCooperativeSistered_xh
#define SOM_SOMMCooperativeSistered_xh

class SOMMCooperativeSistered;

#define SOMMCooperativeSistered_MajorVersion 2
#define SOMMCooperativeSistered_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMMCooperative_xh
#include <sommeta.xh>
#endif

#ifndef SOMMCooperativeSistered_API
#define SOMMCooperativeSistered_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */

/*
 * End of user-defined types.
 */

/* A procedure to create the SOMMCooperativeSistered Class */
SOMEXTERN SOMClass * SOMLINK SOMMCooperativeSisteredNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the SOMMCooperativeSistered class object, and the methods it introduces. */
SOMEXTERN struct SOMMCooperativeSisteredClassDataStructure {
	SOMClass *classObject;
	somMToken _get_somSisterClass;
} SOMDLINK SOMMCooperativeSisteredClassData;
#define _SOMMCooperativeSistered SOMMCooperativeSisteredClassData.classObject

/* The API to parentMtabs for SOMMCooperativeSistered, and the instance data it introduces. */
SOMEXTERN struct SOMMCooperativeSisteredCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK SOMMCooperativeSisteredCClassData;

/*
 * -- Typedefs for SOMMCooperativeSistered Method Procedures
 */
SOMEXTERN {
typedef SOMClass*   (SOMLINK * somTD_SOMMCooperativeSistered__get_somSisterClass)(SOMMCooperativeSistered *somSelf);

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef somMethodProc**   (SOMLINK * somTD_SOMMCooperativeSistered_sommAddCooperativeInstanceMethod)(SOMMCooperativeSistered *somSelf,
		somId methodId,
		somMethodProc* methodProc);
typedef somMethodProc**   (SOMLINK * somTD_SOMMCooperativeSistered_sommAddCooperativeClassMethod)(SOMMCooperativeSistered *somSelf,
		somId methodId,
		somMethodProc* methodProc);
typedef void   (SOMLINK * somTD_SOMMCooperativeSistered_sommRequestFirstCooperativeInstanceMethodCall)(SOMMCooperativeSistered *somSelf,
		somId methodId,
		somMethodProc* coopProc,
		somMethodProc*** chainProcAddrAddr);
typedef void   (SOMLINK * somTD_SOMMCooperativeSistered_sommRequestFirstCooperativeClassMethodCall)(SOMMCooperativeSistered *somSelf,
		somId methodId,
		somMethodProc* coopProc,
		somMethodProc*** chainProcAddrAddr);
typedef void   (SOMLINK * somTD_SOMMCooperativeSistered_sommRequestFinalClassMethodCall)(SOMMCooperativeSistered *somSelf,
		somId methodId,
		somMethodProc* methodProc);
typedef boolean   (SOMLINK * somTD_SOMMCooperativeSistered_sommSatisfyRequests)(SOMMCooperativeSistered *somSelf);
typedef void   (SOMLINK * somTD_SOMMCooperativeSistered_somDefaultInit)(SOMMCooperativeSistered *somSelf,
		somInitCtrl* ctrl);
typedef void   (SOMLINK * somTD_SOMMCooperativeSistered_somInitMIClass)(SOMMCooperativeSistered *somSelf,
		long inherit_vars,
		string className,
		SOMClass_SOMClassSequence* parentClasses,
		long dataSize,
		long dataAlignment,
		long maxStaticMethods,
		long majorVersion,
		long minorVersion);
typedef void   (SOMLINK * somTD_SOMMCooperativeSistered_somClassReady)(SOMMCooperativeSistered *somSelf);
typedef long   (SOMLINK * somTD_SOMMCooperativeSistered__get_somDataAlignment)(SOMMCooperativeSistered *somSelf);
typedef SOMClass_somOffsets   (SOMLINK * somTD_SOMMCooperativeSistered__get_somInstanceDataOffsets)(SOMMCooperativeSistered *somSelf);
typedef SOMClass_SOMClassSequence   (SOMLINK * somTD_SOMMCooperativeSistered__get_somDirectInitClasses)(SOMMCooperativeSistered *somSelf);
typedef void   (SOMLINK * somTD_SOMMCooperativeSistered__set_somDirectInitClasses)(SOMMCooperativeSistered *somSelf,
		SOMClass_SOMClassSequence* somDirectInitClasses);
typedef SOMObject*   (SOMLINK * somTD_SOMMCooperativeSistered_somNew)(SOMMCooperativeSistered *somSelf);
typedef SOMObject*   (SOMLINK * somTD_SOMMCooperativeSistered_somNewNoInit)(SOMMCooperativeSistered *somSelf);
typedef SOMObject*   (SOMLINK * somTD_SOMMCooperativeSistered_somRenew)(SOMMCooperativeSistered *somSelf,
		void* obj);
typedef SOMObject*   (SOMLINK * somTD_SOMMCooperativeSistered_somRenewNoInit)(SOMMCooperativeSistered *somSelf,
		void* obj);
typedef SOMObject*   (SOMLINK * somTD_SOMMCooperativeSistered_somRenewNoZero)(SOMMCooperativeSistered *somSelf,
		void* obj);
typedef SOMObject*   (SOMLINK * somTD_SOMMCooperativeSistered_somRenewNoInitNoZero)(SOMMCooperativeSistered *somSelf,
		void* obj);
typedef string   (SOMLINK * somTD_SOMMCooperativeSistered_somAllocate)(SOMMCooperativeSistered *somSelf,
		long size);
typedef void   (SOMLINK * somTD_SOMMCooperativeSistered_somDeallocate)(SOMMCooperativeSistered *somSelf,
		string memptr);
typedef somMethodProc*   (SOMLINK * somTD_SOMMCooperativeSistered__get_somClassAllocate)(SOMMCooperativeSistered *somSelf);
typedef somMethodProc*   (SOMLINK * somTD_SOMMCooperativeSistered__get_somClassDeallocate)(SOMMCooperativeSistered *somSelf);
typedef somBooleanVector   (SOMLINK * somTD_SOMMCooperativeSistered_somGetInstanceInitMask)(SOMMCooperativeSistered *somSelf,
		somInitCtrl* ctrl);
typedef somBooleanVector   (SOMLINK * somTD_SOMMCooperativeSistered_somGetInstanceDestructionMask)(SOMMCooperativeSistered *somSelf,
		somDestructCtrl* ctrl);
typedef somBooleanVector   (SOMLINK * somTD_SOMMCooperativeSistered_somGetInstanceAssignmentMask)(SOMMCooperativeSistered *somSelf,
		somAssignCtrl* ctrl);
typedef void   (SOMLINK * somTD_SOMMCooperativeSistered_somInitClass)(SOMMCooperativeSistered *somSelf,
		string className,
		SOMClass* parentClass,
		long dataSize,
		long maxStaticMethods,
		long majorVersion,
		long minorVersion);
typedef somMToken   (SOMLINK * somTD_SOMMCooperativeSistered_somAddStaticMethod)(SOMMCooperativeSistered *somSelf,
		somId methodId,
		somId methodDescriptor,
		somMethodPtr method,
		somMethodPtr redispatchStub,
		somMethodPtr applyStub);
typedef void   (SOMLINK * somTD_SOMMCooperativeSistered_somAddDynamicMethod)(SOMMCooperativeSistered *somSelf,
		somId methodId,
		somId methodDescriptor,
		somMethodPtr method,
		somMethodPtr applyStub);
typedef void   (SOMLINK * somTD_SOMMCooperativeSistered_somOverrideSMethod)(SOMMCooperativeSistered *somSelf,
		somId methodId,
		somMethodPtr method);
typedef somMethodPtr   (SOMLINK * somTD_SOMMCooperativeSistered_somGetApplyStub)(SOMMCooperativeSistered *somSelf,
		somId methodId);
typedef somClassDataStructure*   (SOMLINK * somTD_SOMMCooperativeSistered_somGetClassData)(SOMMCooperativeSistered *somSelf);
typedef void   (SOMLINK * somTD_SOMMCooperativeSistered_somSetClassData)(SOMMCooperativeSistered *somSelf,
		somClassDataStructure* cds);
typedef somMethodTab*   (SOMLINK * somTD_SOMMCooperativeSistered_somGetClassMtab)(SOMMCooperativeSistered *somSelf);
typedef long   (SOMLINK * somTD_SOMMCooperativeSistered_somGetInstanceOffset)(SOMMCooperativeSistered *somSelf);
typedef long   (SOMLINK * somTD_SOMMCooperativeSistered_somGetInstancePartSize)(SOMMCooperativeSistered *somSelf);
typedef long   (SOMLINK * somTD_SOMMCooperativeSistered_somGetInstanceSize)(SOMMCooperativeSistered *somSelf);
typedef somDToken   (SOMLINK * somTD_SOMMCooperativeSistered_somGetInstanceToken)(SOMMCooperativeSistered *somSelf);
typedef somDToken   (SOMLINK * somTD_SOMMCooperativeSistered_somGetMemberToken)(SOMMCooperativeSistered *somSelf,
		long memberOffset,
		somDToken instanceToken);
typedef boolean   (SOMLINK * somTD_SOMMCooperativeSistered_somGetMethodData)(SOMMCooperativeSistered *somSelf,
		somId methodId,
		somMethodData* md);
typedef somMethodProc*   (SOMLINK * somTD_SOMMCooperativeSistered_somGetRdStub)(SOMMCooperativeSistered *somSelf,
		somId methodId);
typedef somId   (SOMLINK * somTD_SOMMCooperativeSistered_somGetMethodDescriptor)(SOMMCooperativeSistered *somSelf,
		somId methodId);
typedef long   (SOMLINK * somTD_SOMMCooperativeSistered_somGetMethodIndex)(SOMMCooperativeSistered *somSelf,
		somId id);
typedef somMToken   (SOMLINK * somTD_SOMMCooperativeSistered_somGetMethodToken)(SOMMCooperativeSistered *somSelf,
		somId methodId);
typedef string   (SOMLINK * somTD_SOMMCooperativeSistered_somGetName)(SOMMCooperativeSistered *somSelf);
typedef boolean   (SOMLINK * somTD_SOMMCooperativeSistered_somGetNthMethodData)(SOMMCooperativeSistered *somSelf,
		long n,
		somMethodData* md);
typedef somId   (SOMLINK * somTD_SOMMCooperativeSistered_somGetNthMethodInfo)(SOMMCooperativeSistered *somSelf,
		long n,
		somId* descriptor);
typedef long   (SOMLINK * somTD_SOMMCooperativeSistered_somGetNumMethods)(SOMMCooperativeSistered *somSelf);
typedef long   (SOMLINK * somTD_SOMMCooperativeSistered_somGetNumStaticMethods)(SOMMCooperativeSistered *somSelf);
typedef SOMClass*   (SOMLINK * somTD_SOMMCooperativeSistered_somGetParent)(SOMMCooperativeSistered *somSelf);
typedef SOMClass_SOMClassSequence   (SOMLINK * somTD_SOMMCooperativeSistered_somGetParents)(SOMMCooperativeSistered *somSelf);
typedef somMethodTabs   (SOMLINK * somTD_SOMMCooperativeSistered_somGetPClsMtab)(SOMMCooperativeSistered *somSelf);
typedef somMethodTabs   (SOMLINK * somTD_SOMMCooperativeSistered_somGetPClsMtabs)(SOMMCooperativeSistered *somSelf);
typedef void   (SOMLINK * somTD_SOMMCooperativeSistered_somGetVersionNumbers)(SOMMCooperativeSistered *somSelf,
		long* majorVersion,
		long* minorVersion);
typedef boolean   (SOMLINK * somTD_SOMMCooperativeSistered_somSetMethodDescriptor)(SOMMCooperativeSistered *somSelf,
		somId methodId,
		somId descriptor);
typedef boolean   (SOMLINK * somTD_SOMMCooperativeSistered_somFindMethod)(SOMMCooperativeSistered *somSelf,
		somId methodId,
		somMethodPtr* m);
typedef boolean   (SOMLINK * somTD_SOMMCooperativeSistered_somFindMethodOk)(SOMMCooperativeSistered *somSelf,
		somId methodId,
		somMethodPtr* m);
typedef somMethodPtr   (SOMLINK * somTD_SOMMCooperativeSistered_somFindSMethod)(SOMMCooperativeSistered *somSelf,
		somId methodId);
typedef somMethodPtr   (SOMLINK * somTD_SOMMCooperativeSistered_somFindSMethodOk)(SOMMCooperativeSistered *somSelf,
		somId methodId);
typedef somMethodPtr   (SOMLINK * somTD_SOMMCooperativeSistered_somLookupMethod)(SOMMCooperativeSistered *somSelf,
		somId methodId);
typedef boolean   (SOMLINK * somTD_SOMMCooperativeSistered_somCheckVersion)(SOMMCooperativeSistered *somSelf,
		long majorVersion,
		long minorVersion);
typedef boolean   (SOMLINK * somTD_SOMMCooperativeSistered_somDescendedFrom)(SOMMCooperativeSistered *somSelf,
		SOMClass* aClassObj);
typedef boolean   (SOMLINK * somTD_SOMMCooperativeSistered_somSupportsMethod)(SOMMCooperativeSistered *somSelf,
		somId mId);
typedef somMethodPtr   (SOMLINK * somTD_SOMMCooperativeSistered_somDefinedMethod)(SOMMCooperativeSistered *somSelf,
		somMToken method);
typedef void   (SOMLINK * somTD_SOMMCooperativeSistered_somOverrideMtab)(SOMMCooperativeSistered *somSelf);
typedef void   (SOMLINK * somTD_SOMMCooperativeSistered_somDestruct)(SOMMCooperativeSistered *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef void   (SOMLINK * somTD_SOMMCooperativeSistered_somDefaultCopyInit)(SOMMCooperativeSistered *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef SOMMCooperativeSistered*   (SOMLINK * somTD_SOMMCooperativeSistered_somDefaultAssign)(SOMMCooperativeSistered *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef void   (SOMLINK * somTD_SOMMCooperativeSistered_somDefaultConstCopyInit)(SOMMCooperativeSistered *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef void   (SOMLINK * somTD_SOMMCooperativeSistered_somDefaultVCopyInit)(SOMMCooperativeSistered *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef void   (SOMLINK * somTD_SOMMCooperativeSistered_somDefaultConstVCopyInit)(SOMMCooperativeSistered *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef SOMMCooperativeSistered*   (SOMLINK * somTD_SOMMCooperativeSistered_somDefaultConstAssign)(SOMMCooperativeSistered *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef SOMMCooperativeSistered*   (SOMLINK * somTD_SOMMCooperativeSistered_somDefaultVAssign)(SOMMCooperativeSistered *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef SOMMCooperativeSistered*   (SOMLINK * somTD_SOMMCooperativeSistered_somDefaultConstVAssign)(SOMMCooperativeSistered *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef void   (SOMLINK * somTD_SOMMCooperativeSistered_somInit)(SOMMCooperativeSistered *somSelf);
typedef void   (SOMLINK * somTD_SOMMCooperativeSistered_somFree)(SOMMCooperativeSistered *somSelf);
typedef void   (SOMLINK * somTD_SOMMCooperativeSistered_somUninit)(SOMMCooperativeSistered *somSelf);
typedef SOMClass*   (SOMLINK * somTD_SOMMCooperativeSistered_somGetClass)(SOMMCooperativeSistered *somSelf);
typedef string   (SOMLINK * somTD_SOMMCooperativeSistered_somGetClassName)(SOMMCooperativeSistered *somSelf);
typedef long   (SOMLINK * somTD_SOMMCooperativeSistered_somGetSize)(SOMMCooperativeSistered *somSelf);
typedef boolean   (SOMLINK * somTD_SOMMCooperativeSistered_somIsA)(SOMMCooperativeSistered *somSelf,
		SOMClass* aClassObj);
typedef boolean   (SOMLINK * somTD_SOMMCooperativeSistered_somIsInstanceOf)(SOMMCooperativeSistered *somSelf,
		SOMClass* aClassObj);
typedef boolean   (SOMLINK * somTD_SOMMCooperativeSistered_somRespondsTo)(SOMMCooperativeSistered *somSelf,
		somId mId);
typedef boolean   (SOMLINK * somTD_SOMMCooperativeSistered_somDispatch)(SOMMCooperativeSistered *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef boolean   (SOMLINK * somTD_SOMMCooperativeSistered_somClassDispatch)(SOMMCooperativeSistered *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef boolean   (SOMLINK * somTD_SOMMCooperativeSistered_somCastObj)(SOMMCooperativeSistered *somSelf,
		SOMClass* cls);
typedef boolean   (SOMLINK * somTD_SOMMCooperativeSistered_somResetObj)(SOMMCooperativeSistered *somSelf);
typedef void   (SOMLINK * somTD_SOMMCooperativeSistered_somDispatchV)(SOMMCooperativeSistered *somSelf,
		somId methodId,
		somId descriptor,
		va_list ap);
typedef long   (SOMLINK * somTD_SOMMCooperativeSistered_somDispatchL)(SOMMCooperativeSistered *somSelf,
		somId methodId,
		somId descriptor,
		va_list ap);
typedef void*   (SOMLINK * somTD_SOMMCooperativeSistered_somDispatchA)(SOMMCooperativeSistered *somSelf,
		somId methodId,
		somId descriptor,
		va_list ap);
typedef double   (SOMLINK * somTD_SOMMCooperativeSistered_somDispatchD)(SOMMCooperativeSistered *somSelf,
		somId methodId,
		somId descriptor,
		va_list ap);
typedef SOMObject*   (SOMLINK * somTD_SOMMCooperativeSistered_somPrintSelf)(SOMMCooperativeSistered *somSelf);
typedef void   (SOMLINK * somTD_SOMMCooperativeSistered_somDumpSelf)(SOMMCooperativeSistered *somSelf,
		long level);
typedef void   (SOMLINK * somTD_SOMMCooperativeSistered_somDumpSelfInt)(SOMMCooperativeSistered *somSelf,
		long level);
}

#endif /* SOMMCooperativeSistered_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for SOMMCooperativeSistered
 */
class SOMMCooperativeSistered : public SOMMCooperative
{
public:

// SOMMCooperativeSistered::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t size)
{
   SOM_IgnoreWarning(size);
   if (!_SOMMCooperativeSistered) SOMMCooperativeSisteredNewClass(SOMMCooperativeSistered_MajorVersion,SOMMCooperativeSistered_MinorVersion);
   return (void*)
      SOM_Resolve(_SOMMCooperativeSistered,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_SOMMCooperativeSistered));
}

// SOMMCooperativeSistered::delete uses the default deallocator for the object's class.
void operator delete(void * obj)
{
   somToken objCls = obj ? *(void**)obj : (somToken) NULL;
   if (somIsObj(objCls)) {
      SOM_Resolve(objCls,SOMClass,somDeallocate)
         ((SOMClass*)objCls, (string)obj);
   }
}

SOMMCooperativeSistered()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMMCooperativeSisteredCClassData.parentMtab))->mtab)
      return;
   somDefaultInit(0);
}

SOMMCooperativeSistered(SOMMCooperativeSistered* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMMCooperativeSisteredCClassData.parentMtab))->mtab)
      return;
   somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

SOMMCooperativeSistered(const SOMMCooperativeSistered* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMMCooperativeSisteredCClassData.parentMtab))->mtab)
      return;
   somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}

~SOMMCooperativeSistered()
{
   if (!somIsObj(this)) return;
   somDestruct(0,0);
   *(void**)this = **(void***)this;
}


/* method: _get_somSisterClass */
SOMClass*   _get_somSisterClass()
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMMCooperativeSistered,_get_somSisterClass)
	(this);
}


/*
 * Reintroduce inherited methods
 */

/* method: sommAddCooperativeInstanceMethod */
somMethodProc**   sommAddCooperativeInstanceMethod(somId methodId,
		somMethodProc* methodProc)
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMMCooperative,sommAddCooperativeInstanceMethod)
	(this,methodId,methodProc);
}


/* method: sommAddCooperativeClassMethod */
somMethodProc**   sommAddCooperativeClassMethod(somId methodId,
		somMethodProc* methodProc)
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMMCooperative,sommAddCooperativeClassMethod)
	(this,methodId,methodProc);
}


/* method: sommRequestFirstCooperativeInstanceMethodCall */
void   sommRequestFirstCooperativeInstanceMethodCall(somId methodId,
		somMethodProc* coopProc,
		somMethodProc*** chainProcAddrAddr)
{
   SOM_ResolveD(this,SOMMCooperativeSistered,SOMMCooperative,sommRequestFirstCooperativeInstanceMethodCall)
	(this,methodId,coopProc,chainProcAddrAddr);
}


/* method: sommRequestFirstCooperativeClassMethodCall */
void   sommRequestFirstCooperativeClassMethodCall(somId methodId,
		somMethodProc* coopProc,
		somMethodProc*** chainProcAddrAddr)
{
   SOM_ResolveD(this,SOMMCooperativeSistered,SOMMCooperative,sommRequestFirstCooperativeClassMethodCall)
	(this,methodId,coopProc,chainProcAddrAddr);
}


/* method: sommRequestFinalClassMethodCall */
void   sommRequestFinalClassMethodCall(somId methodId,
		somMethodProc* methodProc)
{
   SOM_ResolveD(this,SOMMCooperativeSistered,SOMMCooperative,sommRequestFinalClassMethodCall)
	(this,methodId,methodProc);
}


/* method: sommSatisfyRequests */
boolean   sommSatisfyRequests()
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMMCooperative,sommSatisfyRequests)
	(this);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,SOMMCooperativeSistered,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somInitMIClass */
void   somInitMIClass(long inherit_vars,
		string className,
		SOMClass_SOMClassSequence* parentClasses,
		long dataSize,
		long dataAlignment,
		long maxStaticMethods,
		long majorVersion,
		long minorVersion)
{
   SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somInitMIClass)
	(this,inherit_vars,className,parentClasses,dataSize,dataAlignment,maxStaticMethods,majorVersion,minorVersion);
}


/* method: somClassReady */
void   somClassReady()
{
   SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somClassReady)
	(this);
}


/* method: _get_somDataAlignment */
long   _get_somDataAlignment()
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,_get_somDataAlignment)
	(this);
}


/* nonstatic method: _get_somInstanceDataOffsets */
SOMClass_somOffsets   _get_somInstanceDataOffsets()
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,_get_somInstanceDataOffsets)
	(this);
}


/* nonstatic method: _get_somDirectInitClasses */
SOMClass_SOMClassSequence   _get_somDirectInitClasses()
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,_get_somDirectInitClasses)
	(this);
}


/* nonstatic method: _set_somDirectInitClasses */
void   _set_somDirectInitClasses(SOMClass_SOMClassSequence* somDirectInitClasses)
{
   SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,_set_somDirectInitClasses)
	(this,somDirectInitClasses);
}


/* method: somNew */
SOMObject*   somNew()
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somNew)
	(this);
}


/* method: somNewNoInit */
SOMObject*   somNewNoInit()
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somNewNoInit)
	(this);
}


/* method: somRenew */
SOMObject*   somRenew(void* obj)
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somRenew)
	(this,obj);
}


/* method: somRenewNoInit */
SOMObject*   somRenewNoInit(void* obj)
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somRenewNoInit)
	(this,obj);
}


/* method: somRenewNoZero */
SOMObject*   somRenewNoZero(void* obj)
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somRenewNoZero)
	(this,obj);
}


/* method: somRenewNoInitNoZero */
SOMObject*   somRenewNoInitNoZero(void* obj)
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somRenewNoInitNoZero)
	(this,obj);
}


/* nonstatic method: somAllocate */
string   somAllocate(long size)
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somAllocate)
	(this,size);
}


/* nonstatic method: somDeallocate */
void   somDeallocate(string memptr)
{
   SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somDeallocate)
	(this,memptr);
}


/* nonstatic method: _get_somClassAllocate */
somMethodProc*   _get_somClassAllocate()
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,_get_somClassAllocate)
	(this);
}


/* nonstatic method: _get_somClassDeallocate */
somMethodProc*   _get_somClassDeallocate()
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,_get_somClassDeallocate)
	(this);
}


/* method: somGetInstanceInitMask */
somBooleanVector   somGetInstanceInitMask(somInitCtrl* ctrl)
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somGetInstanceInitMask)
	(this,ctrl);
}


/* method: somGetInstanceDestructionMask */
somBooleanVector   somGetInstanceDestructionMask(somDestructCtrl* ctrl)
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somGetInstanceDestructionMask)
	(this,ctrl);
}


/* method: somGetInstanceAssignmentMask */
somBooleanVector   somGetInstanceAssignmentMask(somAssignCtrl* ctrl)
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somGetInstanceAssignmentMask)
	(this,ctrl);
}


/* method: somInitClass */
void   somInitClass(string className,
		SOMClass* parentClass,
		long dataSize,
		long maxStaticMethods,
		long majorVersion,
		long minorVersion)
{
   SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somInitClass)
	(this,className,parentClass,dataSize,maxStaticMethods,majorVersion,minorVersion);
}


/* method: somAddStaticMethod */
somMToken   somAddStaticMethod(somId methodId,
		somId methodDescriptor,
		somMethodPtr method,
		somMethodPtr redispatchStub,
		somMethodPtr applyStub)
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somAddStaticMethod)
	(this,methodId,methodDescriptor,method,redispatchStub,applyStub);
}


/* method: somAddDynamicMethod */
void   somAddDynamicMethod(somId methodId,
		somId methodDescriptor,
		somMethodPtr method,
		somMethodPtr applyStub)
{
   SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somAddDynamicMethod)
	(this,methodId,methodDescriptor,method,applyStub);
}


/* method: somOverrideSMethod */
void   somOverrideSMethod(somId methodId,
		somMethodPtr method)
{
   SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somOverrideSMethod)
	(this,methodId,method);
}


/* method: somGetApplyStub */
somMethodPtr   somGetApplyStub(somId methodId)
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somGetApplyStub)
	(this,methodId);
}


/* method: somGetClassData */
somClassDataStructure*   somGetClassData()
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somGetClassData)
	(this);
}


/* method: somSetClassData */
void   somSetClassData(somClassDataStructure* cds)
{
   SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somSetClassData)
	(this,cds);
}


/* method: somGetClassMtab */
somMethodTab*   somGetClassMtab()
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somGetClassMtab)
	(this);
}


/* method: somGetInstanceOffset */
long   somGetInstanceOffset()
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somGetInstanceOffset)
	(this);
}


/* method: somGetInstancePartSize */
long   somGetInstancePartSize()
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somGetInstancePartSize)
	(this);
}


/* method: somGetInstanceSize */
long   somGetInstanceSize()
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somGetInstanceSize)
	(this);
}


/* method: somGetInstanceToken */
somDToken   somGetInstanceToken()
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somGetInstanceToken)
	(this);
}


/* method: somGetMemberToken */
somDToken   somGetMemberToken(long memberOffset,
		somDToken instanceToken)
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somGetMemberToken)
	(this,memberOffset,instanceToken);
}


/* method: somGetMethodData */
boolean   somGetMethodData(somId methodId,
		somMethodData* md)
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somGetMethodData)
	(this,methodId,md);
}


/* method: somGetRdStub */
somMethodProc*   somGetRdStub(somId methodId)
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somGetRdStub)
	(this,methodId);
}


/* method: somGetMethodDescriptor */
somId   somGetMethodDescriptor(somId methodId)
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somGetMethodDescriptor)
	(this,methodId);
}


/* method: somGetMethodIndex */
long   somGetMethodIndex(somId id)
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somGetMethodIndex)
	(this,id);
}


/* method: somGetMethodToken */
somMToken   somGetMethodToken(somId methodId)
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somGetMethodToken)
	(this,methodId);
}


/* method: somGetName */
string   somGetName()
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somGetName)
	(this);
}


/* method: somGetNthMethodData */
boolean   somGetNthMethodData(long n,
		somMethodData* md)
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somGetNthMethodData)
	(this,n,md);
}


/* method: somGetNthMethodInfo */
somId   somGetNthMethodInfo(long n,
		somId* descriptor)
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somGetNthMethodInfo)
	(this,n,descriptor);
}


/* method: somGetNumMethods */
long   somGetNumMethods()
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somGetNumMethods)
	(this);
}


/* method: somGetNumStaticMethods */
long   somGetNumStaticMethods()
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somGetNumStaticMethods)
	(this);
}


/* method: somGetParent */
SOMClass*   somGetParent()
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somGetParent)
	(this);
}


/* method: somGetParents */
SOMClass_SOMClassSequence   somGetParents()
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somGetParents)
	(this);
}


/* method: somGetPClsMtab */
somMethodTabs   somGetPClsMtab()
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somGetPClsMtab)
	(this);
}


/* method: somGetPClsMtabs */
somMethodTabs   somGetPClsMtabs()
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somGetPClsMtabs)
	(this);
}


/* method: somGetVersionNumbers */
void   somGetVersionNumbers(long* majorVersion,
		long* minorVersion)
{
   SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somGetVersionNumbers)
	(this,majorVersion,minorVersion);
}


/* method: somSetMethodDescriptor */
boolean   somSetMethodDescriptor(somId methodId,
		somId descriptor)
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somSetMethodDescriptor)
	(this,methodId,descriptor);
}


/* method: somFindMethod */
boolean   somFindMethod(somId methodId,
		somMethodPtr* m)
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somFindMethod)
	(this,methodId,m);
}


/* method: somFindMethodOk */
boolean   somFindMethodOk(somId methodId,
		somMethodPtr* m)
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somFindMethodOk)
	(this,methodId,m);
}


/* method: somFindSMethod */
somMethodPtr   somFindSMethod(somId methodId)
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somFindSMethod)
	(this,methodId);
}


/* method: somFindSMethodOk */
somMethodPtr   somFindSMethodOk(somId methodId)
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somFindSMethodOk)
	(this,methodId);
}


/* method: somLookupMethod */
somMethodPtr   somLookupMethod(somId methodId)
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somLookupMethod)
	(this,methodId);
}


/* method: somCheckVersion */
boolean   somCheckVersion(long majorVersion,
		long minorVersion)
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somCheckVersion)
	(this,majorVersion,minorVersion);
}


/* method: somDescendedFrom */
boolean   somDescendedFrom(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somDescendedFrom)
	(this,aClassObj);
}


/* method: somSupportsMethod */
boolean   somSupportsMethod(somId mId)
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somSupportsMethod)
	(this,mId);
}


/* method: somDefinedMethod */
somMethodPtr   somDefinedMethod(somMToken method)
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somDefinedMethod)
	(this,method);
}


/* method: somOverrideMtab */
void   somOverrideMtab()
{
   SOM_ResolveD(this,SOMMCooperativeSistered,SOMClass,somOverrideMtab)
	(this);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,SOMMCooperativeSistered,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,SOMMCooperativeSistered,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
SOMMCooperativeSistered*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,SOMMCooperativeSistered,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,SOMMCooperativeSistered,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,SOMMCooperativeSistered,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
SOMMCooperativeSistered*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
SOMMCooperativeSistered*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
SOMMCooperativeSistered*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,SOMMCooperativeSistered,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,SOMMCooperativeSistered,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,SOMMCooperativeSistered,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   SOMMCooperativeSistered_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,SOMMCooperativeSistered,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,SOMMCooperativeSistered,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   SOMMCooperativeSistered_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,SOMMCooperativeSistered,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,SOMMCooperativeSistered,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */
/* the va_list invocation form */
void   SOMMCooperativeSistered_somDispatchV(somId methodId,
		somId descriptor,
		va_list ap)
{
   SOM_ResolveD(this,SOMMCooperativeSistered,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId,
		somId descriptor,
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,SOMMCooperativeSistered,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */
/* the va_list invocation form */
long   SOMMCooperativeSistered_somDispatchL(somId methodId,
		somId descriptor,
		va_list ap)
{
return SOM_ResolveD(this,SOMMCooperativeSistered,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId,
		somId descriptor,
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,SOMMCooperativeSistered,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */
/* the va_list invocation form */
void*   SOMMCooperativeSistered_somDispatchA(somId methodId,
		somId descriptor,
		va_list ap)
{
return SOM_ResolveD(this,SOMMCooperativeSistered,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId,
		somId descriptor,
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,SOMMCooperativeSistered,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */
/* the va_list invocation form */
double   SOMMCooperativeSistered_somDispatchD(somId methodId,
		somId descriptor,
		va_list ap)
{
return SOM_ResolveD(this,SOMMCooperativeSistered,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId,
		somId descriptor,
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,SOMMCooperativeSistered,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,SOMMCooperativeSistered,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,SOMMCooperativeSistered,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,SOMMCooperativeSistered,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* SOMMCooperativeSistered */



#endif       /* SOM_SOMMCooperativeSistered_xh */

#ifndef SOM_SOMMCooperativeRedispatched_xh
#define SOM_SOMMCooperativeRedispatched_xh

class SOMMCooperativeRedispatched;

#define SOMMCooperativeRedispatched_MajorVersion 2
#define SOMMCooperativeRedispatched_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMMCooperativeSistered_xh
#include <sommeta.xh>
#endif

#ifndef SOMMCooperativeRedispatched_API
#define SOMMCooperativeRedispatched_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */

/*
 * End of user-defined types.
 */

/* A procedure to create the SOMMCooperativeRedispatched Class */
SOMEXTERN SOMClass * SOMLINK SOMMCooperativeRedispatchedNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the SOMMCooperativeRedispatched class object, and the methods it introduces. */
SOMEXTERN struct SOMMCooperativeRedispatchedClassDataStructure {
	SOMClass *classObject;
} SOMDLINK SOMMCooperativeRedispatchedClassData;
#define _SOMMCooperativeRedispatched SOMMCooperativeRedispatchedClassData.classObject

/* The API to parentMtabs for SOMMCooperativeRedispatched, and the instance data it introduces. */
SOMEXTERN struct SOMMCooperativeRedispatchedCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK SOMMCooperativeRedispatchedCClassData;

/*
 * -- Typedefs for SOMMCooperativeRedispatched Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef SOMClass*   (SOMLINK * somTD_SOMMCooperativeRedispatched__get_somSisterClass)(SOMMCooperativeRedispatched *somSelf);
typedef void   (SOMLINK * somTD_SOMMCooperativeRedispatched_somDefaultInit)(SOMMCooperativeRedispatched *somSelf,
		somInitCtrl* ctrl);
typedef void   (SOMLINK * somTD_SOMMCooperativeRedispatched_somInitMIClass)(SOMMCooperativeRedispatched *somSelf,
		long inherit_vars,
		string className,
		SOMClass_SOMClassSequence* parentClasses,
		long dataSize,
		long dataAlignment,
		long maxStaticMethods,
		long majorVersion,
		long minorVersion);
typedef somMethodProc**   (SOMLINK * somTD_SOMMCooperativeRedispatched_sommAddCooperativeInstanceMethod)(SOMMCooperativeRedispatched *somSelf,
		somId methodId,
		somMethodProc* methodProc);
typedef somMethodProc**   (SOMLINK * somTD_SOMMCooperativeRedispatched_sommAddCooperativeClassMethod)(SOMMCooperativeRedispatched *somSelf,
		somId methodId,
		somMethodProc* methodProc);
typedef void   (SOMLINK * somTD_SOMMCooperativeRedispatched_sommRequestFirstCooperativeInstanceMethodCall)(SOMMCooperativeRedispatched *somSelf,
		somId methodId,
		somMethodProc* coopProc,
		somMethodProc*** chainProcAddrAddr);
typedef void   (SOMLINK * somTD_SOMMCooperativeRedispatched_sommRequestFirstCooperativeClassMethodCall)(SOMMCooperativeRedispatched *somSelf,
		somId methodId,
		somMethodProc* coopProc,
		somMethodProc*** chainProcAddrAddr);
typedef void   (SOMLINK * somTD_SOMMCooperativeRedispatched_sommRequestFinalClassMethodCall)(SOMMCooperativeRedispatched *somSelf,
		somId methodId,
		somMethodProc* methodProc);
typedef boolean   (SOMLINK * somTD_SOMMCooperativeRedispatched_sommSatisfyRequests)(SOMMCooperativeRedispatched *somSelf);
typedef void   (SOMLINK * somTD_SOMMCooperativeRedispatched_somClassReady)(SOMMCooperativeRedispatched *somSelf);
typedef long   (SOMLINK * somTD_SOMMCooperativeRedispatched__get_somDataAlignment)(SOMMCooperativeRedispatched *somSelf);
typedef SOMClass_somOffsets   (SOMLINK * somTD_SOMMCooperativeRedispatched__get_somInstanceDataOffsets)(SOMMCooperativeRedispatched *somSelf);
typedef SOMClass_SOMClassSequence   (SOMLINK * somTD_SOMMCooperativeRedispatched__get_somDirectInitClasses)(SOMMCooperativeRedispatched *somSelf);
typedef void   (SOMLINK * somTD_SOMMCooperativeRedispatched__set_somDirectInitClasses)(SOMMCooperativeRedispatched *somSelf,
		SOMClass_SOMClassSequence* somDirectInitClasses);
typedef SOMObject*   (SOMLINK * somTD_SOMMCooperativeRedispatched_somNew)(SOMMCooperativeRedispatched *somSelf);
typedef SOMObject*   (SOMLINK * somTD_SOMMCooperativeRedispatched_somNewNoInit)(SOMMCooperativeRedispatched *somSelf);
typedef SOMObject*   (SOMLINK * somTD_SOMMCooperativeRedispatched_somRenew)(SOMMCooperativeRedispatched *somSelf,
		void* obj);
typedef SOMObject*   (SOMLINK * somTD_SOMMCooperativeRedispatched_somRenewNoInit)(SOMMCooperativeRedispatched *somSelf,
		void* obj);
typedef SOMObject*   (SOMLINK * somTD_SOMMCooperativeRedispatched_somRenewNoZero)(SOMMCooperativeRedispatched *somSelf,
		void* obj);
typedef SOMObject*   (SOMLINK * somTD_SOMMCooperativeRedispatched_somRenewNoInitNoZero)(SOMMCooperativeRedispatched *somSelf,
		void* obj);
typedef string   (SOMLINK * somTD_SOMMCooperativeRedispatched_somAllocate)(SOMMCooperativeRedispatched *somSelf,
		long size);
typedef void   (SOMLINK * somTD_SOMMCooperativeRedispatched_somDeallocate)(SOMMCooperativeRedispatched *somSelf,
		string memptr);
typedef somMethodProc*   (SOMLINK * somTD_SOMMCooperativeRedispatched__get_somClassAllocate)(SOMMCooperativeRedispatched *somSelf);
typedef somMethodProc*   (SOMLINK * somTD_SOMMCooperativeRedispatched__get_somClassDeallocate)(SOMMCooperativeRedispatched *somSelf);
typedef somBooleanVector   (SOMLINK * somTD_SOMMCooperativeRedispatched_somGetInstanceInitMask)(SOMMCooperativeRedispatched *somSelf,
		somInitCtrl* ctrl);
typedef somBooleanVector   (SOMLINK * somTD_SOMMCooperativeRedispatched_somGetInstanceDestructionMask)(SOMMCooperativeRedispatched *somSelf,
		somDestructCtrl* ctrl);
typedef somBooleanVector   (SOMLINK * somTD_SOMMCooperativeRedispatched_somGetInstanceAssignmentMask)(SOMMCooperativeRedispatched *somSelf,
		somAssignCtrl* ctrl);
typedef void   (SOMLINK * somTD_SOMMCooperativeRedispatched_somInitClass)(SOMMCooperativeRedispatched *somSelf,
		string className,
		SOMClass* parentClass,
		long dataSize,
		long maxStaticMethods,
		long majorVersion,
		long minorVersion);
typedef somMToken   (SOMLINK * somTD_SOMMCooperativeRedispatched_somAddStaticMethod)(SOMMCooperativeRedispatched *somSelf,
		somId methodId,
		somId methodDescriptor,
		somMethodPtr method,
		somMethodPtr redispatchStub,
		somMethodPtr applyStub);
typedef void   (SOMLINK * somTD_SOMMCooperativeRedispatched_somAddDynamicMethod)(SOMMCooperativeRedispatched *somSelf,
		somId methodId,
		somId methodDescriptor,
		somMethodPtr method,
		somMethodPtr applyStub);
typedef void   (SOMLINK * somTD_SOMMCooperativeRedispatched_somOverrideSMethod)(SOMMCooperativeRedispatched *somSelf,
		somId methodId,
		somMethodPtr method);
typedef somMethodPtr   (SOMLINK * somTD_SOMMCooperativeRedispatched_somGetApplyStub)(SOMMCooperativeRedispatched *somSelf,
		somId methodId);
typedef somClassDataStructure*   (SOMLINK * somTD_SOMMCooperativeRedispatched_somGetClassData)(SOMMCooperativeRedispatched *somSelf);
typedef void   (SOMLINK * somTD_SOMMCooperativeRedispatched_somSetClassData)(SOMMCooperativeRedispatched *somSelf,
		somClassDataStructure* cds);
typedef somMethodTab*   (SOMLINK * somTD_SOMMCooperativeRedispatched_somGetClassMtab)(SOMMCooperativeRedispatched *somSelf);
typedef long   (SOMLINK * somTD_SOMMCooperativeRedispatched_somGetInstanceOffset)(SOMMCooperativeRedispatched *somSelf);
typedef long   (SOMLINK * somTD_SOMMCooperativeRedispatched_somGetInstancePartSize)(SOMMCooperativeRedispatched *somSelf);
typedef long   (SOMLINK * somTD_SOMMCooperativeRedispatched_somGetInstanceSize)(SOMMCooperativeRedispatched *somSelf);
typedef somDToken   (SOMLINK * somTD_SOMMCooperativeRedispatched_somGetInstanceToken)(SOMMCooperativeRedispatched *somSelf);
typedef somDToken   (SOMLINK * somTD_SOMMCooperativeRedispatched_somGetMemberToken)(SOMMCooperativeRedispatched *somSelf,
		long memberOffset,
		somDToken instanceToken);
typedef boolean   (SOMLINK * somTD_SOMMCooperativeRedispatched_somGetMethodData)(SOMMCooperativeRedispatched *somSelf,
		somId methodId,
		somMethodData* md);
typedef somMethodProc*   (SOMLINK * somTD_SOMMCooperativeRedispatched_somGetRdStub)(SOMMCooperativeRedispatched *somSelf,
		somId methodId);
typedef somId   (SOMLINK * somTD_SOMMCooperativeRedispatched_somGetMethodDescriptor)(SOMMCooperativeRedispatched *somSelf,
		somId methodId);
typedef long   (SOMLINK * somTD_SOMMCooperativeRedispatched_somGetMethodIndex)(SOMMCooperativeRedispatched *somSelf,
		somId id);
typedef somMToken   (SOMLINK * somTD_SOMMCooperativeRedispatched_somGetMethodToken)(SOMMCooperativeRedispatched *somSelf,
		somId methodId);
typedef string   (SOMLINK * somTD_SOMMCooperativeRedispatched_somGetName)(SOMMCooperativeRedispatched *somSelf);
typedef boolean   (SOMLINK * somTD_SOMMCooperativeRedispatched_somGetNthMethodData)(SOMMCooperativeRedispatched *somSelf,
		long n,
		somMethodData* md);
typedef somId   (SOMLINK * somTD_SOMMCooperativeRedispatched_somGetNthMethodInfo)(SOMMCooperativeRedispatched *somSelf,
		long n,
		somId* descriptor);
typedef long   (SOMLINK * somTD_SOMMCooperativeRedispatched_somGetNumMethods)(SOMMCooperativeRedispatched *somSelf);
typedef long   (SOMLINK * somTD_SOMMCooperativeRedispatched_somGetNumStaticMethods)(SOMMCooperativeRedispatched *somSelf);
typedef SOMClass*   (SOMLINK * somTD_SOMMCooperativeRedispatched_somGetParent)(SOMMCooperativeRedispatched *somSelf);
typedef SOMClass_SOMClassSequence   (SOMLINK * somTD_SOMMCooperativeRedispatched_somGetParents)(SOMMCooperativeRedispatched *somSelf);
typedef somMethodTabs   (SOMLINK * somTD_SOMMCooperativeRedispatched_somGetPClsMtab)(SOMMCooperativeRedispatched *somSelf);
typedef somMethodTabs   (SOMLINK * somTD_SOMMCooperativeRedispatched_somGetPClsMtabs)(SOMMCooperativeRedispatched *somSelf);
typedef void   (SOMLINK * somTD_SOMMCooperativeRedispatched_somGetVersionNumbers)(SOMMCooperativeRedispatched *somSelf,
		long* majorVersion,
		long* minorVersion);
typedef boolean   (SOMLINK * somTD_SOMMCooperativeRedispatched_somSetMethodDescriptor)(SOMMCooperativeRedispatched *somSelf,
		somId methodId,
		somId descriptor);
typedef boolean   (SOMLINK * somTD_SOMMCooperativeRedispatched_somFindMethod)(SOMMCooperativeRedispatched *somSelf,
		somId methodId,
		somMethodPtr* m);
typedef boolean   (SOMLINK * somTD_SOMMCooperativeRedispatched_somFindMethodOk)(SOMMCooperativeRedispatched *somSelf,
		somId methodId,
		somMethodPtr* m);
typedef somMethodPtr   (SOMLINK * somTD_SOMMCooperativeRedispatched_somFindSMethod)(SOMMCooperativeRedispatched *somSelf,
		somId methodId);
typedef somMethodPtr   (SOMLINK * somTD_SOMMCooperativeRedispatched_somFindSMethodOk)(SOMMCooperativeRedispatched *somSelf,
		somId methodId);
typedef somMethodPtr   (SOMLINK * somTD_SOMMCooperativeRedispatched_somLookupMethod)(SOMMCooperativeRedispatched *somSelf,
		somId methodId);
typedef boolean   (SOMLINK * somTD_SOMMCooperativeRedispatched_somCheckVersion)(SOMMCooperativeRedispatched *somSelf,
		long majorVersion,
		long minorVersion);
typedef boolean   (SOMLINK * somTD_SOMMCooperativeRedispatched_somDescendedFrom)(SOMMCooperativeRedispatched *somSelf,
		SOMClass* aClassObj);
typedef boolean   (SOMLINK * somTD_SOMMCooperativeRedispatched_somSupportsMethod)(SOMMCooperativeRedispatched *somSelf,
		somId mId);
typedef somMethodPtr   (SOMLINK * somTD_SOMMCooperativeRedispatched_somDefinedMethod)(SOMMCooperativeRedispatched *somSelf,
		somMToken method);
typedef void   (SOMLINK * somTD_SOMMCooperativeRedispatched_somOverrideMtab)(SOMMCooperativeRedispatched *somSelf);
typedef void   (SOMLINK * somTD_SOMMCooperativeRedispatched_somDestruct)(SOMMCooperativeRedispatched *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef void   (SOMLINK * somTD_SOMMCooperativeRedispatched_somDefaultCopyInit)(SOMMCooperativeRedispatched *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef SOMMCooperativeRedispatched*   (SOMLINK * somTD_SOMMCooperativeRedispatched_somDefaultAssign)(SOMMCooperativeRedispatched *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef void   (SOMLINK * somTD_SOMMCooperativeRedispatched_somDefaultConstCopyInit)(SOMMCooperativeRedispatched *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef void   (SOMLINK * somTD_SOMMCooperativeRedispatched_somDefaultVCopyInit)(SOMMCooperativeRedispatched *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef void   (SOMLINK * somTD_SOMMCooperativeRedispatched_somDefaultConstVCopyInit)(SOMMCooperativeRedispatched *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef SOMMCooperativeRedispatched*   (SOMLINK * somTD_SOMMCooperativeRedispatched_somDefaultConstAssign)(SOMMCooperativeRedispatched *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef SOMMCooperativeRedispatched*   (SOMLINK * somTD_SOMMCooperativeRedispatched_somDefaultVAssign)(SOMMCooperativeRedispatched *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef SOMMCooperativeRedispatched*   (SOMLINK * somTD_SOMMCooperativeRedispatched_somDefaultConstVAssign)(SOMMCooperativeRedispatched *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef void   (SOMLINK * somTD_SOMMCooperativeRedispatched_somInit)(SOMMCooperativeRedispatched *somSelf);
typedef void   (SOMLINK * somTD_SOMMCooperativeRedispatched_somFree)(SOMMCooperativeRedispatched *somSelf);
typedef void   (SOMLINK * somTD_SOMMCooperativeRedispatched_somUninit)(SOMMCooperativeRedispatched *somSelf);
typedef SOMClass*   (SOMLINK * somTD_SOMMCooperativeRedispatched_somGetClass)(SOMMCooperativeRedispatched *somSelf);
typedef string   (SOMLINK * somTD_SOMMCooperativeRedispatched_somGetClassName)(SOMMCooperativeRedispatched *somSelf);
typedef long   (SOMLINK * somTD_SOMMCooperativeRedispatched_somGetSize)(SOMMCooperativeRedispatched *somSelf);
typedef boolean   (SOMLINK * somTD_SOMMCooperativeRedispatched_somIsA)(SOMMCooperativeRedispatched *somSelf,
		SOMClass* aClassObj);
typedef boolean   (SOMLINK * somTD_SOMMCooperativeRedispatched_somIsInstanceOf)(SOMMCooperativeRedispatched *somSelf,
		SOMClass* aClassObj);
typedef boolean   (SOMLINK * somTD_SOMMCooperativeRedispatched_somRespondsTo)(SOMMCooperativeRedispatched *somSelf,
		somId mId);
typedef boolean   (SOMLINK * somTD_SOMMCooperativeRedispatched_somDispatch)(SOMMCooperativeRedispatched *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef boolean   (SOMLINK * somTD_SOMMCooperativeRedispatched_somClassDispatch)(SOMMCooperativeRedispatched *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef boolean   (SOMLINK * somTD_SOMMCooperativeRedispatched_somCastObj)(SOMMCooperativeRedispatched *somSelf,
		SOMClass* cls);
typedef boolean   (SOMLINK * somTD_SOMMCooperativeRedispatched_somResetObj)(SOMMCooperativeRedispatched *somSelf);
typedef void   (SOMLINK * somTD_SOMMCooperativeRedispatched_somDispatchV)(SOMMCooperativeRedispatched *somSelf,
		somId methodId,
		somId descriptor,
		va_list ap);
typedef long   (SOMLINK * somTD_SOMMCooperativeRedispatched_somDispatchL)(SOMMCooperativeRedispatched *somSelf,
		somId methodId,
		somId descriptor,
		va_list ap);
typedef void*   (SOMLINK * somTD_SOMMCooperativeRedispatched_somDispatchA)(SOMMCooperativeRedispatched *somSelf,
		somId methodId,
		somId descriptor,
		va_list ap);
typedef double   (SOMLINK * somTD_SOMMCooperativeRedispatched_somDispatchD)(SOMMCooperativeRedispatched *somSelf,
		somId methodId,
		somId descriptor,
		va_list ap);
typedef SOMObject*   (SOMLINK * somTD_SOMMCooperativeRedispatched_somPrintSelf)(SOMMCooperativeRedispatched *somSelf);
typedef void   (SOMLINK * somTD_SOMMCooperativeRedispatched_somDumpSelf)(SOMMCooperativeRedispatched *somSelf,
		long level);
typedef void   (SOMLINK * somTD_SOMMCooperativeRedispatched_somDumpSelfInt)(SOMMCooperativeRedispatched *somSelf,
		long level);
}

#endif /* SOMMCooperativeRedispatched_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for SOMMCooperativeRedispatched
 */
class SOMMCooperativeRedispatched : public SOMMCooperativeSistered
{
public:

// SOMMCooperativeRedispatched::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t size)
{
   SOM_IgnoreWarning(size);
   if (!_SOMMCooperativeRedispatched) SOMMCooperativeRedispatchedNewClass(SOMMCooperativeRedispatched_MajorVersion,SOMMCooperativeRedispatched_MinorVersion);
   return (void*)
      SOM_Resolve(_SOMMCooperativeRedispatched,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_SOMMCooperativeRedispatched));
}

// SOMMCooperativeRedispatched::delete uses the default deallocator for the object's class.
void operator delete(void * obj)
{
   somToken objCls = obj ? *(void**)obj : (somToken) NULL;
   if (somIsObj(objCls)) {
      SOM_Resolve(objCls,SOMClass,somDeallocate)
         ((SOMClass*)objCls, (string)obj);
   }
}

SOMMCooperativeRedispatched()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMMCooperativeRedispatchedCClassData.parentMtab))->mtab)
      return;
   somDefaultInit(0);
}

SOMMCooperativeRedispatched(SOMMCooperativeRedispatched* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMMCooperativeRedispatchedCClassData.parentMtab))->mtab)
      return;
   somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

SOMMCooperativeRedispatched(const SOMMCooperativeRedispatched* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMMCooperativeRedispatchedCClassData.parentMtab))->mtab)
      return;
   somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}

~SOMMCooperativeRedispatched()
{
   if (!somIsObj(this)) return;
   somDestruct(0,0);
   *(void**)this = **(void***)this;
}


/*
 * Reintroduce inherited methods
 */

/* method: _get_somSisterClass */
SOMClass*   _get_somSisterClass()
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMMCooperativeSistered,_get_somSisterClass)
	(this);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somInitMIClass */
void   somInitMIClass(long inherit_vars,
		string className,
		SOMClass_SOMClassSequence* parentClasses,
		long dataSize,
		long dataAlignment,
		long maxStaticMethods,
		long majorVersion,
		long minorVersion)
{
   SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somInitMIClass)
	(this,inherit_vars,className,parentClasses,dataSize,dataAlignment,maxStaticMethods,majorVersion,minorVersion);
}


/* method: sommAddCooperativeInstanceMethod */
somMethodProc**   sommAddCooperativeInstanceMethod(somId methodId,
		somMethodProc* methodProc)
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMMCooperative,sommAddCooperativeInstanceMethod)
	(this,methodId,methodProc);
}


/* method: sommAddCooperativeClassMethod */
somMethodProc**   sommAddCooperativeClassMethod(somId methodId,
		somMethodProc* methodProc)
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMMCooperative,sommAddCooperativeClassMethod)
	(this,methodId,methodProc);
}


/* method: sommRequestFirstCooperativeInstanceMethodCall */
void   sommRequestFirstCooperativeInstanceMethodCall(somId methodId,
		somMethodProc* coopProc,
		somMethodProc*** chainProcAddrAddr)
{
   SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMMCooperative,sommRequestFirstCooperativeInstanceMethodCall)
	(this,methodId,coopProc,chainProcAddrAddr);
}


/* method: sommRequestFirstCooperativeClassMethodCall */
void   sommRequestFirstCooperativeClassMethodCall(somId methodId,
		somMethodProc* coopProc,
		somMethodProc*** chainProcAddrAddr)
{
   SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMMCooperative,sommRequestFirstCooperativeClassMethodCall)
	(this,methodId,coopProc,chainProcAddrAddr);
}


/* method: sommRequestFinalClassMethodCall */
void   sommRequestFinalClassMethodCall(somId methodId,
		somMethodProc* methodProc)
{
   SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMMCooperative,sommRequestFinalClassMethodCall)
	(this,methodId,methodProc);
}


/* method: sommSatisfyRequests */
boolean   sommSatisfyRequests()
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMMCooperative,sommSatisfyRequests)
	(this);
}


/* method: somClassReady */
void   somClassReady()
{
   SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somClassReady)
	(this);
}


/* method: _get_somDataAlignment */
long   _get_somDataAlignment()
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,_get_somDataAlignment)
	(this);
}


/* nonstatic method: _get_somInstanceDataOffsets */
SOMClass_somOffsets   _get_somInstanceDataOffsets()
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,_get_somInstanceDataOffsets)
	(this);
}


/* nonstatic method: _get_somDirectInitClasses */
SOMClass_SOMClassSequence   _get_somDirectInitClasses()
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,_get_somDirectInitClasses)
	(this);
}


/* nonstatic method: _set_somDirectInitClasses */
void   _set_somDirectInitClasses(SOMClass_SOMClassSequence* somDirectInitClasses)
{
   SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,_set_somDirectInitClasses)
	(this,somDirectInitClasses);
}


/* method: somNew */
SOMObject*   somNew()
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somNew)
	(this);
}


/* method: somNewNoInit */
SOMObject*   somNewNoInit()
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somNewNoInit)
	(this);
}


/* method: somRenew */
SOMObject*   somRenew(void* obj)
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somRenew)
	(this,obj);
}


/* method: somRenewNoInit */
SOMObject*   somRenewNoInit(void* obj)
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somRenewNoInit)
	(this,obj);
}


/* method: somRenewNoZero */
SOMObject*   somRenewNoZero(void* obj)
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somRenewNoZero)
	(this,obj);
}


/* method: somRenewNoInitNoZero */
SOMObject*   somRenewNoInitNoZero(void* obj)
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somRenewNoInitNoZero)
	(this,obj);
}


/* nonstatic method: somAllocate */
string   somAllocate(long size)
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somAllocate)
	(this,size);
}


/* nonstatic method: somDeallocate */
void   somDeallocate(string memptr)
{
   SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somDeallocate)
	(this,memptr);
}


/* nonstatic method: _get_somClassAllocate */
somMethodProc*   _get_somClassAllocate()
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,_get_somClassAllocate)
	(this);
}


/* nonstatic method: _get_somClassDeallocate */
somMethodProc*   _get_somClassDeallocate()
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,_get_somClassDeallocate)
	(this);
}


/* method: somGetInstanceInitMask */
somBooleanVector   somGetInstanceInitMask(somInitCtrl* ctrl)
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somGetInstanceInitMask)
	(this,ctrl);
}


/* method: somGetInstanceDestructionMask */
somBooleanVector   somGetInstanceDestructionMask(somDestructCtrl* ctrl)
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somGetInstanceDestructionMask)
	(this,ctrl);
}


/* method: somGetInstanceAssignmentMask */
somBooleanVector   somGetInstanceAssignmentMask(somAssignCtrl* ctrl)
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somGetInstanceAssignmentMask)
	(this,ctrl);
}


/* method: somInitClass */
void   somInitClass(string className,
		SOMClass* parentClass,
		long dataSize,
		long maxStaticMethods,
		long majorVersion,
		long minorVersion)
{
   SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somInitClass)
	(this,className,parentClass,dataSize,maxStaticMethods,majorVersion,minorVersion);
}


/* method: somAddStaticMethod */
somMToken   somAddStaticMethod(somId methodId,
		somId methodDescriptor,
		somMethodPtr method,
		somMethodPtr redispatchStub,
		somMethodPtr applyStub)
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somAddStaticMethod)
	(this,methodId,methodDescriptor,method,redispatchStub,applyStub);
}


/* method: somAddDynamicMethod */
void   somAddDynamicMethod(somId methodId,
		somId methodDescriptor,
		somMethodPtr method,
		somMethodPtr applyStub)
{
   SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somAddDynamicMethod)
	(this,methodId,methodDescriptor,method,applyStub);
}


/* method: somOverrideSMethod */
void   somOverrideSMethod(somId methodId,
		somMethodPtr method)
{
   SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somOverrideSMethod)
	(this,methodId,method);
}


/* method: somGetApplyStub */
somMethodPtr   somGetApplyStub(somId methodId)
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somGetApplyStub)
	(this,methodId);
}


/* method: somGetClassData */
somClassDataStructure*   somGetClassData()
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somGetClassData)
	(this);
}


/* method: somSetClassData */
void   somSetClassData(somClassDataStructure* cds)
{
   SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somSetClassData)
	(this,cds);
}


/* method: somGetClassMtab */
somMethodTab*   somGetClassMtab()
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somGetClassMtab)
	(this);
}


/* method: somGetInstanceOffset */
long   somGetInstanceOffset()
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somGetInstanceOffset)
	(this);
}


/* method: somGetInstancePartSize */
long   somGetInstancePartSize()
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somGetInstancePartSize)
	(this);
}


/* method: somGetInstanceSize */
long   somGetInstanceSize()
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somGetInstanceSize)
	(this);
}


/* method: somGetInstanceToken */
somDToken   somGetInstanceToken()
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somGetInstanceToken)
	(this);
}


/* method: somGetMemberToken */
somDToken   somGetMemberToken(long memberOffset,
		somDToken instanceToken)
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somGetMemberToken)
	(this,memberOffset,instanceToken);
}


/* method: somGetMethodData */
boolean   somGetMethodData(somId methodId,
		somMethodData* md)
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somGetMethodData)
	(this,methodId,md);
}


/* method: somGetRdStub */
somMethodProc*   somGetRdStub(somId methodId)
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somGetRdStub)
	(this,methodId);
}


/* method: somGetMethodDescriptor */
somId   somGetMethodDescriptor(somId methodId)
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somGetMethodDescriptor)
	(this,methodId);
}


/* method: somGetMethodIndex */
long   somGetMethodIndex(somId id)
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somGetMethodIndex)
	(this,id);
}


/* method: somGetMethodToken */
somMToken   somGetMethodToken(somId methodId)
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somGetMethodToken)
	(this,methodId);
}


/* method: somGetName */
string   somGetName()
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somGetName)
	(this);
}


/* method: somGetNthMethodData */
boolean   somGetNthMethodData(long n,
		somMethodData* md)
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somGetNthMethodData)
	(this,n,md);
}


/* method: somGetNthMethodInfo */
somId   somGetNthMethodInfo(long n,
		somId* descriptor)
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somGetNthMethodInfo)
	(this,n,descriptor);
}


/* method: somGetNumMethods */
long   somGetNumMethods()
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somGetNumMethods)
	(this);
}


/* method: somGetNumStaticMethods */
long   somGetNumStaticMethods()
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somGetNumStaticMethods)
	(this);
}


/* method: somGetParent */
SOMClass*   somGetParent()
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somGetParent)
	(this);
}


/* method: somGetParents */
SOMClass_SOMClassSequence   somGetParents()
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somGetParents)
	(this);
}


/* method: somGetPClsMtab */
somMethodTabs   somGetPClsMtab()
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somGetPClsMtab)
	(this);
}


/* method: somGetPClsMtabs */
somMethodTabs   somGetPClsMtabs()
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somGetPClsMtabs)
	(this);
}


/* method: somGetVersionNumbers */
void   somGetVersionNumbers(long* majorVersion,
		long* minorVersion)
{
   SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somGetVersionNumbers)
	(this,majorVersion,minorVersion);
}


/* method: somSetMethodDescriptor */
boolean   somSetMethodDescriptor(somId methodId,
		somId descriptor)
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somSetMethodDescriptor)
	(this,methodId,descriptor);
}


/* method: somFindMethod */
boolean   somFindMethod(somId methodId,
		somMethodPtr* m)
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somFindMethod)
	(this,methodId,m);
}


/* method: somFindMethodOk */
boolean   somFindMethodOk(somId methodId,
		somMethodPtr* m)
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somFindMethodOk)
	(this,methodId,m);
}


/* method: somFindSMethod */
somMethodPtr   somFindSMethod(somId methodId)
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somFindSMethod)
	(this,methodId);
}


/* method: somFindSMethodOk */
somMethodPtr   somFindSMethodOk(somId methodId)
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somFindSMethodOk)
	(this,methodId);
}


/* method: somLookupMethod */
somMethodPtr   somLookupMethod(somId methodId)
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somLookupMethod)
	(this,methodId);
}


/* method: somCheckVersion */
boolean   somCheckVersion(long majorVersion,
		long minorVersion)
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somCheckVersion)
	(this,majorVersion,minorVersion);
}


/* method: somDescendedFrom */
boolean   somDescendedFrom(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somDescendedFrom)
	(this,aClassObj);
}


/* method: somSupportsMethod */
boolean   somSupportsMethod(somId mId)
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somSupportsMethod)
	(this,mId);
}


/* method: somDefinedMethod */
somMethodPtr   somDefinedMethod(somMToken method)
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somDefinedMethod)
	(this,method);
}


/* method: somOverrideMtab */
void   somOverrideMtab()
{
   SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMClass,somOverrideMtab)
	(this);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
SOMMCooperativeRedispatched*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
SOMMCooperativeRedispatched*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
SOMMCooperativeRedispatched*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
SOMMCooperativeRedispatched*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   SOMMCooperativeRedispatched_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   SOMMCooperativeRedispatched_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */
/* the va_list invocation form */
void   SOMMCooperativeRedispatched_somDispatchV(somId methodId,
		somId descriptor,
		va_list ap)
{
   SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId,
		somId descriptor,
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */
/* the va_list invocation form */
long   SOMMCooperativeRedispatched_somDispatchL(somId methodId,
		somId descriptor,
		va_list ap)
{
return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId,
		somId descriptor,
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */
/* the va_list invocation form */
void*   SOMMCooperativeRedispatched_somDispatchA(somId methodId,
		somId descriptor,
		va_list ap)
{
return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId,
		somId descriptor,
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */
/* the va_list invocation form */
double   SOMMCooperativeRedispatched_somDispatchD(somId methodId,
		somId descriptor,
		va_list ap)
{
return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId,
		somId descriptor,
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,SOMMCooperativeRedispatched,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* SOMMCooperativeRedispatched */



#endif       /* SOM_SOMMCooperativeRedispatched_xh */
