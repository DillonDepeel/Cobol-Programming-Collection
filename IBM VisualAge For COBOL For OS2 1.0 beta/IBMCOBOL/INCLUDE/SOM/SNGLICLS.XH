
/*
 * This file was generated by the SOM Compiler.
 * FileName: c:\somtk\include\snglicls.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.7
 *     SOM Emitter emitxh: 2.42
 */

/*
 * 
 *    COMPONENT_NAME: somu
 * 
 *    ORIGINS: 27
 * 
 * 
 *    10H9767, 10H9769  (C) COPYRIGHT International Business Machines Corp. 1992,1994
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 */


#ifndef SOM_SOMMSingleInstance_xh
#define SOM_SOMMSingleInstance_xh

class SOMMSingleInstance;

/*
 *  This class is a metaclass for classes which wish to enforce a
 *  single instance rule.  That is, classes which specify this class
 *  as their metaclass will only be allowed to have a single instance.
 * 
 *  For example, if a class named dog specified this class as its
 *  metaclass, only one dog object could be instantiated. Repeated
 *  calls to _somNew on the dog class would simply return the same
 *  dog repeatedly.
 * 
 *  There are two ways to retrieve the single intance of the using
 *  class:
 * 
 *   1) Invoke sommGetSingleInstance on the class object of the using class.
 *      This is the preferred way.
 * 
 *   2) Invoke somNew or somNewNoInit on the class object of the using class.
 * 
 */

#define SOMMSingleInstance_MajorVersion 2
#define SOMMSingleInstance_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMClass_xh
#include <somcls.xh>
#endif

#ifndef SOMMSingleInstance_API
#define SOMMSingleInstance_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;

/*
 * End of user-defined types.
 */

/* A procedure to create the SOMMSingleInstance Class */
SOMEXTERN SOMClass * SOMLINK SOMMSingleInstanceNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the SOMMSingleInstance class object, and the methods it introduces. */
SOMEXTERN struct SOMMSingleInstanceClassDataStructure {
	SOMClass *classObject;
	somMToken sommGetSingleInstance;
	somMToken sommFreeSingleInstance;
} SOMDLINK SOMMSingleInstanceClassData;
#define _SOMMSingleInstance SOMMSingleInstanceClassData.classObject

/* The API to parentMtabs for SOMMSingleInstance, and the instance data it introduces. */
SOMEXTERN struct SOMMSingleInstanceCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK SOMMSingleInstanceCClassData;

/*
 * -- Typedefs for SOMMSingleInstance Method Procedures
 */
SOMEXTERN {
typedef SOMObject*   SOMLINK somTP_SOMMSingleInstance_sommGetSingleInstance(SOMMSingleInstance *somSelf, Environment *ev);
typedef somTP_SOMMSingleInstance_sommGetSingleInstance *somTD_SOMMSingleInstance_sommGetSingleInstance;
typedef void   SOMLINK somTP_SOMMSingleInstance_sommFreeSingleInstance(SOMMSingleInstance *somSelf, Environment *ev);
typedef somTP_SOMMSingleInstance_sommFreeSingleInstance *somTD_SOMMSingleInstance_sommFreeSingleInstance;
}

#endif /* SOMMSingleInstance_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for SOMMSingleInstance
 */
class SOMMSingleInstance : public SOMClass
{
public:

// SOMMSingleInstance::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_SOMMSingleInstance) SOMMSingleInstanceNewClass(SOMMSingleInstance_MajorVersion,SOMMSingleInstance_MinorVersion);
   return (void*)
      SOM_Resolve(_SOMMSingleInstance,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_SOMMSingleInstance));
}

// SOMMSingleInstance::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

SOMMSingleInstance()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMMSingleInstanceCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

SOMMSingleInstance(SOMMSingleInstance* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMMSingleInstanceCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

SOMMSingleInstance(const SOMMSingleInstance* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMMSingleInstanceCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: sommGetSingleInstance */
SOMObject*   sommGetSingleInstance(Environment *ev)
{
   return SOM_ResolveD(this,SOMMSingleInstance,SOMMSingleInstance,sommGetSingleInstance)
	(this, ev);
}


/* method: sommFreeSingleInstance */
void   sommFreeSingleInstance(Environment *ev)
{
   SOM_ResolveD(this,SOMMSingleInstance,SOMMSingleInstance,sommFreeSingleInstance)
	(this, ev);
}



};   /* SOMMSingleInstance */



#endif       /* SOM_SOMMSingleInstance_xh */
