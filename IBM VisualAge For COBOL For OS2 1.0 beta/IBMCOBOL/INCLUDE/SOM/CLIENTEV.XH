
/*
 * This file was generated by the SOM Compiler.
 * FileName: c:\somtk\include\clientev.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.7
 *     SOM Emitter emitxh: 2.42
 */

/*
 * 
 *    COMPONENT_NAME: somu
 * 
 *    ORIGINS: 27
 * 
 * 
 *    10H9767, 10H9769  (C) COPYRIGHT International Business Machines Corp. 1992,1994
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 */


#ifndef SOM_SOMEClientEvent_xh
#define SOM_SOMEClientEvent_xh

class SOMEClientEvent;

/*
 *  SOMEClientEvent is the class for generic client events within the Event Manager.
 *  This class should be queried for events of the following type(s):
 *       EMClientEvent
 * 
 *  An instance of this class is initialized and passed to the
 *  callback routine for all client events regardless of their clientevent type.
 */

#define SOMEClientEvent_MajorVersion 2
#define SOMEClientEvent_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMEEvent_xh
#include <event.xh>
#endif

#ifndef SOMEClientEvent_API
#define SOMEClientEvent_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;

/*
 * End of user-defined types.
 */

/* A procedure to create the SOMEClientEvent Class */
SOMEXTERN SOMClass * SOMLINK SOMEClientEventNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the SOMEClientEvent class object, and the methods it introduces. */
SOMEXTERN struct SOMEClientEventClassDataStructure {
	SOMClass *classObject;
	somMToken somevGetEventClientData;
	somMToken somevGetEventClientType;
	somMToken somevSetEventClientData;
	somMToken somevSetEventClientType;
} SOMDLINK SOMEClientEventClassData;
#define _SOMEClientEvent SOMEClientEventClassData.classObject

/* The API to parentMtabs for SOMEClientEvent, and the instance data it introduces. */
SOMEXTERN struct SOMEClientEventCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK SOMEClientEventCClassData;

/*
 * -- Typedefs for SOMEClientEvent Method Procedures
 */
SOMEXTERN {
typedef void*   SOMLINK somTP_SOMEClientEvent_somevGetEventClientData(SOMEClientEvent *somSelf, Environment *ev);
typedef somTP_SOMEClientEvent_somevGetEventClientData *somTD_SOMEClientEvent_somevGetEventClientData;
typedef string   SOMLINK somTP_SOMEClientEvent_somevGetEventClientType(SOMEClientEvent *somSelf, Environment *ev);
typedef somTP_SOMEClientEvent_somevGetEventClientType *somTD_SOMEClientEvent_somevGetEventClientType;
typedef void   SOMLINK somTP_SOMEClientEvent_somevSetEventClientData(SOMEClientEvent *somSelf, Environment *ev,
		void* clientData);
typedef somTP_SOMEClientEvent_somevSetEventClientData *somTD_SOMEClientEvent_somevSetEventClientData;
typedef void   SOMLINK somTP_SOMEClientEvent_somevSetEventClientType(SOMEClientEvent *somSelf, Environment *ev,
		string clientType);
typedef somTP_SOMEClientEvent_somevSetEventClientType *somTD_SOMEClientEvent_somevSetEventClientType;
}

#endif /* SOMEClientEvent_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for SOMEClientEvent
 */
class SOMEClientEvent : public SOMEEvent
{
public:

// SOMEClientEvent::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_SOMEClientEvent) SOMEClientEventNewClass(SOMEClientEvent_MajorVersion,SOMEClientEvent_MinorVersion);
   return (void*)
      SOM_Resolve(_SOMEClientEvent,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_SOMEClientEvent));
}

// SOMEClientEvent::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

SOMEClientEvent()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMEClientEventCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

SOMEClientEvent(SOMEClientEvent* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMEClientEventCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

SOMEClientEvent(const SOMEClientEvent* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMEClientEventCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: somevGetEventClientData */
void*   somevGetEventClientData(Environment *ev)
{
   return SOM_ResolveD(this,SOMEClientEvent,SOMEClientEvent,somevGetEventClientData)
	(this, ev);
}


/* method: somevGetEventClientType */
string   somevGetEventClientType(Environment *ev)
{
   return SOM_ResolveD(this,SOMEClientEvent,SOMEClientEvent,somevGetEventClientType)
	(this, ev);
}


/* method: somevSetEventClientData */
void   somevSetEventClientData(Environment *ev,
		void* clientData)
{
   SOM_ResolveD(this,SOMEClientEvent,SOMEClientEvent,somevSetEventClientData)
	(this, ev,clientData);
}


/* method: somevSetEventClientType */
void   somevSetEventClientType(Environment *ev,
		string clientType)
{
   SOM_ResolveD(this,SOMEClientEvent,SOMEClientEvent,somevSetEventClientType)
	(this, ev,clientType);
}



};   /* SOMEClientEvent */



#endif       /* SOM_SOMEClientEvent_xh */
