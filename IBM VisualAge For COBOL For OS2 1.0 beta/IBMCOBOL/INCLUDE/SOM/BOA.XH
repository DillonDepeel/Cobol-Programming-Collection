
/*
 * This file was generated by the SOM Compiler.
 * FileName: c:\somtk\include\BOA.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.7
 *     SOM Emitter emitxh: 2.42
 */

/*
 * 
 *    COMPONENT_NAME: somd
 * 
 *    ORIGINS: 27
 * 
 * 
 *    10H9767, 10H9769  (C) COPYRIGHT International Business Machines Corp. 1992,1994
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 *    IDL interface spec for CORBA Basic Object Adapter.
 * 
 *    This is an abstract class which defines the CORBA-defined interface
 *    for a Basic Object Adapter.
 * 
 *    The SOM Object Adapter interface is derived from this one.
 *    SOMOA provides the actual implementation in DSOM.
 */


#ifndef SOM_BOA_xh
#define SOM_BOA_xh

class BOA;

#define BOA_MajorVersion 2
#define BOA_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

/*
 * C++ metaclass def
 */
#include <snglicls.xh>

#ifndef BOA_API
#define BOA_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;
class Container;
class SOMDObject;
class Principal;
class ImplementationDef;
class InterfaceDef;
class Context;

/*
 * End of user-defined types.
 */

/* A procedure to create the BOA Class */
class SOMMSingleInstance;
SOMEXTERN SOMMSingleInstance * SOMLINK BOANewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the BOA class object, and the methods it introduces. */
SOMEXTERN struct BOAClassDataStructure {
	SOMMSingleInstance *classObject;
	somMToken create;
	somMToken dispose;
	somMToken get_id;
	somMToken change_implementation;
	somMToken get_principal;
	somMToken set_exception;
	somMToken impl_is_ready;
	somMToken deactivate_impl;
	somMToken obj_is_ready;
	somMToken deactivate_obj;
	somMToken activate_impl;
	somMToken activate_obj;
} SOMDLINK BOAClassData;
#define _BOA BOAClassData.classObject

/* The API to parentMtabs for BOA, and the instance data it introduces. */
SOMEXTERN struct BOACClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK BOACClassData;

/*
 * -- Typedefs for BOA Method Procedures
 */
SOMEXTERN {
typedef SOMDObject*   SOMLINK somTP_BOA_create(BOA *somSelf, Environment *ev,
		ReferenceData* id,
		InterfaceDef* intf,
		ImplementationDef* impl);
typedef somTP_BOA_create *somTD_BOA_create;
typedef void   SOMLINK somTP_BOA_dispose(BOA *somSelf, Environment *ev,
		SOMDObject* obj);
typedef somTP_BOA_dispose *somTD_BOA_dispose;
typedef ReferenceData   SOMLINK somTP_BOA_get_id(BOA *somSelf, Environment *ev,
		SOMDObject* obj);
typedef somTP_BOA_get_id *somTD_BOA_get_id;
typedef Principal*   SOMLINK somTP_BOA_get_principal(BOA *somSelf, Environment *ev,
		SOMDObject* obj,
		Environment* req_ev);
typedef somTP_BOA_get_principal *somTD_BOA_get_principal;
typedef void   SOMLINK somTP_BOA_set_exception(BOA *somSelf, Environment *ev,
		exception_type major,
		string userid,
		void* param);
typedef somTP_BOA_set_exception *somTD_BOA_set_exception;
typedef void   SOMLINK somTP_BOA_impl_is_ready(BOA *somSelf, Environment *ev,
		ImplementationDef* impl);
typedef somTP_BOA_impl_is_ready *somTD_BOA_impl_is_ready;
typedef void   SOMLINK somTP_BOA_deactivate_impl(BOA *somSelf, Environment *ev,
		ImplementationDef* impl);
typedef somTP_BOA_deactivate_impl *somTD_BOA_deactivate_impl;
typedef void   SOMLINK somTP_BOA_change_implementation(BOA *somSelf, Environment *ev,
		SOMDObject* obj,
		ImplementationDef* impl);
typedef somTP_BOA_change_implementation *somTD_BOA_change_implementation;
typedef void   SOMLINK somTP_BOA_obj_is_ready(BOA *somSelf, Environment *ev,
		SOMDObject* obj,
		ImplementationDef* impl);
typedef somTP_BOA_obj_is_ready *somTD_BOA_obj_is_ready;
typedef void   SOMLINK somTP_BOA_deactivate_obj(BOA *somSelf, Environment *ev,
		SOMDObject* obj);
typedef somTP_BOA_deactivate_obj *somTD_BOA_deactivate_obj;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef SOMMSingleInstance*   SOMLINK somTP_BOA_somGetClass(BOA *somSelf);
typedef somTP_BOA_somGetClass *somTD_BOA_somGetClass;
}

#endif /* BOA_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for BOA
 */
class BOA : public SOMObject
{
public:

// BOA::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_BOA) BOANewClass(BOA_MajorVersion,BOA_MinorVersion);
   return (void*)
      SOM_Resolve(_BOA,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_BOA));
}

// BOA::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

BOA()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (BOACClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

BOA(BOA* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (BOACClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

BOA(const BOA* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (BOACClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: create */
SOMDObject*   create(Environment *ev,
		ReferenceData* id,
		InterfaceDef* intf,
		ImplementationDef* impl)
{
   return SOM_ResolveD(this,BOA,BOA,create)
	(this, ev,id,intf,impl);
}


/* method: dispose */
void   dispose(Environment *ev,
		SOMDObject* obj)
{
   SOM_ResolveD(this,BOA,BOA,dispose)
	(this, ev,obj);
}


/* method: get_id */
ReferenceData   get_id(Environment *ev,
		SOMDObject* obj)
{
   return SOM_ResolveD(this,BOA,BOA,get_id)
	(this, ev,obj);
}


/* method: get_principal */
Principal*   get_principal(Environment *ev,
		SOMDObject* obj,
		Environment* req_ev)
{
   return SOM_ResolveD(this,BOA,BOA,get_principal)
	(this, ev,obj,req_ev);
}


/* method: set_exception */
void   set_exception(Environment *ev,
		exception_type major,
		string userid,
		void* param)
{
   SOM_ResolveD(this,BOA,BOA,set_exception)
	(this, ev,major,userid,param);
}


/* method: impl_is_ready */
void   impl_is_ready(Environment *ev,
		ImplementationDef* impl)
{
   SOM_ResolveD(this,BOA,BOA,impl_is_ready)
	(this, ev,impl);
}


/* method: deactivate_impl */
void   deactivate_impl(Environment *ev,
		ImplementationDef* impl)
{
   SOM_ResolveD(this,BOA,BOA,deactivate_impl)
	(this, ev,impl);
}


/* method: change_implementation */
void   change_implementation(Environment *ev,
		SOMDObject* obj,
		ImplementationDef* impl)
{
   SOM_ResolveD(this,BOA,BOA,change_implementation)
	(this, ev,obj,impl);
}


/* method: obj_is_ready */
void   obj_is_ready(Environment *ev,
		SOMDObject* obj,
		ImplementationDef* impl)
{
   SOM_ResolveD(this,BOA,BOA,obj_is_ready)
	(this, ev,obj,impl);
}


/* method: deactivate_obj */
void   deactivate_obj(Environment *ev,
		SOMDObject* obj)
{
   SOM_ResolveD(this,BOA,BOA,deactivate_obj)
	(this, ev,obj);
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
SOMMSingleInstance*  somGetClass()
{
   return SOM_ResolveD(this,BOA,SOMObject,somGetClass)
	(this);
}



};   /* BOA */



#endif       /* SOM_BOA_xh */
