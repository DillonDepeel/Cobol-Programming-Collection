
/*
 * This file was generated by the SOM Compiler.
 * FileName: c:\somtk\include\sinkev.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.7
 *     SOM Emitter emitxh: 2.42
 */

/*
 * 
 *    COMPONENT_NAME: somu
 * 
 *    ORIGINS: 27
 * 
 * 
 *    10H9767, 10H9769  (C) COPYRIGHT International Business Machines Corp. 1992,1994
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 */


#ifndef SOM_SOMESinkEvent_xh
#define SOM_SOMESinkEvent_xh

class SOMESinkEvent;

/*
 *  SOMESinkEvent is the class for generic sink events within the Event Manager.
 *  This class should be queried for events of the following type(s):
 *       EMSinkEvent (for files, pipes, and sockets)
 *       EMMsgQEvent (for AIX message queues)
 * 
 *  On AIX, an instance of this class is created, initialized and passed to the
 *  callback routine  for events (input/output/exception) associated with files,
 *  sockets, pipes and Message Queues. On OS/2, the same is done for sockets only.
 */

#define SOMESinkEvent_MajorVersion 2
#define SOMESinkEvent_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMEEvent_xh
#include <event.xh>
#endif

#ifndef SOMESinkEvent_API
#define SOMESinkEvent_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;

/*
 * End of user-defined types.
 */

/* A procedure to create the SOMESinkEvent Class */
SOMEXTERN SOMClass * SOMLINK SOMESinkEventNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the SOMESinkEvent class object, and the methods it introduces. */
SOMEXTERN struct SOMESinkEventClassDataStructure {
	SOMClass *classObject;
	somMToken somevGetEventSink;
	somMToken somevSetEventSink;
} SOMDLINK SOMESinkEventClassData;
#define _SOMESinkEvent SOMESinkEventClassData.classObject

/* The API to parentMtabs for SOMESinkEvent, and the instance data it introduces. */
SOMEXTERN struct SOMESinkEventCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK SOMESinkEventCClassData;

/*
 * -- Typedefs for SOMESinkEvent Method Procedures
 */
SOMEXTERN {
typedef long   SOMLINK somTP_SOMESinkEvent_somevGetEventSink(SOMESinkEvent *somSelf, Environment *ev);
typedef somTP_SOMESinkEvent_somevGetEventSink *somTD_SOMESinkEvent_somevGetEventSink;
typedef void   SOMLINK somTP_SOMESinkEvent_somevSetEventSink(SOMESinkEvent *somSelf, Environment *ev,
		long sink);
typedef somTP_SOMESinkEvent_somevSetEventSink *somTD_SOMESinkEvent_somevSetEventSink;
}

#endif /* SOMESinkEvent_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for SOMESinkEvent
 */
class SOMESinkEvent : public SOMEEvent
{
public:

// SOMESinkEvent::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_SOMESinkEvent) SOMESinkEventNewClass(SOMESinkEvent_MajorVersion,SOMESinkEvent_MinorVersion);
   return (void*)
      SOM_Resolve(_SOMESinkEvent,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_SOMESinkEvent));
}

// SOMESinkEvent::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

SOMESinkEvent()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMESinkEventCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

SOMESinkEvent(SOMESinkEvent* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMESinkEventCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

SOMESinkEvent(const SOMESinkEvent* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMESinkEventCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: somevGetEventSink */
long   somevGetEventSink(Environment *ev)
{
   return SOM_ResolveD(this,SOMESinkEvent,SOMESinkEvent,somevGetEventSink)
	(this, ev);
}


/* method: somevSetEventSink */
void   somevSetEventSink(Environment *ev,
		long sink)
{
   SOM_ResolveD(this,SOMESinkEvent,SOMESinkEvent,somevSetEventSink)
	(this, ev,sink);
}



};   /* SOMESinkEvent */



#endif       /* SOM_SOMESinkEvent_xh */
