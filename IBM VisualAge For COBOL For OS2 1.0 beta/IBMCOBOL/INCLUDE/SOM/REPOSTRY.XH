
/*
 * This file was generated by the SOM Compiler.
 * FileName: c:\somtk\include\repostry.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.7
 *     SOM Emitter emitxh: 2.42
 */

/*
 * 
 *    COMPONENT_NAME: somi
 * 
 *    ORIGINS: 27
 * 
 * 
 *    10H9767, 10H9769  (C) COPYRIGHT International Business Machines Corp. 1992,1994
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 *   Repository: CORBA Interface for access to repository objects
 *   See CORBA 7.5.2, pp.132-133
 */


#ifndef SOM_Repository_xh
#define SOM_Repository_xh

class Repository;

#define Repository_MajorVersion 2
#define Repository_MinorVersion 1

/*
 * Passthru lines: File: "C.xh", "before"
 */

    #include <stdio.h>
    #include <somtcnst.xh>
    #include <somir.xh>
    #include <containd.xh>


/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_Container_xh
#include <containr.xh>
#endif

#ifndef Repository_API
#define Repository_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;
class Contained;
typedef
struct RepositoryDescription {
Identifier name;
string  id;
string  defined_in;
} RepositoryDescription;

/*
 *  The inherited describe_contents method returns an instance
 *  of this (RepositoryDescription) structure in the value
 *  member of the Description structure defined in the Container
 *  interface.
 */
typedef unsigned long irOpenErrorCodes;
#define Repository_NOACCESS 1UL
#define Repository_BADMAGICNUMBER 2UL
#define Repository_MISSINGVERSIONINFO 3UL
#define Repository_IOERROR 4UL
#define Repository_VERSIONMISMATCH 5UL
#define ex_irOpenError "::Repository::irOpenError"
typedef
struct irOpenError {
irOpenErrorCodes errorCode;
string  fileName;
} irOpenError;

/*
 *  The irOpenError and associated irOpenErrorCodes are a
 *  SOM-unique extension to the Interface Repository.  These
 *  errors may be raised by the somNew when instantiating the
 *  Repository object and can be found in the SOM global
 *  Environment.
 */

/*
 * End of user-defined types.
 */

/* A procedure to create the Repository Class */
SOMEXTERN SOMClass * SOMLINK RepositoryNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the Repository class object, and the methods it introduces. */
SOMEXTERN struct RepositoryClassDataStructure {
	SOMClass *classObject;
	somMToken lookup_id;
	somMToken lookup_modifier;
	somMToken release_cache;
} SOMDLINK RepositoryClassData;
#define _Repository RepositoryClassData.classObject

/* The API to parentMtabs for Repository, and the instance data it introduces. */
SOMEXTERN struct RepositoryCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK RepositoryCClassData;

/*
 * -- Typedefs for Repository Method Procedures
 */
SOMEXTERN {
typedef Contained*   SOMLINK somTP_Repository_lookup_id(Repository *somSelf, Environment *ev,
		string search_id);
typedef somTP_Repository_lookup_id *somTD_Repository_lookup_id;
typedef string   SOMLINK somTP_Repository_lookup_modifier(Repository *somSelf, Environment *ev,
		string name,
		string modifier);
typedef somTP_Repository_lookup_modifier *somTD_Repository_lookup_modifier;
typedef void   SOMLINK somTP_Repository_release_cache(Repository *somSelf, Environment *ev);
typedef somTP_Repository_release_cache *somTD_Repository_release_cache;
}

#endif /* Repository_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for Repository
 */
class Repository : public Container
{
public:

// Repository::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_Repository) RepositoryNewClass(Repository_MajorVersion,Repository_MinorVersion);
   return (void*)
      SOM_Resolve(_Repository,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_Repository));
}

// Repository::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

Repository()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (RepositoryCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

Repository(Repository* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (RepositoryCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

Repository(const Repository* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (RepositoryCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: lookup_id */
Contained*   lookup_id(Environment *ev,
		string search_id)
{
   return SOM_ResolveD(this,Repository,Repository,lookup_id)
	(this, ev,search_id);
}


/* method: lookup_modifier */
string   lookup_modifier(Environment *ev,
		string name,
		string modifier)
{
   return SOM_ResolveD(this,Repository,Repository,lookup_modifier)
	(this, ev,name,modifier);
}


/* method: release_cache */
void   release_cache(Environment *ev)
{
   SOM_ResolveD(this,Repository,Repository,release_cache)
	(this, ev);
}



};   /* Repository */



#endif       /* SOM_Repository_xh */
