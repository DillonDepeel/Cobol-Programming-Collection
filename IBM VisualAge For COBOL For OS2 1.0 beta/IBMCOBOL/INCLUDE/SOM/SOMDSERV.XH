
/*
 * This file was generated by the SOM Compiler.
 * FileName: c:\somtk\include\SOMDSERV.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.7
 *     SOM Emitter emitxh: 2.42
 */

/*
 * 
 *    COMPONENT_NAME: somd
 * 
 *    ORIGINS: 27
 * 
 * 
 *    10H9767, 10H9769  (C) COPYRIGHT International Business Machines Corp. 1992,1994
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 *    Interface for DSOM Server Objects
 * 
 *    This class defines and implements the behavior of DSOM Server objects
 *    used with the DSOM Object Manager (SOMDObjectMgr).
 * 
 *    Each DSOM server process is defined to have a (single instance of a)
 *    SOMDServer object.  The SOMDServer object performs three kinds of
 *    functions:
 * 
 *        1) creation of SOM objects
 *        2) mapping of application-defined object ids into DSOM object
 *           "references" (SOMDObjects), and back again
 *        3) any application-specific server methods (e.g., for initialization,
 *           server control, etc.)
 * 
 *    The SOMDServer class defines methods for the basic creation of SOM
 *    objects in the server process (somdCreateObj), for deletion of SOM
 *    objects (somdDeleteObj), and for finding the SOM  class object for a
 *    specified class (somdGetClassObj).
 *    With somdGetClassObj, a client can get a proxy to a class object on the
 *    server, so that methods introduced in the metaclass (e.g., class-specific
 *    constructors, etc.) may be invoked directly.
 * 
 *    This class also defines methods for the mappings to and from SOMDObjects
 *    and back again.  (Note: SOMDObject implements a CORBA "object reference"
 *    in DSOM.  An object reference is something that is used to describe and
 *    locate an actual target object.)  These methods are used by the SOM
 *    Object Adapter (SOMOA) when converting messages into method calls
 *    and results into messages.
 * 
 *    Application-specific server methods should be defined in subclasses
 *    of this SOMDServer subclass.
 * 
 *    A particular SOMDServer subclass is specified in the ImplementationDef
 *    for each server process.  The SOMOA will instantiate one instance
 *    of the specified SOMDServer subclass during server process initialization
 *    (in SOMOA::impl_is_ready).
 * 
 */


#ifndef SOM_SOMDServer_xh
#define SOM_SOMDServer_xh

class SOMDServer;

#define SOMDServer_MajorVersion 2
#define SOMDServer_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

/*
 * C++ metaclass def
 */
#include <snglicls.xh>

#ifndef SOMDServer_API
#define SOMDServer_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;
class Container;
class SOMDObject;

/*
 * End of user-defined types.
 */

/*
 * Passthru lines: File: "C.xh", "after"
 */

class SOMDServer;
SOMEXTERN SOMDServer * SOMDLINK SOMD_ServerObject; /* global variable */


/* A procedure to create the SOMDServer Class */
class SOMMSingleInstance;
SOMEXTERN SOMMSingleInstance * SOMLINK SOMDServerNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the SOMDServer class object, and the methods it introduces. */
SOMEXTERN struct SOMDServerClassDataStructure {
	SOMMSingleInstance *classObject;
	somMToken somdSOMObjFromRef;
	somMToken somdRefFromSOMObj;
	somMToken somdCreateObj;
	somMToken somdDeleteObj;
	somMToken somdGetClassObj;
	somMToken somdDispatchMethod;
	somMToken somdObjReferencesCached;
} SOMDLINK SOMDServerClassData;
#define _SOMDServer SOMDServerClassData.classObject

/* The API to parentMtabs for SOMDServer, and the instance data it introduces. */
SOMEXTERN struct SOMDServerCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK SOMDServerCClassData;

/*
 * -- Typedefs for SOMDServer Method Procedures
 */
SOMEXTERN {
typedef SOMDObject*   SOMLINK somTP_SOMDServer_somdRefFromSOMObj(SOMDServer *somSelf, Environment *ev,
		SOMObject* somobj);
typedef somTP_SOMDServer_somdRefFromSOMObj *somTD_SOMDServer_somdRefFromSOMObj;
typedef SOMObject*   SOMLINK somTP_SOMDServer_somdSOMObjFromRef(SOMDServer *somSelf, Environment *ev,
		SOMDObject* objref);
typedef somTP_SOMDServer_somdSOMObjFromRef *somTD_SOMDServer_somdSOMObjFromRef;
typedef void   SOMLINK somTP_SOMDServer_somdDispatchMethod(SOMDServer *somSelf, Environment *ev,
		SOMObject* somobj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef somTP_SOMDServer_somdDispatchMethod *somTD_SOMDServer_somdDispatchMethod;
typedef SOMObject*   SOMLINK somTP_SOMDServer_somdCreateObj(SOMDServer *somSelf, Environment *ev,
		Identifier objclass,
		string hints);
typedef somTP_SOMDServer_somdCreateObj *somTD_SOMDServer_somdCreateObj;
typedef void   SOMLINK somTP_SOMDServer_somdDeleteObj(SOMDServer *somSelf, Environment *ev,
		SOMObject* somobj);
typedef somTP_SOMDServer_somdDeleteObj *somTD_SOMDServer_somdDeleteObj;
typedef SOMClass*   SOMLINK somTP_SOMDServer_somdGetClassObj(SOMDServer *somSelf, Environment *ev,
		Identifier objclass);
typedef somTP_SOMDServer_somdGetClassObj *somTD_SOMDServer_somdGetClassObj;
typedef boolean   SOMLINK somTP_SOMDServer_somdObjReferencesCached(SOMDServer *somSelf, Environment *ev);
typedef somTP_SOMDServer_somdObjReferencesCached *somTD_SOMDServer_somdObjReferencesCached;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef SOMMSingleInstance*   SOMLINK somTP_SOMDServer_somGetClass(SOMDServer *somSelf);
typedef somTP_SOMDServer_somGetClass *somTD_SOMDServer_somGetClass;
}

#endif /* SOMDServer_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for SOMDServer
 */
class SOMDServer : public SOMObject
{
public:

// SOMDServer::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_SOMDServer) SOMDServerNewClass(SOMDServer_MajorVersion,SOMDServer_MinorVersion);
   return (void*)
      SOM_Resolve(_SOMDServer,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_SOMDServer));
}

// SOMDServer::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

SOMDServer()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMDServerCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

SOMDServer(SOMDServer* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMDServerCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

SOMDServer(const SOMDServer* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMDServerCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: somdRefFromSOMObj */
SOMDObject*   somdRefFromSOMObj(Environment *ev,
		SOMObject* somobj)
{
   return SOM_ResolveD(this,SOMDServer,SOMDServer,somdRefFromSOMObj)
	(this, ev,somobj);
}


/* method: somdSOMObjFromRef */
SOMObject*   somdSOMObjFromRef(Environment *ev,
		SOMDObject* objref)
{
   return SOM_ResolveD(this,SOMDServer,SOMDServer,somdSOMObjFromRef)
	(this, ev,objref);
}


/* va_list method: somdDispatchMethod */
/* the va_list invocation form */
void   SOMDServer_somdDispatchMethod(Environment *ev,
		SOMObject* somobj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
   SOM_ResolveD(this,SOMDServer,SOMDServer,somdDispatchMethod)
	(this, ev,somobj,retValue,methodId,ap);
}

/* the varargs invocation form */
void   somdDispatchMethod(Environment *ev,
		SOMObject* somobj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   SOM_ResolveD(this,SOMDServer,SOMDServer,somdDispatchMethod)
	(this, ev,somobj,retValue,methodId,ap);
   va_end(ap);
}


/* method: somdCreateObj */
SOMObject*   somdCreateObj(Environment *ev,
		Identifier objclass,
		string hints)
{
   return SOM_ResolveD(this,SOMDServer,SOMDServer,somdCreateObj)
	(this, ev,objclass,hints);
}


/* method: somdDeleteObj */
void   somdDeleteObj(Environment *ev,
		SOMObject* somobj)
{
   SOM_ResolveD(this,SOMDServer,SOMDServer,somdDeleteObj)
	(this, ev,somobj);
}


/* method: somdGetClassObj */
SOMClass*   somdGetClassObj(Environment *ev,
		Identifier objclass)
{
   return SOM_ResolveD(this,SOMDServer,SOMDServer,somdGetClassObj)
	(this, ev,objclass);
}


/* method: somdObjReferencesCached */
boolean   somdObjReferencesCached(Environment *ev)
{
   return SOM_ResolveD(this,SOMDServer,SOMDServer,somdObjReferencesCached)
	(this, ev);
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
SOMMSingleInstance*  somGetClass()
{
   return SOM_ResolveD(this,SOMDServer,SOMObject,somGetClass)
	(this);
}



};   /* SOMDServer */



#endif       /* SOM_SOMDServer_xh */
