
/*
 * This file was generated by the SOM Compiler.
 * FileName: c:\somtk\include\ORB.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.7
 *     SOM Emitter emitxh: 2.42
 */

/*
 * 
 *    COMPONENT_NAME: somd
 * 
 *    ORIGINS: 27
 * 
 * 
 *    10H9767, 10H9769  (C) COPYRIGHT International Business Machines Corp. 1992,1994
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 *    Interface for ORB pseudo-object, from CORBA document (8.1).
 */


#ifndef SOM_ORB_xh
#define SOM_ORB_xh

class ORB;

#define ORB_MajorVersion 2
#define ORB_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

/*
 * C++ metaclass def
 */
#include <snglicls.xh>

#ifndef ORB_API
#define ORB_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;
class Container;
class OperationDef;
class SOMDObject;
class NVList;
class Context;

/*
 * End of user-defined types.
 */

/*
 * Passthru lines: File: "C.xh", "after"
 */

class ORB;
SOMEXTERN ORB * SOMD_ORBObject;

#include <somdobj.xh>


/* A procedure to create the ORB Class */
class SOMMSingleInstance;
SOMEXTERN SOMMSingleInstance * SOMLINK ORBNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the ORB class object, and the methods it introduces. */
SOMEXTERN struct ORBClassDataStructure {
	SOMMSingleInstance *classObject;
	somMToken object_to_string;
	somMToken string_to_object;
	somMToken create_list;
	somMToken create_operation_list;
	somMToken get_default_context;
	somMToken object_to_binary;
	somMToken binary_to_object;
} SOMDLINK ORBClassData;
#define _ORB ORBClassData.classObject

/* The API to parentMtabs for ORB, and the instance data it introduces. */
SOMEXTERN struct ORBCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK ORBCClassData;

/*
 * -- Typedefs for ORB Method Procedures
 */
SOMEXTERN {
typedef string   SOMLINK somTP_ORB_object_to_string(ORB *somSelf, Environment *ev,
		SOMDObject* obj);
typedef somTP_ORB_object_to_string *somTD_ORB_object_to_string;
typedef SOMDObject*   SOMLINK somTP_ORB_string_to_object(ORB *somSelf, Environment *ev,
		string str);
typedef somTP_ORB_string_to_object *somTD_ORB_string_to_object;
typedef ORBStatus   SOMLINK somTP_ORB_create_list(ORB *somSelf, Environment *ev,
		long count,
		NVList** new_list);
typedef somTP_ORB_create_list *somTD_ORB_create_list;
typedef ORBStatus   SOMLINK somTP_ORB_create_operation_list(ORB *somSelf, Environment *ev,
		OperationDef* oper,
		NVList** new_list);
typedef somTP_ORB_create_operation_list *somTD_ORB_create_operation_list;
typedef ORBStatus   SOMLINK somTP_ORB_get_default_context(ORB *somSelf, Environment *ev,
		Context** ctx);
typedef somTP_ORB_get_default_context *somTD_ORB_get_default_context;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef SOMMSingleInstance*   SOMLINK somTP_ORB_somGetClass(ORB *somSelf);
typedef somTP_ORB_somGetClass *somTD_ORB_somGetClass;
}

#endif /* ORB_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for ORB
 */
class ORB : public SOMObject
{
public:

// ORB::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_ORB) ORBNewClass(ORB_MajorVersion,ORB_MinorVersion);
   return (void*)
      SOM_Resolve(_ORB,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_ORB));
}

// ORB::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

ORB()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ORBCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

ORB(ORB* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ORBCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

ORB(const ORB* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ORBCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: object_to_string */
string   object_to_string(Environment *ev,
		SOMDObject* obj)
{
   return SOM_ResolveD(this,ORB,ORB,object_to_string)
	(this, ev,obj);
}


/* method: string_to_object */
SOMDObject*   string_to_object(Environment *ev,
		string str)
{
   return SOM_ResolveD(this,ORB,ORB,string_to_object)
	(this, ev,str);
}


/* method: create_list */
ORBStatus   create_list(Environment *ev,
		long count,
		NVList** new_list)
{
   return SOM_ResolveD(this,ORB,ORB,create_list)
	(this, ev,count,new_list);
}


/* method: create_operation_list */
ORBStatus   create_operation_list(Environment *ev,
		OperationDef* oper,
		NVList** new_list)
{
   return SOM_ResolveD(this,ORB,ORB,create_operation_list)
	(this, ev,oper,new_list);
}


/* method: get_default_context */
ORBStatus   get_default_context(Environment *ev,
		Context** ctx)
{
   return SOM_ResolveD(this,ORB,ORB,get_default_context)
	(this, ev,ctx);
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
SOMMSingleInstance*  somGetClass()
{
   return SOM_ResolveD(this,ORB,SOMObject,somGetClass)
	(this);
}



};   /* ORB */



#endif       /* SOM_ORB_xh */
