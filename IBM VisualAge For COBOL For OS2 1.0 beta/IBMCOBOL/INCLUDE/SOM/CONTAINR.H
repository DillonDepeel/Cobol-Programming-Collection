
/*
 * This file was generated by the SOM Compiler.
 * FileName: containr.h.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.7
 *     SOM Emitter emith: 2.42
 */

/*
 * 
 *    COMPONENT_NAME: somi
 * 
 *    ORIGINS: 27
 * 
 * 
 *    10H9767, 10H9769  (C) COPYRIGHT International Business Machines Corp. 1992,1994
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 *   Container: CORBA Interface for container objects
 */


#ifndef SOM_Container_h
#define SOM_Container_h


/*
 * Passthru lines: File: "C.h", "before"
 */

    #include <somtcnst.h>
    #include <stdio.h>
    #include <somir.h>
    #include <containd.h>


#include <som.h>

/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * Define the class name as an object type
 */
#ifndef Container
#define Container SOMObject
#endif
#include <somobj.h>

/*
 * Start of user-defined types:
 */
#ifndef SOMClass
    #define SOMClass SOMObject
#endif /* SOMClass */
#ifndef Contained
    #define Contained SOMObject
#endif /* Contained */
typedef
string  InterfaceName;

/*
 * 
 *  Valid values for InterfaceName are limited to the following set:
 * 	 {"AttributeDef", "ConstantDef", "ExceptionDef", "InterfaceDef",
 * 	  "ModuleDef", "ParameterDef", "OperationDef", "TypeDef", "all"}
 */
typedef
struct ContainerDescription {
Contained* contained_object;
Identifier name;
any  value;
} ContainerDescription;
#ifndef _IDL_SEQUENCE_Contained_defined
#define _IDL_SEQUENCE_Contained_defined
typedef struct {
    unsigned long _maximum;
    unsigned long _length;
    Contained **_buffer;
} _IDL_SEQUENCE_Contained;
#endif /* _IDL_SEQUENCE_Contained_defined */ 
struct ContainerDescription;
#ifndef _IDL_SEQUENCE_ContainerDescription_defined
#define _IDL_SEQUENCE_ContainerDescription_defined
typedef struct {
    unsigned long _maximum;
    unsigned long _length;
    struct ContainerDescription *_buffer;
} _IDL_SEQUENCE_ContainerDescription;
#endif /* _IDL_SEQUENCE_ContainerDescription_defined */ 

/*
 * End of user-defined types.
 */

#define Container_MajorVersion 2
#define Container_MinorVersion 1

/*
 * External name shortening if required
 */
#ifdef SOM_USE_SHORT_EXTERNAL_NAMES
#define ContainerNewClass c
#pragma linkage(c, system)
#define ContainerClassData d
#define ContainerCClassData x
#endif /* SOM_USE_SHORT_EXTERNAL_NAMES */
/*--------------Migration------------*/
#define Container_classObj ContainerClassData.classObject
#define _Container Container_classObj

/*
 * Declare the class creation procedure
 */
SOMEXTERN SOMClass * SOMLINK ContainerNewClass(integer4 somtmajorVersion,
		integer4 somtminorVersion);
#pragma linkage(ContainerNewClass, system)

/*
 * Declare the class data structure
 */
SOMEXTERN struct ContainerClassDataStructure {
	SOMClass *classObject;
	somMToken contents;
	somMToken lookup_name;
	somMToken describe_contents;
} SOMDLINK ContainerClassData;

/*
 * Declare the C specific class data structure
 */
SOMEXTERN struct ContainerCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken instanceDataToken;
} SOMDLINK ContainerCClassData;

/*
 * New and Renew macros for Container
 */
#define ContainerNew() \
   (_somNew(_Container ? _Container : ContainerNewClass(Container_MajorVersion, Container_MinorVersion)))
#define ContainerRenew(buf) \
   (_somRenew(_Container ? _Container : ContainerNewClass(Container_MajorVersion, Container_MinorVersion), buf))

/*
 * Override method: somInit
 */
#define Container_somInit(somSelf) \
	SOMObject_somInit(somSelf)

/*
 * Override method: somUninit
 */
#define Container_somUninit(somSelf) \
	SOMObject_somUninit(somSelf)

/*
 * Override method: somDumpSelf
 */
#define Container_somDumpSelf(somSelf,level) \
	SOMObject_somDumpSelf(somSelf,level)

/*
 * Override method: somDumpSelfInt
 */
#define Container_somDumpSelfInt(somSelf,level) \
	SOMObject_somDumpSelfInt(somSelf,level)

/*
 * New Method: contents
 */
typedef _IDL_SEQUENCE_Contained   SOMLINK somTP_Container_contents(Container *somSelf, Environment *ev,
		InterfaceName limit_type,
		boolean exclude_inherited);
#pragma linkage(somTP_Container_contents, system)
typedef somTP_Container_contents *somTD_Container_contents;
#define somMD_Container_contents "::Container::contents"
#define Container_contents(somSelf,ev,limit_type,exclude_inherited) \
    (SOM_Resolve(somSelf, Container, contents) \
	(somSelf,ev,limit_type,exclude_inherited))
#ifndef SOMGD_contents
    #if (defined(_contents) || defined(__contents))
        #undef _contents
        #undef __contents
        #define SOMGD_contents 1
    #else
        #define _contents Container_contents
    #endif /* _contents */
#endif /* SOMGD_contents */

/*
 * New Method: lookup_name
 */
typedef _IDL_SEQUENCE_Contained   SOMLINK somTP_Container_lookup_name(Container *somSelf, Environment *ev,
		Identifier search_name,
		long levels_to_search,
		InterfaceName limit_type,
		boolean exclude_inherited);
#pragma linkage(somTP_Container_lookup_name, system)
typedef somTP_Container_lookup_name *somTD_Container_lookup_name;
#define somMD_Container_lookup_name "::Container::lookup_name"
#define Container_lookup_name(somSelf,ev,search_name,levels_to_search,limit_type,exclude_inherited) \
    (SOM_Resolve(somSelf, Container, lookup_name) \
	(somSelf,ev,search_name,levels_to_search,limit_type,exclude_inherited))
#ifndef SOMGD_lookup_name
    #if (defined(_lookup_name) || defined(__lookup_name))
        #undef _lookup_name
        #undef __lookup_name
        #define SOMGD_lookup_name 1
    #else
        #define _lookup_name Container_lookup_name
    #endif /* _lookup_name */
#endif /* SOMGD_lookup_name */

/*
 * New Method: describe_contents
 */
typedef _IDL_SEQUENCE_ContainerDescription   SOMLINK somTP_Container_describe_contents(Container *somSelf, Environment *ev,
		InterfaceName limit_type,
		boolean exclude_inherited,
		long max_returned_objs);
#pragma linkage(somTP_Container_describe_contents, system)
typedef somTP_Container_describe_contents *somTD_Container_describe_contents;
#define somMD_Container_describe_contents "::Container::describe_contents"
#define Container_describe_contents(somSelf,ev,limit_type,exclude_inherited,max_returned_objs) \
    (SOM_Resolve(somSelf, Container, describe_contents) \
	(somSelf,ev,limit_type,exclude_inherited,max_returned_objs))
#ifndef SOMGD_describe_contents
    #if (defined(_describe_contents) || defined(__describe_contents))
        #undef _describe_contents
        #undef __describe_contents
        #define SOMGD_describe_contents 1
    #else
        #define _describe_contents Container_describe_contents
    #endif /* _describe_contents */
#endif /* SOMGD_describe_contents */
#ifndef SOM_DONT_USE_INHERITED_MACROS
#define Container_somDefaultInit SOMObject_somDefaultInit
#define Container_somDestruct SOMObject_somDestruct
#define Container_somDefaultCopyInit SOMObject_somDefaultCopyInit
#define Container_somDefaultAssign SOMObject_somDefaultAssign
#define Container_somDefaultConstCopyInit SOMObject_somDefaultConstCopyInit
#define Container_somDefaultVCopyInit SOMObject_somDefaultVCopyInit
#define Container_somDefaultConstVCopyInit SOMObject_somDefaultConstVCopyInit
#define Container_somDefaultConstAssign SOMObject_somDefaultConstAssign
#define Container_somDefaultVAssign SOMObject_somDefaultVAssign
#define Container_somDefaultConstVAssign SOMObject_somDefaultConstVAssign
#define Container_somFree SOMObject_somFree
#define Container_somGetClass SOMObject_somGetClass
#define Container_somGetClassName SOMObject_somGetClassName
#define Container_somGetSize SOMObject_somGetSize
#define Container_somIsA SOMObject_somIsA
#define Container_somIsInstanceOf SOMObject_somIsInstanceOf
#define Container_somRespondsTo SOMObject_somRespondsTo
#define Container_somDispatch SOMObject_somDispatch
#define Container_somClassDispatch SOMObject_somClassDispatch
#define Container_somCastObj SOMObject_somCastObj
#define Container_somResetObj SOMObject_somResetObj
#define Container_somDispatchV SOMObject_somDispatchV
#define Container_somDispatchL SOMObject_somDispatchL
#define Container_somDispatchA SOMObject_somDispatchA
#define Container_somDispatchD SOMObject_somDispatchD
#define Container_somPrintSelf SOMObject_somPrintSelf
#endif /* SOM_DONT_USE_INHERITED_MACROS */

#endif       /* SOM_Container_h */
