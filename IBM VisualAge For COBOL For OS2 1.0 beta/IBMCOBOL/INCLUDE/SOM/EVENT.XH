
/*
 * This file was generated by the SOM Compiler.
 * FileName: c:\somtk\include\event.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.7
 *     SOM Emitter emitxh: 2.42
 */

/*
 * 
 *    COMPONENT_NAME: somu
 * 
 *    ORIGINS: 27
 * 
 * 
 *    10H9767, 10H9769  (C) COPYRIGHT International Business Machines Corp. 1992,1994
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 */


#ifndef SOM_SOMEEvent_xh
#define SOM_SOMEEvent_xh

class SOMEEvent;

/*
 *  SOMEEvent is the base class for all generic events within the Event Manager.
 *  It simply timestamps an event before it is passed to a callback routine.
 *  The event type is set to the true type by a subclass. The types currently used
 *  by the event management framework are defined in eventmsk.h.
 *  An subclassing of this class must avoid name and value collisions with eventmsk.h
 */

#define SOMEEvent_MajorVersion 2
#define SOMEEvent_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef SOMEEvent_API
#define SOMEEvent_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;

/*
 * End of user-defined types.
 */

/* A procedure to create the SOMEEvent Class */
SOMEXTERN SOMClass * SOMLINK SOMEEventNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the SOMEEvent class object, and the methods it introduces. */
SOMEXTERN struct SOMEEventClassDataStructure {
	SOMClass *classObject;
	somMToken somevGetEventTime;
	somMToken somevGetEventType;
	somMToken somevSetEventTime;
	somMToken somevSetEventType;
} SOMDLINK SOMEEventClassData;
#define _SOMEEvent SOMEEventClassData.classObject

/* The API to parentMtabs for SOMEEvent, and the instance data it introduces. */
SOMEXTERN struct SOMEEventCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK SOMEEventCClassData;

/*
 * -- Typedefs for SOMEEvent Method Procedures
 */
SOMEXTERN {
typedef unsigned long   SOMLINK somTP_SOMEEvent_somevGetEventTime(SOMEEvent *somSelf, Environment *ev);
typedef somTP_SOMEEvent_somevGetEventTime *somTD_SOMEEvent_somevGetEventTime;
typedef unsigned long   SOMLINK somTP_SOMEEvent_somevGetEventType(SOMEEvent *somSelf, Environment *ev);
typedef somTP_SOMEEvent_somevGetEventType *somTD_SOMEEvent_somevGetEventType;
typedef void   SOMLINK somTP_SOMEEvent_somevSetEventTime(SOMEEvent *somSelf, Environment *ev,
		unsigned long time);
typedef somTP_SOMEEvent_somevSetEventTime *somTD_SOMEEvent_somevSetEventTime;
typedef void   SOMLINK somTP_SOMEEvent_somevSetEventType(SOMEEvent *somSelf, Environment *ev,
		unsigned long type);
typedef somTP_SOMEEvent_somevSetEventType *somTD_SOMEEvent_somevSetEventType;
}

#endif /* SOMEEvent_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for SOMEEvent
 */
class SOMEEvent : public SOMObject
{
public:

// SOMEEvent::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_SOMEEvent) SOMEEventNewClass(SOMEEvent_MajorVersion,SOMEEvent_MinorVersion);
   return (void*)
      SOM_Resolve(_SOMEEvent,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_SOMEEvent));
}

// SOMEEvent::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

SOMEEvent()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMEEventCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

SOMEEvent(SOMEEvent* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMEEventCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

SOMEEvent(const SOMEEvent* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMEEventCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: somevGetEventTime */
unsigned long   somevGetEventTime(Environment *ev)
{
   return SOM_ResolveD(this,SOMEEvent,SOMEEvent,somevGetEventTime)
	(this, ev);
}


/* method: somevGetEventType */
unsigned long   somevGetEventType(Environment *ev)
{
   return SOM_ResolveD(this,SOMEEvent,SOMEEvent,somevGetEventType)
	(this, ev);
}


/* method: somevSetEventTime */
void   somevSetEventTime(Environment *ev,
		unsigned long time)
{
   SOM_ResolveD(this,SOMEEvent,SOMEEvent,somevSetEventTime)
	(this, ev,time);
}


/* method: somevSetEventType */
void   somevSetEventType(Environment *ev,
		unsigned long type)
{
   SOM_ResolveD(this,SOMEEvent,SOMEEvent,somevSetEventType)
	(this, ev,type);
}



};   /* SOMEEvent */



#endif       /* SOM_SOMEEvent_xh */
