
/*
 * This file was generated by the SOM Compiler.
 * FileName: c:\somtk\include\containr.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.7
 *     SOM Emitter emitxh: 2.42
 */

/*
 * 
 *    COMPONENT_NAME: somi
 * 
 *    ORIGINS: 27
 * 
 * 
 *    10H9767, 10H9769  (C) COPYRIGHT International Business Machines Corp. 1992,1994
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 *   Container: CORBA Interface for container objects
 */


#ifndef SOM_Container_xh
#define SOM_Container_xh

class Container;

#define Container_MajorVersion 2
#define Container_MinorVersion 1

/*
 * Passthru lines: File: "C.xh", "before"
 */

    #include <somtcnst.xh>
    #include <stdio.h>
    #include <somir.xh>
    #include <containd.xh>


/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef Container_API
#define Container_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;
class Contained;
typedef
string  InterfaceName;

/*
 * 
 *  Valid values for InterfaceName are limited to the following set:
 * 	 {"AttributeDef", "ConstantDef", "ExceptionDef", "InterfaceDef",
 * 	  "ModuleDef", "ParameterDef", "OperationDef", "TypeDef", "all"}
 */
typedef
struct ContainerDescription {
Contained* contained_object;
Identifier name;
any  value;
} ContainerDescription;
#ifndef _IDL_SEQUENCE_Contained_defined
#define _IDL_SEQUENCE_Contained_defined
typedef struct {
    unsigned long _maximum;
    unsigned long _length;
    Contained **_buffer;
} _IDL_SEQUENCE_Contained;
#endif /* _IDL_SEQUENCE_Contained_defined */ 
struct ContainerDescription;
#ifndef _IDL_SEQUENCE_ContainerDescription_defined
#define _IDL_SEQUENCE_ContainerDescription_defined
typedef struct {
    unsigned long _maximum;
    unsigned long _length;
    struct ContainerDescription *_buffer;
} _IDL_SEQUENCE_ContainerDescription;
#endif /* _IDL_SEQUENCE_ContainerDescription_defined */ 

/*
 * End of user-defined types.
 */

/* A procedure to create the Container Class */
SOMEXTERN SOMClass * SOMLINK ContainerNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the Container class object, and the methods it introduces. */
SOMEXTERN struct ContainerClassDataStructure {
	SOMClass *classObject;
	somMToken contents;
	somMToken lookup_name;
	somMToken describe_contents;
} SOMDLINK ContainerClassData;
#define _Container ContainerClassData.classObject

/* The API to parentMtabs for Container, and the instance data it introduces. */
SOMEXTERN struct ContainerCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK ContainerCClassData;

/*
 * -- Typedefs for Container Method Procedures
 */
SOMEXTERN {
typedef _IDL_SEQUENCE_Contained   SOMLINK somTP_Container_contents(Container *somSelf, Environment *ev,
		InterfaceName limit_type,
		boolean exclude_inherited);
typedef somTP_Container_contents *somTD_Container_contents;
typedef _IDL_SEQUENCE_Contained   SOMLINK somTP_Container_lookup_name(Container *somSelf, Environment *ev,
		Identifier search_name,
		long levels_to_search,
		InterfaceName limit_type,
		boolean exclude_inherited);
typedef somTP_Container_lookup_name *somTD_Container_lookup_name;
typedef _IDL_SEQUENCE_ContainerDescription   SOMLINK somTP_Container_describe_contents(Container *somSelf, Environment *ev,
		InterfaceName limit_type,
		boolean exclude_inherited,
		long max_returned_objs);
typedef somTP_Container_describe_contents *somTD_Container_describe_contents;
}

#endif /* Container_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for Container
 */
class Container : public SOMObject
{
public:

// Container::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_Container) ContainerNewClass(Container_MajorVersion,Container_MinorVersion);
   return (void*)
      SOM_Resolve(_Container,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_Container));
}

// Container::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

Container()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ContainerCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

Container(Container* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ContainerCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

Container(const Container* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ContainerCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: contents */
_IDL_SEQUENCE_Contained   contents(Environment *ev,
		InterfaceName limit_type,
		boolean exclude_inherited)
{
   return SOM_ResolveD(this,Container,Container,contents)
	(this, ev,limit_type,exclude_inherited);
}


/* method: lookup_name */
_IDL_SEQUENCE_Contained   lookup_name(Environment *ev,
		Identifier search_name,
		long levels_to_search,
		InterfaceName limit_type,
		boolean exclude_inherited)
{
   return SOM_ResolveD(this,Container,Container,lookup_name)
	(this, ev,search_name,levels_to_search,limit_type,exclude_inherited);
}


/* method: describe_contents */
_IDL_SEQUENCE_ContainerDescription   describe_contents(Environment *ev,
		InterfaceName limit_type,
		boolean exclude_inherited,
		long max_returned_objs)
{
   return SOM_ResolveD(this,Container,Container,describe_contents)
	(this, ev,limit_type,exclude_inherited,max_returned_objs);
}



};   /* Container */



#endif       /* SOM_Container_xh */
