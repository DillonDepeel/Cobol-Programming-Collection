
/*
 * This file was generated by the SOM Compiler.
 * FileName: c:\somtk\include\CNTXT.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.7
 *     SOM Emitter emitxh: 2.42
 */

/*
 * 
 *    COMPONENT_NAME: somd
 * 
 *    ORIGINS: 27
 * 
 * 
 *    10H9767, 10H9769  (C) COPYRIGHT International Business Machines Corp. 1992,1994
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 *   IDL specification for CORBA Context Object.
 */


#ifndef SOM_Context_xh
#define SOM_Context_xh

class Context;

#define Context_MajorVersion 2
#define Context_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef Context_API
#define Context_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;
class Container;
class NVList;

/*
 * End of user-defined types.
 */

/*
 * Passthru lines: File: "C.xh", "after"
 */

/*
 * Context flags
 */
#define CTX_DELETE_DESCENDENTS      0x00000200
#define CTX_RESTRICT_SCOPE          0x00000400


/* A procedure to create the Context Class */
SOMEXTERN SOMClass * SOMLINK ContextNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the Context class object, and the methods it introduces. */
SOMEXTERN struct ContextClassDataStructure {
	SOMClass *classObject;
	somMToken set_one_value;
	somMToken set_values;
	somMToken get_values;
	somMToken delete_values;
	somMToken create_child;
	somMToken destroy;
	somMToken _get_context_name;
	somMToken _set_context_name;
	somMToken _get_context_parent;
	somMToken _set_context_parent;
	somMToken _get_properties;
	somMToken _set_properties;
} SOMDLINK ContextClassData;
#define _Context ContextClassData.classObject

/* The API to parentMtabs for Context, and the instance data it introduces. */
SOMEXTERN struct ContextCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK ContextCClassData;

/*
 * -- Typedefs for Context Method Procedures
 */
SOMEXTERN {
typedef ORBStatus   SOMLINK somTP_Context_set_one_value(Context *somSelf, Environment *ev,
		Identifier prop_name,
		string value);
typedef somTP_Context_set_one_value *somTD_Context_set_one_value;
typedef ORBStatus   SOMLINK somTP_Context_set_values(Context *somSelf, Environment *ev,
		NVList* values);
typedef somTP_Context_set_values *somTD_Context_set_values;
typedef ORBStatus   SOMLINK somTP_Context_get_values(Context *somSelf, Environment *ev,
		Identifier start_scope,
		Flags op_flags,
		Identifier prop_name,
		NVList** values);
typedef somTP_Context_get_values *somTD_Context_get_values;
typedef ORBStatus   SOMLINK somTP_Context_delete_values(Context *somSelf, Environment *ev,
		Identifier prop_name);
typedef somTP_Context_delete_values *somTD_Context_delete_values;
typedef ORBStatus   SOMLINK somTP_Context_create_child(Context *somSelf, Environment *ev,
		Identifier ctx_name,
		Context** child_ctx);
typedef somTP_Context_create_child *somTD_Context_create_child;
typedef ORBStatus   SOMLINK somTP_Context_destroy(Context *somSelf, Environment *ev,
		Flags flags);
typedef somTP_Context_destroy *somTD_Context_destroy;
}

#endif /* Context_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for Context
 */
class Context : public SOMObject
{
public:

// Context::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_Context) ContextNewClass(Context_MajorVersion,Context_MinorVersion);
   return (void*)
      SOM_Resolve(_Context,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_Context));
}

// Context::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

Context()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ContextCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

Context(Context* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ContextCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

Context(const Context* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ContextCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: set_one_value */
ORBStatus   set_one_value(Environment *ev,
		Identifier prop_name,
		string value)
{
   return SOM_ResolveD(this,Context,Context,set_one_value)
	(this, ev,prop_name,value);
}


/* method: set_values */
ORBStatus   set_values(Environment *ev,
		NVList* values)
{
   return SOM_ResolveD(this,Context,Context,set_values)
	(this, ev,values);
}


/* method: get_values */
ORBStatus   get_values(Environment *ev,
		Identifier start_scope,
		Flags op_flags,
		Identifier prop_name,
		NVList** values)
{
   return SOM_ResolveD(this,Context,Context,get_values)
	(this, ev,start_scope,op_flags,prop_name,values);
}


/* method: delete_values */
ORBStatus   delete_values(Environment *ev,
		Identifier prop_name)
{
   return SOM_ResolveD(this,Context,Context,delete_values)
	(this, ev,prop_name);
}


/* method: create_child */
ORBStatus   create_child(Environment *ev,
		Identifier ctx_name,
		Context** child_ctx)
{
   return SOM_ResolveD(this,Context,Context,create_child)
	(this, ev,ctx_name,child_ctx);
}


/* method: destroy */
ORBStatus   destroy(Environment *ev,
		Flags flags)
{
   return SOM_ResolveD(this,Context,Context,destroy)
	(this, ev,flags);
}



};   /* Context */



#endif       /* SOM_Context_xh */
