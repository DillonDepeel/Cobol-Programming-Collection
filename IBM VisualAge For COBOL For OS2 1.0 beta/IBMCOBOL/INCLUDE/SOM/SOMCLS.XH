
/*
 * This file was generated by the SOM Compiler.
 * FileName: c:\somtk\include\somcls.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.7
 *     SOM Emitter emitxh: 2.42
 */

/*
 * 
 *    COMPONENT_NAME: somk
 * 
 *    ORIGINS: 27
 * 
 * 
 *    10H9767, 10H9769  (C) COPYRIGHT International Business Machines Corp. 1992,1994
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 *   SOMObject: System Object Model root class
 */


#ifndef SOM_SOMClass_xh
#define SOM_SOMClass_xh

class SOMClass;

/*
 * 
 *   This is the SOM metaclass.  That is, the instances of this class
 *   are class objects.  When the SOM environment is created an instance
 *   of SOMClass is created and a pointer to it is placed in the external
 *   data location (SOMClassClassData.classObject). Bindings provide the
 *   macro _SOMClass for this expression. _SOMClass is unique in that it
 *   is its own class object. I.e., _SOMClass == _somGetClass(_SOMClass).
 *   SOMClass can be subclassed just like any SOM class. The subclasses
 *   of SOMClass are new metaclasses and can generate class objects with
 *   different implementations than those produced by _SOMClass.
 * 
 *   An important rule for metaclass programming is that no methods
 *   introduced by SOMClass should ever be overridden. While this
 *   limits the utility of metaclass programming in SOM, it guarantees
 *   that SOM will operate correctly. Special class frameworks may be
 *   available from IBM to alleviate this restriction.
 * 
 */

#define SOMClass_MajorVersion 1
#define SOMClass_MinorVersion 4

/* C++ SOM defs */
#include <som.xh>

/* C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef SOMClass_API
#define SOMClass_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;
#ifndef _IDL_SEQUENCE_somToken_defined
#define _IDL_SEQUENCE_somToken_defined
typedef struct {
    unsigned long _maximum;
    unsigned long _length;
    somToken *_buffer;
} _IDL_SEQUENCE_somToken;
#endif /* _IDL_SEQUENCE_somToken_defined */ 
typedef
_IDL_SEQUENCE_somToken somTokenSequence;

/*
 *  a (generic) sequence of somTokens
 */
#ifndef _IDL_SEQUENCE_SOMClass_defined
#define _IDL_SEQUENCE_SOMClass_defined
typedef struct {
    unsigned long _maximum;
    unsigned long _length;
    SOMClass **_buffer;
} _IDL_SEQUENCE_SOMClass;
#endif /* _IDL_SEQUENCE_SOMClass_defined */ 
typedef
_IDL_SEQUENCE_SOMClass SOMClassSequence;

/*
 *  a sequence of classes
 */
typedef
struct somOffsetInfo {
SOMClass* cls;
long  offset;
} somOffsetInfo;

/*
 *  a structure to describe a class-related offset
 */
struct somOffsetInfo;
#ifndef _IDL_SEQUENCE_somOffsetInfo_defined
#define _IDL_SEQUENCE_somOffsetInfo_defined
typedef struct {
    unsigned long _maximum;
    unsigned long _length;
    struct somOffsetInfo *_buffer;
} _IDL_SEQUENCE_somOffsetInfo;
#endif /* _IDL_SEQUENCE_somOffsetInfo_defined */ 
typedef
_IDL_SEQUENCE_somOffsetInfo somOffsets;

/*
 *  a sequence of class-related offsets
 */
#ifndef _IDL_SEQUENCE_somId_defined
#define _IDL_SEQUENCE_somId_defined
typedef struct {
    unsigned long _maximum;
    unsigned long _length;
    somId *_buffer;
} _IDL_SEQUENCE_somId;
#endif /* _IDL_SEQUENCE_somId_defined */ 
typedef
_IDL_SEQUENCE_somId somIdSequence;

/*
 *  a sequence of somIds
 */

/*
 * End of user-defined types.
 */

/* A procedure to create the SOMClass Class */
SOMEXTERN SOMClass * SOMLINK SOMClassNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the SOMClass class object, and the methods it introduces. */
SOMEXTERN struct SOMClassClassDataStructure {
	SOMClass *classObject;
	somMToken somNew;
	somMToken somRenew;
	somMToken somInitClass;
	somMToken somClassReady;
	somMToken somGetName;
	somMToken somGetParent;
	somMToken somDescendedFrom;
	somMToken somCheckVersion;
	somMToken somFindMethod;
	somMToken somFindMethodOk;
	somMToken somSupportsMethod;
	somMToken somGetNumMethods;
	somMToken somGetInstanceSize;
	somMToken somGetInstanceOffset;
	somMToken somGetInstancePartSize;
	somMToken somGetMethodIndex;
	somMToken somGetNumStaticMethods;
	somMToken somGetPClsMtab;
	somMToken somGetClassMtab;
	somMToken somAddStaticMethod;
	somMToken somOverrideSMethod;
	somMToken somAddDynamicMethod;
	somMToken somcPrivate0;
	somMToken somGetApplyStub;
	somMToken somFindSMethod;
	somMToken somFindSMethodOk;
	somMToken somGetMethodDescriptor;
	somMToken somGetNthMethodInfo;
	somMToken somSetClassData;
	somMToken somGetClassData;
	somMToken somNewNoInit;
	somMToken somRenewNoInit;
	somMToken somGetInstanceToken;
	somMToken somGetMemberToken;
	somMToken somSetMethodDescriptor;
	somMToken somGetMethodData;
	somMToken somOverrideMtab;
	somMToken somGetMethodToken;
	somMToken somGetParents;
	somMToken somGetPClsMtabs;
	somMToken somInitMIClass;
	somMToken somGetVersionNumbers;
	somMToken somLookupMethod;
	somMToken _get_somInstanceDataOffsets;
	somMToken somRenewNoZero;
	somMToken somRenewNoInitNoZero;
	somMToken somAllocate;
	somMToken somDeallocate;
	somMToken somGetRdStub;
	somMToken somGetNthMethodData;
	somMToken somcPrivate1;
	somMToken somcPrivate2;
	somMToken _get_somDirectInitClasses;
	somMToken _set_somDirectInitClasses;
	somMToken somGetInstanceInitMask;
	somMToken somGetInstanceDestructionMask;
	somMToken somcPrivate3;
	somMToken somcPrivate4;
	somMToken somcPrivate5;
	somMToken somcPrivate6;
	somMToken somcPrivate7;
	somMToken somDefinedMethod;
	somMToken somcPrivate8;
	somMToken somcPrivate9;
	somMToken somcPrivate10;
	somMToken somcPrivate11;
	somMToken somcPrivate12;
	somMToken somcPrivate13;
	somMToken somcPrivate14;
	somMToken somcPrivate15;
	somMToken _get_somDataAlignment;
	somMToken somGetInstanceAssignmentMask;
	somMToken somcPrivate16;
	somMToken somcPrivate17;
	somMToken _get_somClassAllocate;
	somMToken _get_somClassDeallocate;
} SOMDLINK SOMClassClassData;
#define _SOMClass SOMClassClassData.classObject

/* The API to parentMtabs for SOMClass, and the instance data it introduces. */
SOMEXTERN struct SOMClassCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK SOMClassCClassData;

/*
 * -- Typedefs for SOMClass Method Procedures
 */
SOMEXTERN {
typedef long   SOMLINK somTP_SOMClass__get_somDataAlignment(SOMClass *somSelf);
typedef somTP_SOMClass__get_somDataAlignment *somTD_SOMClass__get_somDataAlignment;
typedef somOffsets   SOMLINK somTP_SOMClass__get_somInstanceDataOffsets(SOMClass *somSelf);
typedef somTP_SOMClass__get_somInstanceDataOffsets *somTD_SOMClass__get_somInstanceDataOffsets;
typedef SOMClassSequence   SOMLINK somTP_SOMClass__get_somDirectInitClasses(SOMClass *somSelf);
typedef somTP_SOMClass__get_somDirectInitClasses *somTD_SOMClass__get_somDirectInitClasses;
typedef void   SOMLINK somTP_SOMClass__set_somDirectInitClasses(SOMClass *somSelf,
		SOMClassSequence* somDirectInitClasses);
typedef somTP_SOMClass__set_somDirectInitClasses *somTD_SOMClass__set_somDirectInitClasses;
typedef SOMObject*   SOMLINK somTP_SOMClass_somNew(SOMClass *somSelf);
typedef somTP_SOMClass_somNew *somTD_SOMClass_somNew;
typedef SOMObject*   SOMLINK somTP_SOMClass_somNewNoInit(SOMClass *somSelf);
typedef somTP_SOMClass_somNewNoInit *somTD_SOMClass_somNewNoInit;
typedef SOMObject*   SOMLINK somTP_SOMClass_somRenew(SOMClass *somSelf,
		void* obj);
typedef somTP_SOMClass_somRenew *somTD_SOMClass_somRenew;
typedef SOMObject*   SOMLINK somTP_SOMClass_somRenewNoInit(SOMClass *somSelf,
		void* obj);
typedef somTP_SOMClass_somRenewNoInit *somTD_SOMClass_somRenewNoInit;
typedef SOMObject*   SOMLINK somTP_SOMClass_somRenewNoZero(SOMClass *somSelf,
		void* obj);
typedef somTP_SOMClass_somRenewNoZero *somTD_SOMClass_somRenewNoZero;
typedef SOMObject*   SOMLINK somTP_SOMClass_somRenewNoInitNoZero(SOMClass *somSelf,
		void* obj);
typedef somTP_SOMClass_somRenewNoInitNoZero *somTD_SOMClass_somRenewNoInitNoZero;
typedef string   SOMLINK somTP_SOMClass_somAllocate(SOMClass *somSelf,
		long size);
typedef somTP_SOMClass_somAllocate *somTD_SOMClass_somAllocate;
typedef void   SOMLINK somTP_SOMClass_somDeallocate(SOMClass *somSelf,
		string memptr);
typedef somTP_SOMClass_somDeallocate *somTD_SOMClass_somDeallocate;
typedef somMethodProc*   SOMLINK somTP_SOMClass__get_somClassAllocate(SOMClass *somSelf);
typedef somTP_SOMClass__get_somClassAllocate *somTD_SOMClass__get_somClassAllocate;
typedef somMethodProc*   SOMLINK somTP_SOMClass__get_somClassDeallocate(SOMClass *somSelf);
typedef somTP_SOMClass__get_somClassDeallocate *somTD_SOMClass__get_somClassDeallocate;
typedef somBooleanVector   SOMLINK somTP_SOMClass_somGetInstanceInitMask(SOMClass *somSelf,
		somInitCtrl* ctrl);
typedef somTP_SOMClass_somGetInstanceInitMask *somTD_SOMClass_somGetInstanceInitMask;
typedef somBooleanVector   SOMLINK somTP_SOMClass_somGetInstanceDestructionMask(SOMClass *somSelf,
		somDestructCtrl* ctrl);
typedef somTP_SOMClass_somGetInstanceDestructionMask *somTD_SOMClass_somGetInstanceDestructionMask;
typedef somBooleanVector   SOMLINK somTP_SOMClass_somGetInstanceAssignmentMask(SOMClass *somSelf,
		somAssignCtrl* ctrl);
typedef somTP_SOMClass_somGetInstanceAssignmentMask *somTD_SOMClass_somGetInstanceAssignmentMask;
typedef void   SOMLINK somTP_SOMClass_somInitClass(SOMClass *somSelf,
		string className,
		SOMClass* parentClass,
		long dataSize,
		long maxStaticMethods,
		long majorVersion,
		long minorVersion);
typedef somTP_SOMClass_somInitClass *somTD_SOMClass_somInitClass;
typedef void   SOMLINK somTP_SOMClass_somInitMIClass(SOMClass *somSelf,
		long inherit_vars,
		string className,
		SOMClassSequence* parentClasses,
		long dataSize,
		long dataAlignment,
		long maxStaticMethods,
		long majorVersion,
		long minorVersion);
typedef somTP_SOMClass_somInitMIClass *somTD_SOMClass_somInitMIClass;
typedef somMToken   SOMLINK somTP_SOMClass_somAddStaticMethod(SOMClass *somSelf,
		somId methodId,
		somId methodDescriptor,
		somMethodPtr method,
		somMethodPtr redispatchStub,
		somMethodPtr applyStub);
typedef somTP_SOMClass_somAddStaticMethod *somTD_SOMClass_somAddStaticMethod;
typedef void   SOMLINK somTP_SOMClass_somAddDynamicMethod(SOMClass *somSelf,
		somId methodId,
		somId methodDescriptor,
		somMethodPtr method,
		somMethodPtr applyStub);
typedef somTP_SOMClass_somAddDynamicMethod *somTD_SOMClass_somAddDynamicMethod;
typedef void   SOMLINK somTP_SOMClass_somOverrideSMethod(SOMClass *somSelf,
		somId methodId,
		somMethodPtr method);
typedef somTP_SOMClass_somOverrideSMethod *somTD_SOMClass_somOverrideSMethod;
typedef void   SOMLINK somTP_SOMClass_somClassReady(SOMClass *somSelf);
typedef somTP_SOMClass_somClassReady *somTD_SOMClass_somClassReady;
typedef somMethodPtr   SOMLINK somTP_SOMClass_somGetApplyStub(SOMClass *somSelf,
		somId methodId);
typedef somTP_SOMClass_somGetApplyStub *somTD_SOMClass_somGetApplyStub;
typedef somClassDataStructure*   SOMLINK somTP_SOMClass_somGetClassData(SOMClass *somSelf);
typedef somTP_SOMClass_somGetClassData *somTD_SOMClass_somGetClassData;
typedef void   SOMLINK somTP_SOMClass_somSetClassData(SOMClass *somSelf,
		somClassDataStructure* cds);
typedef somTP_SOMClass_somSetClassData *somTD_SOMClass_somSetClassData;
typedef somMethodTab*   SOMLINK somTP_SOMClass_somGetClassMtab(SOMClass *somSelf);
typedef somTP_SOMClass_somGetClassMtab *somTD_SOMClass_somGetClassMtab;
typedef long   SOMLINK somTP_SOMClass_somGetInstanceOffset(SOMClass *somSelf);
typedef somTP_SOMClass_somGetInstanceOffset *somTD_SOMClass_somGetInstanceOffset;
typedef long   SOMLINK somTP_SOMClass_somGetInstancePartSize(SOMClass *somSelf);
typedef somTP_SOMClass_somGetInstancePartSize *somTD_SOMClass_somGetInstancePartSize;
typedef long   SOMLINK somTP_SOMClass_somGetInstanceSize(SOMClass *somSelf);
typedef somTP_SOMClass_somGetInstanceSize *somTD_SOMClass_somGetInstanceSize;
typedef somDToken   SOMLINK somTP_SOMClass_somGetInstanceToken(SOMClass *somSelf);
typedef somTP_SOMClass_somGetInstanceToken *somTD_SOMClass_somGetInstanceToken;
typedef somDToken   SOMLINK somTP_SOMClass_somGetMemberToken(SOMClass *somSelf,
		long memberOffset,
		somDToken instanceToken);
typedef somTP_SOMClass_somGetMemberToken *somTD_SOMClass_somGetMemberToken;
typedef boolean   SOMLINK somTP_SOMClass_somGetMethodData(SOMClass *somSelf,
		somId methodId,
		somMethodData* md);
typedef somTP_SOMClass_somGetMethodData *somTD_SOMClass_somGetMethodData;
typedef somMethodProc*   SOMLINK somTP_SOMClass_somGetRdStub(SOMClass *somSelf,
		somId methodId);
typedef somTP_SOMClass_somGetRdStub *somTD_SOMClass_somGetRdStub;
typedef somId   SOMLINK somTP_SOMClass_somGetMethodDescriptor(SOMClass *somSelf,
		somId methodId);
typedef somTP_SOMClass_somGetMethodDescriptor *somTD_SOMClass_somGetMethodDescriptor;
typedef long   SOMLINK somTP_SOMClass_somGetMethodIndex(SOMClass *somSelf,
		somId id);
typedef somTP_SOMClass_somGetMethodIndex *somTD_SOMClass_somGetMethodIndex;
typedef somMToken   SOMLINK somTP_SOMClass_somGetMethodToken(SOMClass *somSelf,
		somId methodId);
typedef somTP_SOMClass_somGetMethodToken *somTD_SOMClass_somGetMethodToken;
typedef string   SOMLINK somTP_SOMClass_somGetName(SOMClass *somSelf);
typedef somTP_SOMClass_somGetName *somTD_SOMClass_somGetName;
typedef boolean   SOMLINK somTP_SOMClass_somGetNthMethodData(SOMClass *somSelf,
		long n,
		somMethodData* md);
typedef somTP_SOMClass_somGetNthMethodData *somTD_SOMClass_somGetNthMethodData;
typedef somId   SOMLINK somTP_SOMClass_somGetNthMethodInfo(SOMClass *somSelf,
		long n,
		somId* descriptor);
typedef somTP_SOMClass_somGetNthMethodInfo *somTD_SOMClass_somGetNthMethodInfo;
typedef long   SOMLINK somTP_SOMClass_somGetNumMethods(SOMClass *somSelf);
typedef somTP_SOMClass_somGetNumMethods *somTD_SOMClass_somGetNumMethods;
typedef long   SOMLINK somTP_SOMClass_somGetNumStaticMethods(SOMClass *somSelf);
typedef somTP_SOMClass_somGetNumStaticMethods *somTD_SOMClass_somGetNumStaticMethods;
typedef SOMClass*   SOMLINK somTP_SOMClass_somGetParent(SOMClass *somSelf);
typedef somTP_SOMClass_somGetParent *somTD_SOMClass_somGetParent;
typedef SOMClassSequence   SOMLINK somTP_SOMClass_somGetParents(SOMClass *somSelf);
typedef somTP_SOMClass_somGetParents *somTD_SOMClass_somGetParents;
typedef somMethodTabs   SOMLINK somTP_SOMClass_somGetPClsMtab(SOMClass *somSelf);
typedef somTP_SOMClass_somGetPClsMtab *somTD_SOMClass_somGetPClsMtab;
typedef somMethodTabs   SOMLINK somTP_SOMClass_somGetPClsMtabs(SOMClass *somSelf);
typedef somTP_SOMClass_somGetPClsMtabs *somTD_SOMClass_somGetPClsMtabs;
typedef void   SOMLINK somTP_SOMClass_somGetVersionNumbers(SOMClass *somSelf,
		long* majorVersion,
		long* minorVersion);
typedef somTP_SOMClass_somGetVersionNumbers *somTD_SOMClass_somGetVersionNumbers;
typedef boolean   SOMLINK somTP_SOMClass_somSetMethodDescriptor(SOMClass *somSelf,
		somId methodId,
		somId descriptor);
typedef somTP_SOMClass_somSetMethodDescriptor *somTD_SOMClass_somSetMethodDescriptor;
typedef boolean   SOMLINK somTP_SOMClass_somFindMethod(SOMClass *somSelf,
		somId methodId,
		somMethodPtr* m);
typedef somTP_SOMClass_somFindMethod *somTD_SOMClass_somFindMethod;
typedef boolean   SOMLINK somTP_SOMClass_somFindMethodOk(SOMClass *somSelf,
		somId methodId,
		somMethodPtr* m);
typedef somTP_SOMClass_somFindMethodOk *somTD_SOMClass_somFindMethodOk;
typedef somMethodPtr   SOMLINK somTP_SOMClass_somFindSMethod(SOMClass *somSelf,
		somId methodId);
typedef somTP_SOMClass_somFindSMethod *somTD_SOMClass_somFindSMethod;
typedef somMethodPtr   SOMLINK somTP_SOMClass_somFindSMethodOk(SOMClass *somSelf,
		somId methodId);
typedef somTP_SOMClass_somFindSMethodOk *somTD_SOMClass_somFindSMethodOk;
typedef somMethodPtr   SOMLINK somTP_SOMClass_somLookupMethod(SOMClass *somSelf,
		somId methodId);
typedef somTP_SOMClass_somLookupMethod *somTD_SOMClass_somLookupMethod;
typedef boolean   SOMLINK somTP_SOMClass_somCheckVersion(SOMClass *somSelf,
		long majorVersion,
		long minorVersion);
typedef somTP_SOMClass_somCheckVersion *somTD_SOMClass_somCheckVersion;
typedef boolean   SOMLINK somTP_SOMClass_somDescendedFrom(SOMClass *somSelf,
		SOMClass* aClassObj);
typedef somTP_SOMClass_somDescendedFrom *somTD_SOMClass_somDescendedFrom;
typedef boolean   SOMLINK somTP_SOMClass_somSupportsMethod(SOMClass *somSelf,
		somId mId);
typedef somTP_SOMClass_somSupportsMethod *somTD_SOMClass_somSupportsMethod;
typedef somMethodPtr   SOMLINK somTP_SOMClass_somDefinedMethod(SOMClass *somSelf,
		somMToken method);
typedef somTP_SOMClass_somDefinedMethod *somTD_SOMClass_somDefinedMethod;
typedef void   SOMLINK somTP_SOMClass_somOverrideMtab(SOMClass *somSelf);
typedef somTP_SOMClass_somOverrideMtab *somTD_SOMClass_somOverrideMtab;
}

#endif /* SOMClass_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for SOMClass
 */
class SOMClass : public SOMObject
{
public:

// SOMClass::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_SOMClass) SOMClassNewClass(SOMClass_MajorVersion,SOMClass_MinorVersion);
   return (void*)
      SOM_Resolve(_SOMClass,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_SOMClass));
}

// SOMClass::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

SOMClass()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMClassCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

SOMClass(SOMClass* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMClassCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

SOMClass(const SOMClass* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMClassCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: _get_somDataAlignment */
long   _get_somDataAlignment()
{
   return SOM_ResolveD(this,SOMClass,SOMClass,_get_somDataAlignment)
	(this);
}


/* nonstatic method: _get_somInstanceDataOffsets */
somOffsets   _get_somInstanceDataOffsets()
{
   return SOM_ResolveD(this,SOMClass,SOMClass,_get_somInstanceDataOffsets)
	(this);
}


/* nonstatic method: _get_somDirectInitClasses */
SOMClassSequence   _get_somDirectInitClasses()
{
   return SOM_ResolveD(this,SOMClass,SOMClass,_get_somDirectInitClasses)
	(this);
}


/* nonstatic method: _set_somDirectInitClasses */
void   _set_somDirectInitClasses(SOMClassSequence* somDirectInitClasses)
{
   SOM_ResolveD(this,SOMClass,SOMClass,_set_somDirectInitClasses)
	(this,somDirectInitClasses);
}


/* method: somNew */
SOMObject*   somNew()
{
   return SOM_ResolveD(this,SOMClass,SOMClass,somNew)
	(this);
}


/* method: somNewNoInit */
SOMObject*   somNewNoInit()
{
   return SOM_ResolveD(this,SOMClass,SOMClass,somNewNoInit)
	(this);
}


/* method: somRenew */
SOMObject*   somRenew(void* obj)
{
   return SOM_ResolveD(this,SOMClass,SOMClass,somRenew)
	(this,obj);
}


/* method: somRenewNoInit */
SOMObject*   somRenewNoInit(void* obj)
{
   return SOM_ResolveD(this,SOMClass,SOMClass,somRenewNoInit)
	(this,obj);
}


/* method: somRenewNoZero */
SOMObject*   somRenewNoZero(void* obj)
{
   return SOM_ResolveD(this,SOMClass,SOMClass,somRenewNoZero)
	(this,obj);
}


/* method: somRenewNoInitNoZero */
SOMObject*   somRenewNoInitNoZero(void* obj)
{
   return SOM_ResolveD(this,SOMClass,SOMClass,somRenewNoInitNoZero)
	(this,obj);
}


/* nonstatic method: somAllocate */
string   somAllocate(long size)
{
   return SOM_ResolveD(this,SOMClass,SOMClass,somAllocate)
	(this,size);
}


/* nonstatic method: somDeallocate */
void   somDeallocate(string memptr)
{
   SOM_ResolveD(this,SOMClass,SOMClass,somDeallocate)
	(this,memptr);
}


/* nonstatic method: _get_somClassAllocate */
somMethodProc*   _get_somClassAllocate()
{
   return SOM_ResolveD(this,SOMClass,SOMClass,_get_somClassAllocate)
	(this);
}


/* nonstatic method: _get_somClassDeallocate */
somMethodProc*   _get_somClassDeallocate()
{
   return SOM_ResolveD(this,SOMClass,SOMClass,_get_somClassDeallocate)
	(this);
}


/* method: somGetInstanceInitMask */
somBooleanVector   somGetInstanceInitMask(somInitCtrl* ctrl)
{
   return SOM_ResolveD(this,SOMClass,SOMClass,somGetInstanceInitMask)
	(this,ctrl);
}


/* method: somGetInstanceDestructionMask */
somBooleanVector   somGetInstanceDestructionMask(somDestructCtrl* ctrl)
{
   return SOM_ResolveD(this,SOMClass,SOMClass,somGetInstanceDestructionMask)
	(this,ctrl);
}


/* method: somGetInstanceAssignmentMask */
somBooleanVector   somGetInstanceAssignmentMask(somAssignCtrl* ctrl)
{
   return SOM_ResolveD(this,SOMClass,SOMClass,somGetInstanceAssignmentMask)
	(this,ctrl);
}


/* method: somInitClass */
void   somInitClass(string className,
		SOMClass* parentClass,
		long dataSize,
		long maxStaticMethods,
		long majorVersion,
		long minorVersion)
{
   SOM_ResolveD(this,SOMClass,SOMClass,somInitClass)
	(this,className,parentClass,dataSize,maxStaticMethods,majorVersion,minorVersion);
}


/* method: somInitMIClass */
void   somInitMIClass(long inherit_vars,
		string className,
		SOMClassSequence* parentClasses,
		long dataSize,
		long dataAlignment,
		long maxStaticMethods,
		long majorVersion,
		long minorVersion)
{
   SOM_ResolveD(this,SOMClass,SOMClass,somInitMIClass)
	(this,inherit_vars,className,parentClasses,dataSize,dataAlignment,maxStaticMethods,majorVersion,minorVersion);
}


/* method: somAddStaticMethod */
somMToken   somAddStaticMethod(somId methodId,
		somId methodDescriptor,
		somMethodPtr method,
		somMethodPtr redispatchStub,
		somMethodPtr applyStub)
{
   return SOM_ResolveD(this,SOMClass,SOMClass,somAddStaticMethod)
	(this,methodId,methodDescriptor,method,redispatchStub,applyStub);
}


/* method: somAddDynamicMethod */
void   somAddDynamicMethod(somId methodId,
		somId methodDescriptor,
		somMethodPtr method,
		somMethodPtr applyStub)
{
   SOM_ResolveD(this,SOMClass,SOMClass,somAddDynamicMethod)
	(this,methodId,methodDescriptor,method,applyStub);
}


/* method: somOverrideSMethod */
void   somOverrideSMethod(somId methodId,
		somMethodPtr method)
{
   SOM_ResolveD(this,SOMClass,SOMClass,somOverrideSMethod)
	(this,methodId,method);
}


/* method: somClassReady */
void   somClassReady()
{
   SOM_ResolveD(this,SOMClass,SOMClass,somClassReady)
	(this);
}


/* method: somGetApplyStub */
somMethodPtr   somGetApplyStub(somId methodId)
{
   return SOM_ResolveD(this,SOMClass,SOMClass,somGetApplyStub)
	(this,methodId);
}


/* method: somGetClassData */
somClassDataStructure*   somGetClassData()
{
   return SOM_ResolveD(this,SOMClass,SOMClass,somGetClassData)
	(this);
}


/* method: somSetClassData */
void   somSetClassData(somClassDataStructure* cds)
{
   SOM_ResolveD(this,SOMClass,SOMClass,somSetClassData)
	(this,cds);
}


/* method: somGetClassMtab */
somMethodTab*   somGetClassMtab()
{
   return SOM_ResolveD(this,SOMClass,SOMClass,somGetClassMtab)
	(this);
}


/* method: somGetInstanceOffset */
long   somGetInstanceOffset()
{
   return SOM_ResolveD(this,SOMClass,SOMClass,somGetInstanceOffset)
	(this);
}


/* method: somGetInstancePartSize */
long   somGetInstancePartSize()
{
   return SOM_ResolveD(this,SOMClass,SOMClass,somGetInstancePartSize)
	(this);
}


/* method: somGetInstanceSize */
long   somGetInstanceSize()
{
   return SOM_ResolveD(this,SOMClass,SOMClass,somGetInstanceSize)
	(this);
}


/* method: somGetInstanceToken */
somDToken   somGetInstanceToken()
{
   return SOM_ResolveD(this,SOMClass,SOMClass,somGetInstanceToken)
	(this);
}


/* method: somGetMemberToken */
somDToken   somGetMemberToken(long memberOffset,
		somDToken instanceToken)
{
   return SOM_ResolveD(this,SOMClass,SOMClass,somGetMemberToken)
	(this,memberOffset,instanceToken);
}


/* method: somGetMethodData */
boolean   somGetMethodData(somId methodId,
		somMethodData* md)
{
   return SOM_ResolveD(this,SOMClass,SOMClass,somGetMethodData)
	(this,methodId,md);
}


/* method: somGetRdStub */
somMethodProc*   somGetRdStub(somId methodId)
{
   return SOM_ResolveD(this,SOMClass,SOMClass,somGetRdStub)
	(this,methodId);
}


/* method: somGetMethodDescriptor */
somId   somGetMethodDescriptor(somId methodId)
{
   return SOM_ResolveD(this,SOMClass,SOMClass,somGetMethodDescriptor)
	(this,methodId);
}


/* method: somGetMethodIndex */
long   somGetMethodIndex(somId id)
{
   return SOM_ResolveD(this,SOMClass,SOMClass,somGetMethodIndex)
	(this,id);
}


/* method: somGetMethodToken */
somMToken   somGetMethodToken(somId methodId)
{
   return SOM_ResolveD(this,SOMClass,SOMClass,somGetMethodToken)
	(this,methodId);
}


/* method: somGetName */
string   somGetName()
{
   return SOM_ResolveD(this,SOMClass,SOMClass,somGetName)
	(this);
}


/* method: somGetNthMethodData */
boolean   somGetNthMethodData(long n,
		somMethodData* md)
{
   return SOM_ResolveD(this,SOMClass,SOMClass,somGetNthMethodData)
	(this,n,md);
}


/* method: somGetNthMethodInfo */
somId   somGetNthMethodInfo(long n,
		somId* descriptor)
{
   return SOM_ResolveD(this,SOMClass,SOMClass,somGetNthMethodInfo)
	(this,n,descriptor);
}


/* method: somGetNumMethods */
long   somGetNumMethods()
{
   return SOM_ResolveD(this,SOMClass,SOMClass,somGetNumMethods)
	(this);
}


/* method: somGetNumStaticMethods */
long   somGetNumStaticMethods()
{
   return SOM_ResolveD(this,SOMClass,SOMClass,somGetNumStaticMethods)
	(this);
}


/* method: somGetParent */
SOMClass*   somGetParent()
{
   return SOM_ResolveD(this,SOMClass,SOMClass,somGetParent)
	(this);
}


/* method: somGetParents */
SOMClassSequence   somGetParents()
{
   return SOM_ResolveD(this,SOMClass,SOMClass,somGetParents)
	(this);
}


/* method: somGetPClsMtab */
somMethodTabs   somGetPClsMtab()
{
   return SOM_ResolveD(this,SOMClass,SOMClass,somGetPClsMtab)
	(this);
}


/* method: somGetPClsMtabs */
somMethodTabs   somGetPClsMtabs()
{
   return SOM_ResolveD(this,SOMClass,SOMClass,somGetPClsMtabs)
	(this);
}


/* method: somGetVersionNumbers */
void   somGetVersionNumbers(long* majorVersion,
		long* minorVersion)
{
   SOM_ResolveD(this,SOMClass,SOMClass,somGetVersionNumbers)
	(this,majorVersion,minorVersion);
}


/* method: somSetMethodDescriptor */
boolean   somSetMethodDescriptor(somId methodId,
		somId descriptor)
{
   return SOM_ResolveD(this,SOMClass,SOMClass,somSetMethodDescriptor)
	(this,methodId,descriptor);
}


/* method: somFindMethod */
boolean   somFindMethod(somId methodId,
		somMethodPtr* m)
{
   return SOM_ResolveD(this,SOMClass,SOMClass,somFindMethod)
	(this,methodId,m);
}


/* method: somFindMethodOk */
boolean   somFindMethodOk(somId methodId,
		somMethodPtr* m)
{
   return SOM_ResolveD(this,SOMClass,SOMClass,somFindMethodOk)
	(this,methodId,m);
}


/* method: somFindSMethod */
somMethodPtr   somFindSMethod(somId methodId)
{
   return SOM_ResolveD(this,SOMClass,SOMClass,somFindSMethod)
	(this,methodId);
}


/* method: somFindSMethodOk */
somMethodPtr   somFindSMethodOk(somId methodId)
{
   return SOM_ResolveD(this,SOMClass,SOMClass,somFindSMethodOk)
	(this,methodId);
}


/* method: somLookupMethod */
somMethodPtr   somLookupMethod(somId methodId)
{
   return SOM_ResolveD(this,SOMClass,SOMClass,somLookupMethod)
	(this,methodId);
}


/* method: somCheckVersion */
boolean   somCheckVersion(long majorVersion,
		long minorVersion)
{
   return SOM_ResolveD(this,SOMClass,SOMClass,somCheckVersion)
	(this,majorVersion,minorVersion);
}


/* method: somDescendedFrom */
boolean   somDescendedFrom(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,SOMClass,SOMClass,somDescendedFrom)
	(this,aClassObj);
}


/* method: somSupportsMethod */
boolean   somSupportsMethod(somId mId)
{
   return SOM_ResolveD(this,SOMClass,SOMClass,somSupportsMethod)
	(this,mId);
}


/* method: somDefinedMethod */
somMethodPtr   somDefinedMethod(somMToken method)
{
   return SOM_ResolveD(this,SOMClass,SOMClass,somDefinedMethod)
	(this,method);
}


/* method: somOverrideMtab */
void   somOverrideMtab()
{
   SOM_ResolveD(this,SOMClass,SOMClass,somOverrideMtab)
	(this);
}



};   /* SOMClass */



#endif       /* SOM_SOMClass_xh */
