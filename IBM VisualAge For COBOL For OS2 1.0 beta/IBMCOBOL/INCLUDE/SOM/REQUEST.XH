
/*
 * This file was generated by the SOM Compiler.
 * FileName: c:\somtk\include\REQUEST.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.7
 *     SOM Emitter emitxh: 2.42
 */

/*
 * 
 *    COMPONENT_NAME: somd
 * 
 *    ORIGINS: 27
 * 
 * 
 *    10H9767, 10H9769  (C) COPYRIGHT International Business Machines Corp. 1992,1994
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 *    IDL interface spec for CORBA Request object.
 */


#ifndef SOM_Request_xh
#define SOM_Request_xh

class Request;

#define Request_MajorVersion 2
#define Request_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef Request_API
#define Request_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;
class Container;

/*
 * End of user-defined types.
 */

/*
 * Passthru lines: File: "C.xh", "after"
 */
/*
 *  Flags defined on requests
 */

#define ARG_IN		0x00000001  	/* defined in somir.h */
#define ARG_OUT		0x00000002	/* defined in somir.h */
#define ARG_INOUT	0x00000004	/* defined in somir.h */
#define IN_COPY_VALUE	0x00000008	/* add_arg flag */
#define DEPENDENT_LIST	0x00000010	/* add_item flag */
#define OUT_LIST_MEMORY	0x00000020	/* req flag */
#define INV_NO_RESPONSE	0x00000040	/* invoke flag */
#define INV_TERM_ON_ERR	0x00000080	/* invoke flag */
#define RESP_NO_WAIT	0x00000100	/* response flag */
/* Internal Use Flags */
#define AUTH_IN_MSG      0x00010000      /* msg includes auth info */
#define ACKONEWAY        0x00020000      /* ack oneway messages */
#define ENV_IN_MSG       0x00040000      /* msg includes env info */
#define CTX_IN_MSG       0x00080000      /* msg includes ctx info */
#define OBJ_OWNED        0x00100000	/* arg. mem. is obj. owned */
#define CALLER_OWNED     0x00200000	/* arg mem is caller owned */
#define RESULT_OUT       0x00400000	/* method result, not arg  */
#define CLIENT_SIDE      0x00800000	/* client side of request */
#define SERVER_SIDE      0x01000000	/* server side of request */
#define TXCTX_IN_MSG     0x02000000      /* msg includes trans info */
#define ARG_IS_PTRARG    0x10000000      /* ptr to arg, !aggregate */
#define ARG_IS_COMPONENT 0x20000000      /* comp of aggregate type */
#define ROOT_NOT_PTRARG  0x40000000      /* root struct not ptr */
#define RESERVED_FLAGS	0x8c00fe00	/* future/internal use */

class Request;
/*
 *  Functions for multiple deferred-synchronous requests.
 */
ORBStatus SOMLINK send_multiple_requests (
	IN	Request*	reqs[],		/* array of Requests */
	IN	Environment	*env,
	IN	long		count,		/* number of Requests */
	IN	Flags		invoke_flags
    );

ORBStatus SOMLINK get_next_response (
	INOUT	Environment	*env,
	IN	Flags		response_flags,
	OUT	Request*	*req
);


/* A procedure to create the Request Class */
SOMEXTERN SOMClass * SOMLINK RequestNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the Request class object, and the methods it introduces. */
SOMEXTERN struct RequestClassDataStructure {
	SOMClass *classObject;
	somMToken add_arg;
	somMToken invoke;
	somMToken send;
	somMToken get_response;
	somMToken destroy;
	somMToken _get_objref;
	somMToken _set_objref;
	somMToken _get_ctx;
	somMToken _set_ctx;
	somMToken _get_operation;
	somMToken _set_operation;
	somMToken _get_argument_list;
	somMToken _set_argument_list;
	somMToken _get_return_result;
	somMToken _set_return_result;
	somMToken _get_req_flags;
	somMToken _set_req_flags;
	somMToken _get_env;
	somMToken _set_env;
} SOMDLINK RequestClassData;
#define _Request RequestClassData.classObject

/* The API to parentMtabs for Request, and the instance data it introduces. */
SOMEXTERN struct RequestCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK RequestCClassData;

/*
 * -- Typedefs for Request Method Procedures
 */
SOMEXTERN {
typedef ORBStatus   SOMLINK somTP_Request_add_arg(Request *somSelf, Environment *ev,
		Identifier name,
		TypeCode arg_type,
		void* value,
		long len,
		Flags arg_flags);
typedef somTP_Request_add_arg *somTD_Request_add_arg;
typedef ORBStatus   SOMLINK somTP_Request_invoke(Request *somSelf, Environment *ev,
		Flags invoke_flags);
typedef somTP_Request_invoke *somTD_Request_invoke;
typedef ORBStatus   SOMLINK somTP_Request_send(Request *somSelf, Environment *ev,
		Flags invoke_flags);
typedef somTP_Request_send *somTD_Request_send;
typedef ORBStatus   SOMLINK somTP_Request_get_response(Request *somSelf, Environment *ev,
		Flags response_flags);
typedef somTP_Request_get_response *somTD_Request_get_response;
typedef ORBStatus   SOMLINK somTP_Request_destroy(Request *somSelf, Environment *ev);
typedef somTP_Request_destroy *somTD_Request_destroy;
}

#endif /* Request_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for Request
 */
class Request : public SOMObject
{
public:

// Request::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_Request) RequestNewClass(Request_MajorVersion,Request_MinorVersion);
   return (void*)
      SOM_Resolve(_Request,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_Request));
}

// Request::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

Request()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (RequestCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

Request(Request* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (RequestCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

Request(const Request* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (RequestCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: add_arg */
ORBStatus   add_arg(Environment *ev,
		Identifier name,
		TypeCode arg_type,
		void* value,
		long len,
		Flags arg_flags)
{
   return SOM_ResolveD(this,Request,Request,add_arg)
	(this, ev,name,arg_type,value,len,arg_flags);
}


/* method: invoke */
ORBStatus   invoke(Environment *ev,
		Flags invoke_flags)
{
   return SOM_ResolveD(this,Request,Request,invoke)
	(this, ev,invoke_flags);
}


/* method: send */
ORBStatus   send(Environment *ev,
		Flags invoke_flags)
{
   return SOM_ResolveD(this,Request,Request,send)
	(this, ev,invoke_flags);
}


/* method: get_response */
ORBStatus   get_response(Environment *ev,
		Flags response_flags)
{
   return SOM_ResolveD(this,Request,Request,get_response)
	(this, ev,response_flags);
}


/* method: destroy */
ORBStatus   destroy(Environment *ev)
{
   return SOM_ResolveD(this,Request,Request,destroy)
	(this, ev);
}



};   /* Request */



#endif       /* SOM_Request_xh */
