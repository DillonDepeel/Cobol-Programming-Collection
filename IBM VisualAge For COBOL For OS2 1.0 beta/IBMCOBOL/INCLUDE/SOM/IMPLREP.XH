
/*
 * This file was generated by the SOM Compiler.
 * FileName: c:\somtk\include\IMPLREP.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.7
 *     SOM Emitter emitxh: 2.42
 */

/*
 * 
 *    COMPONENT_NAME: somd
 * 
 *    ORIGINS: 27
 * 
 * 
 *    10H9767, 10H9769  (C) COPYRIGHT International Business Machines Corp. 1992,1994
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 *   CLASS SPECIFICATION FOR IMPLEMENTATION REPOSITORY
 */


#ifndef SOM_ImplRepository_xh
#define SOM_ImplRepository_xh

class ImplRepository;

#define ImplRepository_MajorVersion 2
#define ImplRepository_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

/*
 * C++ metaclass def
 */
#include <snglicls.xh>

#ifndef ImplRepository_API
#define ImplRepository_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;
class Container;
class ImplementationDef;
#ifndef _IDL_SEQUENCE_ImplementationDef_defined
#define _IDL_SEQUENCE_ImplementationDef_defined
typedef struct {
    unsigned long _maximum;
    unsigned long _length;
    ImplementationDef **_buffer;
} _IDL_SEQUENCE_ImplementationDef;
#endif /* _IDL_SEQUENCE_ImplementationDef_defined */ 
#ifndef _IDL_SEQUENCE_string_defined
#define _IDL_SEQUENCE_string_defined
typedef struct {
    unsigned long _maximum;
    unsigned long _length;
    string *_buffer;
} _IDL_SEQUENCE_string;
#endif /* _IDL_SEQUENCE_string_defined */ 

/*
 * End of user-defined types.
 */

/*
 * Passthru lines: File: "C.xh", "after"
 */

class ImplRepository;
#include <impldef.xh>

SOMEXTERN ImplRepository * SOMDLINK SOMD_ImplRepObject;


/* A procedure to create the ImplRepository Class */
class SOMMSingleInstance;
SOMEXTERN SOMMSingleInstance * SOMLINK ImplRepositoryNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the ImplRepository class object, and the methods it introduces. */
SOMEXTERN struct ImplRepositoryClassDataStructure {
	SOMMSingleInstance *classObject;
	somMToken find_impldef;
	somMToken find_impldef_by_alias;
	somMToken find_impldef2;
	somMToken find_impldef_by_alias2;
	somMToken find_impldef_by_class;
	somMToken add_impldef;
	somMToken update_impldef;
	somMToken delete_impldef;
	somMToken add_class_to_impldef;
	somMToken remove_class_from_impldef;
	somMToken remove_class_from_all;
	somMToken find_classes_by_impldef;
	somMToken implr_get_impl;
	somMToken implr_search_impl;
	somMToken implr_search_class;
	somMToken implr_update_impl;
	somMToken find_all_impldefs;
} SOMDLINK ImplRepositoryClassData;
#define _ImplRepository ImplRepositoryClassData.classObject

/* The API to parentMtabs for ImplRepository, and the instance data it introduces. */
SOMEXTERN struct ImplRepositoryCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK ImplRepositoryCClassData;

/*
 * -- Typedefs for ImplRepository Method Procedures
 */
SOMEXTERN {
typedef ImplementationDef*   SOMLINK somTP_ImplRepository_find_impldef(ImplRepository *somSelf, Environment *ev,
		ImplId implid);
typedef somTP_ImplRepository_find_impldef *somTD_ImplRepository_find_impldef;
typedef ImplementationDef*   SOMLINK somTP_ImplRepository_find_impldef_by_alias(ImplRepository *somSelf, Environment *ev,
		string alias_name);
typedef somTP_ImplRepository_find_impldef_by_alias *somTD_ImplRepository_find_impldef_by_alias;
typedef ORBStatus   SOMLINK somTP_ImplRepository_find_all_impldefs(ImplRepository *somSelf, Environment *ev,
		_IDL_SEQUENCE_ImplementationDef* outimpldefs);
typedef somTP_ImplRepository_find_all_impldefs *somTD_ImplRepository_find_all_impldefs;
typedef _IDL_SEQUENCE_ImplementationDef   SOMLINK somTP_ImplRepository_find_impldef_by_class(ImplRepository *somSelf, Environment *ev,
		string classname);
typedef somTP_ImplRepository_find_impldef_by_class *somTD_ImplRepository_find_impldef_by_class;
typedef void   SOMLINK somTP_ImplRepository_add_impldef(ImplRepository *somSelf, Environment *ev,
		ImplementationDef* impldef);
typedef somTP_ImplRepository_add_impldef *somTD_ImplRepository_add_impldef;
typedef void   SOMLINK somTP_ImplRepository_update_impldef(ImplRepository *somSelf, Environment *ev,
		ImplementationDef* impldef);
typedef somTP_ImplRepository_update_impldef *somTD_ImplRepository_update_impldef;
typedef void   SOMLINK somTP_ImplRepository_delete_impldef(ImplRepository *somSelf, Environment *ev,
		ImplId implid);
typedef somTP_ImplRepository_delete_impldef *somTD_ImplRepository_delete_impldef;
typedef void   SOMLINK somTP_ImplRepository_add_class_to_impldef(ImplRepository *somSelf, Environment *ev,
		ImplId implid,
		string classname);
typedef somTP_ImplRepository_add_class_to_impldef *somTD_ImplRepository_add_class_to_impldef;
typedef void   SOMLINK somTP_ImplRepository_remove_class_from_impldef(ImplRepository *somSelf, Environment *ev,
		ImplId implid,
		string classname);
typedef somTP_ImplRepository_remove_class_from_impldef *somTD_ImplRepository_remove_class_from_impldef;
typedef void   SOMLINK somTP_ImplRepository_remove_class_from_all(ImplRepository *somSelf, Environment *ev,
		string classname);
typedef somTP_ImplRepository_remove_class_from_all *somTD_ImplRepository_remove_class_from_all;
typedef _IDL_SEQUENCE_string   SOMLINK somTP_ImplRepository_find_classes_by_impldef(ImplRepository *somSelf, Environment *ev,
		ImplId implid);
typedef somTP_ImplRepository_find_classes_by_impldef *somTD_ImplRepository_find_classes_by_impldef;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef SOMMSingleInstance*   SOMLINK somTP_ImplRepository_somGetClass(ImplRepository *somSelf);
typedef somTP_ImplRepository_somGetClass *somTD_ImplRepository_somGetClass;
}

#endif /* ImplRepository_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for ImplRepository
 */
class ImplRepository : public SOMObject
{
public:

// ImplRepository::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_ImplRepository) ImplRepositoryNewClass(ImplRepository_MajorVersion,ImplRepository_MinorVersion);
   return (void*)
      SOM_Resolve(_ImplRepository,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_ImplRepository));
}

// ImplRepository::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

ImplRepository()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ImplRepositoryCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

ImplRepository(ImplRepository* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ImplRepositoryCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

ImplRepository(const ImplRepository* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ImplRepositoryCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: find_impldef */
ImplementationDef*   find_impldef(Environment *ev,
		ImplId implid)
{
   return SOM_ResolveD(this,ImplRepository,ImplRepository,find_impldef)
	(this, ev,implid);
}


/* method: find_impldef_by_alias */
ImplementationDef*   find_impldef_by_alias(Environment *ev,
		string alias_name)
{
   return SOM_ResolveD(this,ImplRepository,ImplRepository,find_impldef_by_alias)
	(this, ev,alias_name);
}


/* method: find_all_impldefs */
ORBStatus   find_all_impldefs(Environment *ev,
		_IDL_SEQUENCE_ImplementationDef* outimpldefs)
{
   return SOM_ResolveD(this,ImplRepository,ImplRepository,find_all_impldefs)
	(this, ev,outimpldefs);
}


/* method: find_impldef_by_class */
_IDL_SEQUENCE_ImplementationDef   find_impldef_by_class(Environment *ev,
		string classname)
{
   return SOM_ResolveD(this,ImplRepository,ImplRepository,find_impldef_by_class)
	(this, ev,classname);
}


/* method: add_impldef */
void   add_impldef(Environment *ev,
		ImplementationDef* impldef)
{
   SOM_ResolveD(this,ImplRepository,ImplRepository,add_impldef)
	(this, ev,impldef);
}


/* method: update_impldef */
void   update_impldef(Environment *ev,
		ImplementationDef* impldef)
{
   SOM_ResolveD(this,ImplRepository,ImplRepository,update_impldef)
	(this, ev,impldef);
}


/* method: delete_impldef */
void   delete_impldef(Environment *ev,
		ImplId implid)
{
   SOM_ResolveD(this,ImplRepository,ImplRepository,delete_impldef)
	(this, ev,implid);
}


/* method: add_class_to_impldef */
void   add_class_to_impldef(Environment *ev,
		ImplId implid,
		string classname)
{
   SOM_ResolveD(this,ImplRepository,ImplRepository,add_class_to_impldef)
	(this, ev,implid,classname);
}


/* method: remove_class_from_impldef */
void   remove_class_from_impldef(Environment *ev,
		ImplId implid,
		string classname)
{
   SOM_ResolveD(this,ImplRepository,ImplRepository,remove_class_from_impldef)
	(this, ev,implid,classname);
}


/* method: remove_class_from_all */
void   remove_class_from_all(Environment *ev,
		string classname)
{
   SOM_ResolveD(this,ImplRepository,ImplRepository,remove_class_from_all)
	(this, ev,classname);
}


/* method: find_classes_by_impldef */
_IDL_SEQUENCE_string   find_classes_by_impldef(Environment *ev,
		ImplId implid)
{
   return SOM_ResolveD(this,ImplRepository,ImplRepository,find_classes_by_impldef)
	(this, ev,implid);
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
SOMMSingleInstance*  somGetClass()
{
   return SOM_ResolveD(this,ImplRepository,SOMObject,somGetClass)
	(this);
}



};   /* ImplRepository */



#endif       /* SOM_ImplRepository_xh */
