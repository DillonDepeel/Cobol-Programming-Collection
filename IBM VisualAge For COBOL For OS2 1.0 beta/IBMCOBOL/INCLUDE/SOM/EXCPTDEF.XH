
/*
 * This file was generated by the SOM Compiler.
 * FileName: c:\somtk\include\excptdef.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.7
 *     SOM Emitter emitxh: 2.42
 */

/*
 * 
 *    COMPONENT_NAME: somi
 * 
 *    ORIGINS: 27
 * 
 * 
 *    10H9767, 10H9769  (C) COPYRIGHT International Business Machines Corp. 1992,1994
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 *   ExceptionDef: CORBA Interface for exception definitions
 *   See CORBA 7.5.10, p.138
 */


#ifndef SOM_ExceptionDef_xh
#define SOM_ExceptionDef_xh

class ExceptionDef;

#define ExceptionDef_MajorVersion 2
#define ExceptionDef_MinorVersion 1

/*
 * Passthru lines: File: "C.xh", "before"
 */

    #include <somtcnst.xh>
    #include <somir.xh>
    #include <containd.xh>


/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_Contained_xh
#include <containd.xh>
#endif

#ifndef ExceptionDef_API
#define ExceptionDef_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;
class Container;
typedef
struct ExceptionDescription {
Identifier name;
RepositoryId id;
RepositoryId defined_in;
TypeCode type;
} ExceptionDescription;

/*
 *  The inherited describe method returns an instance of this
 *  (ExceptionDescription) structure in the "value" member of the
 *  Description structure defined in the Contained interface.
 */

/*
 * End of user-defined types.
 */

/* A procedure to create the ExceptionDef Class */
SOMEXTERN SOMClass * SOMLINK ExceptionDefNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the ExceptionDef class object, and the methods it introduces. */
SOMEXTERN struct ExceptionDefClassDataStructure {
	SOMClass *classObject;
	somMToken _get_type;
	somMToken _set_type;
} SOMDLINK ExceptionDefClassData;
#define _ExceptionDef ExceptionDefClassData.classObject

/* The API to parentMtabs for ExceptionDef, and the instance data it introduces. */
SOMEXTERN struct ExceptionDefCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK ExceptionDefCClassData;

/*
 * -- Typedefs for ExceptionDef Method Procedures
 */
SOMEXTERN {
typedef TypeCode   SOMLINK somTP_ExceptionDef__get_type(ExceptionDef *somSelf, Environment *ev);
typedef somTP_ExceptionDef__get_type *somTD_ExceptionDef__get_type;
typedef void   SOMLINK somTP_ExceptionDef__set_type(ExceptionDef *somSelf, Environment *ev,
		TypeCode type);
typedef somTP_ExceptionDef__set_type *somTD_ExceptionDef__set_type;
}

#endif /* ExceptionDef_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for ExceptionDef
 */
class ExceptionDef : public Contained
{
public:

// ExceptionDef::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_ExceptionDef) ExceptionDefNewClass(ExceptionDef_MajorVersion,ExceptionDef_MinorVersion);
   return (void*)
      SOM_Resolve(_ExceptionDef,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_ExceptionDef));
}

// ExceptionDef::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

ExceptionDef()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ExceptionDefCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

ExceptionDef(ExceptionDef* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ExceptionDefCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

ExceptionDef(const ExceptionDef* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ExceptionDefCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: _get_type */
TypeCode   _get_type(Environment *ev)
{
   return SOM_ResolveD(this,ExceptionDef,ExceptionDef,_get_type)
	(this, ev);
}


/* method: _set_type */
void   _set_type(Environment *ev,
		TypeCode type)
{
   SOM_ResolveD(this,ExceptionDef,ExceptionDef,_set_type)
	(this, ev,type);
}



};   /* ExceptionDef */



#endif       /* SOM_ExceptionDef_xh */
