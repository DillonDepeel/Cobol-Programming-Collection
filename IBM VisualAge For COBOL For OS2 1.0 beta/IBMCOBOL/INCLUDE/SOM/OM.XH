
/*
 * This file was generated by the SOM Compiler.
 * FileName: c:\somtk\include\OM.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.7
 *     SOM Emitter emitxh: 2.42
 */

/*
 * 
 *    COMPONENT_NAME: somd
 * 
 *    ORIGINS: 27
 * 
 * 
 *    10H9767, 10H9769  (C) COPYRIGHT International Business Machines Corp. 1992,1994
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 * 
 *    IDL interface spec for generic Object Manager.
 * 
 *    The Object Manager (abstract) class provides a uniform abstraction
 *    for various sorts of object managers.  Object Request Brokers, persistent
 *    storage managers, and OODBMSs are examples of object managers.
 * 
 *    This is an abstract base class, which defines the "core" interface for
 *    an object manager.  The basic groups of methods are:
 * 
 *  	- object creation (basic)
 *  	- object identification & location/activation
 *  	- object release & destruction
 * 
 *    If a desired object cannot be mapped into the client's address space, the
 *    object manager is responsible for building a local "proxy" for the remote
 *    object.  The client invokes methods on the proxy, and the proxy should
 *    redispatch the requests to the remote object in an appropriate and
 *    transparent way.
 * 
 *    NOTE: Since this is only intended to be an abstract base class, there
 *    is no underlying implementation, and ObjectMgr objects should not actually
 *    be instantiated.
 * 
 */


#ifndef SOM_ObjectMgr_xh
#define SOM_ObjectMgr_xh

class ObjectMgr;

#define ObjectMgr_MajorVersion 2
#define ObjectMgr_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

/*
 * C++ metaclass def
 */
#include <snglicls.xh>

#ifndef ObjectMgr_API
#define ObjectMgr_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;
class Container;

/*
 * End of user-defined types.
 */

/* A procedure to create the ObjectMgr Class */
class SOMMSingleInstance;
SOMEXTERN SOMMSingleInstance * SOMLINK ObjectMgrNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the ObjectMgr class object, and the methods it introduces. */
SOMEXTERN struct ObjectMgrClassDataStructure {
	SOMMSingleInstance *classObject;
	somMToken somdNewObject;
	somMToken somdGetIdFromObject;
	somMToken somdGetObjectFromId;
	somMToken somdReleaseObject;
	somMToken somdDestroyObject;
} SOMDLINK ObjectMgrClassData;
#define _ObjectMgr ObjectMgrClassData.classObject

/* The API to parentMtabs for ObjectMgr, and the instance data it introduces. */
SOMEXTERN struct ObjectMgrCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK ObjectMgrCClassData;

/*
 * -- Typedefs for ObjectMgr Method Procedures
 */
SOMEXTERN {
typedef SOMObject*   SOMLINK somTP_ObjectMgr_somdNewObject(ObjectMgr *somSelf, Environment *ev,
		Identifier objclass,
		string hints);
typedef somTP_ObjectMgr_somdNewObject *somTD_ObjectMgr_somdNewObject;
typedef string   SOMLINK somTP_ObjectMgr_somdGetIdFromObject(ObjectMgr *somSelf, Environment *ev,
		SOMObject* obj);
typedef somTP_ObjectMgr_somdGetIdFromObject *somTD_ObjectMgr_somdGetIdFromObject;
typedef SOMObject*   SOMLINK somTP_ObjectMgr_somdGetObjectFromId(ObjectMgr *somSelf, Environment *ev,
		string id);
typedef somTP_ObjectMgr_somdGetObjectFromId *somTD_ObjectMgr_somdGetObjectFromId;
typedef void   SOMLINK somTP_ObjectMgr_somdReleaseObject(ObjectMgr *somSelf, Environment *ev,
		SOMObject* obj);
typedef somTP_ObjectMgr_somdReleaseObject *somTD_ObjectMgr_somdReleaseObject;
typedef void   SOMLINK somTP_ObjectMgr_somdDestroyObject(ObjectMgr *somSelf, Environment *ev,
		SOMObject* obj);
typedef somTP_ObjectMgr_somdDestroyObject *somTD_ObjectMgr_somdDestroyObject;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef SOMMSingleInstance*   SOMLINK somTP_ObjectMgr_somGetClass(ObjectMgr *somSelf);
typedef somTP_ObjectMgr_somGetClass *somTD_ObjectMgr_somGetClass;
}

#endif /* ObjectMgr_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for ObjectMgr
 */
class ObjectMgr : public SOMObject
{
public:

// ObjectMgr::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_ObjectMgr) ObjectMgrNewClass(ObjectMgr_MajorVersion,ObjectMgr_MinorVersion);
   return (void*)
      SOM_Resolve(_ObjectMgr,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_ObjectMgr));
}

// ObjectMgr::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

ObjectMgr()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ObjectMgrCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

ObjectMgr(ObjectMgr* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ObjectMgrCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

ObjectMgr(const ObjectMgr* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ObjectMgrCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: somdNewObject */
SOMObject*   somdNewObject(Environment *ev,
		Identifier objclass,
		string hints)
{
   return SOM_ResolveD(this,ObjectMgr,ObjectMgr,somdNewObject)
	(this, ev,objclass,hints);
}


/* method: somdGetIdFromObject */
string   somdGetIdFromObject(Environment *ev,
		SOMObject* obj)
{
   return SOM_ResolveD(this,ObjectMgr,ObjectMgr,somdGetIdFromObject)
	(this, ev,obj);
}


/* method: somdGetObjectFromId */
SOMObject*   somdGetObjectFromId(Environment *ev,
		string id)
{
   return SOM_ResolveD(this,ObjectMgr,ObjectMgr,somdGetObjectFromId)
	(this, ev,id);
}


/* method: somdReleaseObject */
void   somdReleaseObject(Environment *ev,
		SOMObject* obj)
{
   SOM_ResolveD(this,ObjectMgr,ObjectMgr,somdReleaseObject)
	(this, ev,obj);
}


/* method: somdDestroyObject */
void   somdDestroyObject(Environment *ev,
		SOMObject* obj)
{
   SOM_ResolveD(this,ObjectMgr,ObjectMgr,somdDestroyObject)
	(this, ev,obj);
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
SOMMSingleInstance*  somGetClass()
{
   return SOM_ResolveD(this,ObjectMgr,SOMObject,somGetClass)
	(this);
}



};   /* ObjectMgr */



#endif       /* SOM_ObjectMgr_xh */
