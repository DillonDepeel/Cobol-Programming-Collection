
/*
 * This file was generated by the SOM Compiler.
 * FileName: c:\somtk\include\sombacls.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.7
 *     SOM Emitter emitxh: 2.42
 */

/*
 * 
 *    COMPONENT_NAME: somu
 * 
 *    ORIGINS: 27
 * 
 * 
 *    10H9767, 10H9769  (C) COPYRIGHT International Business Machines Corp. 1992,1994
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 */


#ifndef SOM_SOMMBeforeAfter_xh
#define SOM_SOMMBeforeAfter_xh

class SOMMBeforeAfter;

#define SOMMBeforeAfter_MajorVersion 2
#define SOMMBeforeAfter_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMClass_xh
#include <somcls.xh>
#endif

#ifndef SOMMBeforeAfter_API
#define SOMMBeforeAfter_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;

/*
 * End of user-defined types.
 */

/* A procedure to create the SOMMBeforeAfter Class */
SOMEXTERN SOMClass * SOMLINK SOMMBeforeAfterNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the SOMMBeforeAfter class object, and the methods it introduces. */
SOMEXTERN struct SOMMBeforeAfterClassDataStructure {
	SOMClass *classObject;
	somMToken sommBeforeMethod;
	somMToken sommAfterMethod;
} SOMDLINK SOMMBeforeAfterClassData;
#define _SOMMBeforeAfter SOMMBeforeAfterClassData.classObject

/* The API to parentMtabs for SOMMBeforeAfter, and the instance data it introduces. */
SOMEXTERN struct SOMMBeforeAfterCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK SOMMBeforeAfterCClassData;

/*
 * -- Typedefs for SOMMBeforeAfter Method Procedures
 */
SOMEXTERN {
typedef boolean   SOMLINK somTP_SOMMBeforeAfter_sommBeforeMethod(SOMMBeforeAfter *somSelf, Environment *ev,
		SOMObject* object,
		somId methodId,
		va_list ap);
typedef somTP_SOMMBeforeAfter_sommBeforeMethod *somTD_SOMMBeforeAfter_sommBeforeMethod;
typedef void   SOMLINK somTP_SOMMBeforeAfter_sommAfterMethod(SOMMBeforeAfter *somSelf, Environment *ev,
		SOMObject* object,
		somId methodId,
		somToken returnedvalue,
		va_list ap);
typedef somTP_SOMMBeforeAfter_sommAfterMethod *somTD_SOMMBeforeAfter_sommAfterMethod;
}

#endif /* SOMMBeforeAfter_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for SOMMBeforeAfter
 */
class SOMMBeforeAfter : public SOMClass
{
public:

// SOMMBeforeAfter::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_SOMMBeforeAfter) SOMMBeforeAfterNewClass(SOMMBeforeAfter_MajorVersion,SOMMBeforeAfter_MinorVersion);
   return (void*)
      SOM_Resolve(_SOMMBeforeAfter,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_SOMMBeforeAfter));
}

// SOMMBeforeAfter::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

SOMMBeforeAfter()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMMBeforeAfterCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

SOMMBeforeAfter(SOMMBeforeAfter* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMMBeforeAfterCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

SOMMBeforeAfter(const SOMMBeforeAfter* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMMBeforeAfterCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* va_list method: sommBeforeMethod */
/* the va_list invocation form */
boolean   SOMMBeforeAfter_sommBeforeMethod(Environment *ev,
		SOMObject* object,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,SOMMBeforeAfter,SOMMBeforeAfter,sommBeforeMethod)
	(this, ev,object,methodId,ap);
}

/* the varargs invocation form */
boolean   sommBeforeMethod(Environment *ev,
		SOMObject* object,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,SOMMBeforeAfter,SOMMBeforeAfter,sommBeforeMethod)
	(this, ev,object,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: sommAfterMethod */
/* the va_list invocation form */
void   SOMMBeforeAfter_sommAfterMethod(Environment *ev,
		SOMObject* object,
		somId methodId,
		somToken returnedvalue,
		va_list ap)
{
   SOM_ResolveD(this,SOMMBeforeAfter,SOMMBeforeAfter,sommAfterMethod)
	(this, ev,object,methodId,returnedvalue,ap);
}

/* the varargs invocation form */
void   sommAfterMethod(Environment *ev,
		SOMObject* object,
		somId methodId,
		somToken returnedvalue,
		...)
{
   va_list ap;
   va_start(ap, returnedvalue);
   SOM_ResolveD(this,SOMMBeforeAfter,SOMMBeforeAfter,sommAfterMethod)
	(this, ev,object,methodId,returnedvalue,ap);
   va_end(ap);
}



};   /* SOMMBeforeAfter */



#endif       /* SOM_SOMMBeforeAfter_xh */
