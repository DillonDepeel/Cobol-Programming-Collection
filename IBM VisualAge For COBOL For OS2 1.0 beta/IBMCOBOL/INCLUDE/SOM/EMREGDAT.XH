
/*
 * This file was generated by the SOM Compiler.
 * FileName: c:\somtk\include\emregdat.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.7
 *     SOM Emitter emitxh: 2.42
 */

/*
 * 
 *    COMPONENT_NAME: somu
 * 
 *    ORIGINS: 27
 * 
 * 
 *    10H9767, 10H9769  (C) COPYRIGHT International Business Machines Corp. 1992,1994
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 */


#ifndef SOM_SOMEEMRegisterData_xh
#define SOM_SOMEEMRegisterData_xh

class SOMEEMRegisterData;

/*
 *  SOMEEMRegisterData is the class utilized for holding registration
 *  data for events types to be registered with Event Management Framework(EMan)
 */

#define SOMEEMRegisterData_MajorVersion 2
#define SOMEEMRegisterData_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef SOMEEMRegisterData_API
#define SOMEEMRegisterData_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;

/*
 * End of user-defined types.
 */

/* A procedure to create the SOMEEMRegisterData Class */
SOMEXTERN SOMClass * SOMLINK SOMEEMRegisterDataNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the SOMEEMRegisterData class object, and the methods it introduces. */
SOMEXTERN struct SOMEEMRegisterDataClassDataStructure {
	SOMClass *classObject;
	somMToken someClearRegData;
	somMToken someSetRegDataClientType;
	somMToken someSetRegDataEventMask;
	somMToken someSetRegDataSink;
	somMToken someSetRegDataSinkMask;
	somMToken someSetRegDataTimerCount;
	somMToken someSetRegDataTimerInterval;
} SOMDLINK SOMEEMRegisterDataClassData;
#define _SOMEEMRegisterData SOMEEMRegisterDataClassData.classObject

/* The API to parentMtabs for SOMEEMRegisterData, and the instance data it introduces. */
SOMEXTERN struct SOMEEMRegisterDataCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK SOMEEMRegisterDataCClassData;

/*
 * -- Typedefs for SOMEEMRegisterData Method Procedures
 */
SOMEXTERN {
typedef void   SOMLINK somTP_SOMEEMRegisterData_someClearRegData(SOMEEMRegisterData *somSelf, Environment *ev);
typedef somTP_SOMEEMRegisterData_someClearRegData *somTD_SOMEEMRegisterData_someClearRegData;
typedef void   SOMLINK somTP_SOMEEMRegisterData_someSetRegDataClientType(SOMEEMRegisterData *somSelf, Environment *ev,
		string clientType);
typedef somTP_SOMEEMRegisterData_someSetRegDataClientType *somTD_SOMEEMRegisterData_someSetRegDataClientType;
typedef void   SOMLINK somTP_SOMEEMRegisterData_someSetRegDataEventMask(SOMEEMRegisterData *somSelf, Environment *ev,
		long eventType,
		va_list ap);
typedef somTP_SOMEEMRegisterData_someSetRegDataEventMask *somTD_SOMEEMRegisterData_someSetRegDataEventMask;
typedef void   SOMLINK somTP_SOMEEMRegisterData_someSetRegDataSink(SOMEEMRegisterData *somSelf, Environment *ev,
		long sink);
typedef somTP_SOMEEMRegisterData_someSetRegDataSink *somTD_SOMEEMRegisterData_someSetRegDataSink;
typedef void   SOMLINK somTP_SOMEEMRegisterData_someSetRegDataSinkMask(SOMEEMRegisterData *somSelf, Environment *ev,
		unsigned long sinkMask);
typedef somTP_SOMEEMRegisterData_someSetRegDataSinkMask *somTD_SOMEEMRegisterData_someSetRegDataSinkMask;
typedef void   SOMLINK somTP_SOMEEMRegisterData_someSetRegDataTimerCount(SOMEEMRegisterData *somSelf, Environment *ev,
		long count);
typedef somTP_SOMEEMRegisterData_someSetRegDataTimerCount *somTD_SOMEEMRegisterData_someSetRegDataTimerCount;
typedef void   SOMLINK somTP_SOMEEMRegisterData_someSetRegDataTimerInterval(SOMEEMRegisterData *somSelf, Environment *ev,
		long interval);
typedef somTP_SOMEEMRegisterData_someSetRegDataTimerInterval *somTD_SOMEEMRegisterData_someSetRegDataTimerInterval;
}

#endif /* SOMEEMRegisterData_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for SOMEEMRegisterData
 */
class SOMEEMRegisterData : public SOMObject
{
public:

// SOMEEMRegisterData::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_SOMEEMRegisterData) SOMEEMRegisterDataNewClass(SOMEEMRegisterData_MajorVersion,SOMEEMRegisterData_MinorVersion);
   return (void*)
      SOM_Resolve(_SOMEEMRegisterData,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_SOMEEMRegisterData));
}

// SOMEEMRegisterData::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

SOMEEMRegisterData()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMEEMRegisterDataCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

SOMEEMRegisterData(SOMEEMRegisterData* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMEEMRegisterDataCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

SOMEEMRegisterData(const SOMEEMRegisterData* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMEEMRegisterDataCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: someClearRegData */
void   someClearRegData(Environment *ev)
{
   SOM_ResolveD(this,SOMEEMRegisterData,SOMEEMRegisterData,someClearRegData)
	(this, ev);
}


/* method: someSetRegDataClientType */
void   someSetRegDataClientType(Environment *ev,
		string clientType)
{
   SOM_ResolveD(this,SOMEEMRegisterData,SOMEEMRegisterData,someSetRegDataClientType)
	(this, ev,clientType);
}


/* va_list method: someSetRegDataEventMask */
/* the va_list invocation form */
void   SOMEEMRegisterData_someSetRegDataEventMask(Environment *ev,
		long eventType,
		va_list ap)
{
   SOM_ResolveD(this,SOMEEMRegisterData,SOMEEMRegisterData,someSetRegDataEventMask)
	(this, ev,eventType,ap);
}

/* the varargs invocation form */
void   someSetRegDataEventMask(Environment *ev,
		long eventType,
		...)
{
   va_list ap;
   va_start(ap, eventType);
   SOM_ResolveD(this,SOMEEMRegisterData,SOMEEMRegisterData,someSetRegDataEventMask)
	(this, ev,eventType,ap);
   va_end(ap);
}


/* method: someSetRegDataSink */
void   someSetRegDataSink(Environment *ev,
		long sink)
{
   SOM_ResolveD(this,SOMEEMRegisterData,SOMEEMRegisterData,someSetRegDataSink)
	(this, ev,sink);
}


/* method: someSetRegDataSinkMask */
void   someSetRegDataSinkMask(Environment *ev,
		unsigned long sinkMask)
{
   SOM_ResolveD(this,SOMEEMRegisterData,SOMEEMRegisterData,someSetRegDataSinkMask)
	(this, ev,sinkMask);
}


/* method: someSetRegDataTimerCount */
void   someSetRegDataTimerCount(Environment *ev,
		long count)
{
   SOM_ResolveD(this,SOMEEMRegisterData,SOMEEMRegisterData,someSetRegDataTimerCount)
	(this, ev,count);
}


/* method: someSetRegDataTimerInterval */
void   someSetRegDataTimerInterval(Environment *ev,
		long interval)
{
   SOM_ResolveD(this,SOMEEMRegisterData,SOMEEMRegisterData,someSetRegDataTimerInterval)
	(this, ev,interval);
}



};   /* SOMEEMRegisterData */



#endif       /* SOM_SOMEEMRegisterData_xh */
