
/*
 * This file was generated by the SOM Compiler.
 * FileName: c:\somtk\include\workprev.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.7
 *     SOM Emitter emitxh: 2.42
 */

/*
 * 
 *    COMPONENT_NAME: somu
 * 
 *    ORIGINS: 27
 * 
 * 
 *    10H9767, 10H9769  (C) COPYRIGHT International Business Machines Corp. 1992,1994
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 */


#ifndef SOM_SOMEWorkProcEvent_xh
#define SOM_SOMEWorkProcEvent_xh

class SOMEWorkProcEvent;

/*
 *  SOMEWorkProcEvent is the class for generic workProc events within the Event Manager.
 *  This class should be queried for events of the following type(s):
 *       EMWorkProcEvent
 *  An instance of this class is initialized and passed to the callback
 *  of a workproc event.
 *  Although at present this class has no methods, its parent methods can be
 *  called to verify that the event type is EMWorkProcEvent.
 */

#define SOMEWorkProcEvent_MajorVersion 2
#define SOMEWorkProcEvent_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMEEvent_xh
#include <event.xh>
#endif

#ifndef SOMEWorkProcEvent_API
#define SOMEWorkProcEvent_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;

/*
 * End of user-defined types.
 */

/*
 * Passthru lines: File: "C.xh", "after"
 */
#include <eventmsk.h>

/* A procedure to create the SOMEWorkProcEvent Class */
SOMEXTERN SOMClass * SOMLINK SOMEWorkProcEventNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the SOMEWorkProcEvent class object, and the methods it introduces. */
SOMEXTERN struct SOMEWorkProcEventClassDataStructure {
	SOMClass *classObject;
} SOMDLINK SOMEWorkProcEventClassData;
#define _SOMEWorkProcEvent SOMEWorkProcEventClassData.classObject

/* The API to parentMtabs for SOMEWorkProcEvent, and the instance data it introduces. */
SOMEXTERN struct SOMEWorkProcEventCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK SOMEWorkProcEventCClassData;

/*
 * -- Typedefs for SOMEWorkProcEvent Method Procedures
 */
SOMEXTERN {
}

#endif /* SOMEWorkProcEvent_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for SOMEWorkProcEvent
 */
class SOMEWorkProcEvent : public SOMEEvent
{
public:

// SOMEWorkProcEvent::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_SOMEWorkProcEvent) SOMEWorkProcEventNewClass(SOMEWorkProcEvent_MajorVersion,SOMEWorkProcEvent_MinorVersion);
   return (void*)
      SOM_Resolve(_SOMEWorkProcEvent,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_SOMEWorkProcEvent));
}

// SOMEWorkProcEvent::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

SOMEWorkProcEvent()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMEWorkProcEventCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

SOMEWorkProcEvent(SOMEWorkProcEvent* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMEWorkProcEventCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

SOMEWorkProcEvent(const SOMEWorkProcEvent* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMEWorkProcEventCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}



};   /* SOMEWorkProcEvent */



#endif       /* SOM_SOMEWorkProcEvent_xh */
