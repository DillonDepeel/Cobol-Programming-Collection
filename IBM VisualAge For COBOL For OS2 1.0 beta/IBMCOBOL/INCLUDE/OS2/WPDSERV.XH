
/*
 * This file was generated by the SOM Compiler.
 * FileName: wpdserv.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.2
 *     SOM Emitter emitxh: 2.41
 */

/*
 * 
 *  Copyright (c) IBM Corporation  1994 - All Rights Reserved
 * 
 *  WPDSERV - Workplace Shell DSOM Server Class DLL
 */


#ifndef SOM_WPDServer_xh
#define SOM_WPDServer_xh

class WPDServer;

#define WPDServer_MajorVersion 0
#define WPDServer_MinorVersion 0

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMDServer_xh
#include <somdserv.xh>
#endif

#ifndef WPDServer_API
#define WPDServer_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class SOMObject;
class Container;
class SOMDObject;
class WPObject;

/*
 * End of user-defined types.
 */

/*
 * Passthru lines: File: "C.xh", "after"
 */
#define INCL_WIN
#include <os2.h>


/* A procedure to create the WPDServer Class */
SOMEXTERN SOMClass * SOMLINK WPDServerNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the WPDServer class object, and the methods it introduces. */
SOMEXTERN struct WPDServerClassDataStructure {
	SOMClass *classObject;
} SOMDLINK WPDServerClassData;
#define _WPDServer WPDServerClassData.classObject

/* The API to parentMtabs for WPDServer, and the instance data it introduces. */
SOMEXTERN struct WPDServerCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK WPDServerCClassData;

/*
 * -- Typedefs for WPDServer Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef SOMDObject*   (SOMLINK * somTD_WPDServer_somdRefFromSOMObj)(WPDServer *somSelf, Environment *ev,
		SOMObject* somobj);
typedef SOMObject*   (SOMLINK * somTD_WPDServer_somdSOMObjFromRef)(WPDServer *somSelf, Environment *ev,
		SOMDObject* objref);
typedef void   (SOMLINK * somTD_WPDServer_somdDispatchMethod)(WPDServer *somSelf, Environment *ev,
		SOMObject* somobj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef SOMObject*   (SOMLINK * somTD_WPDServer_somdCreateObj)(WPDServer *somSelf, Environment *ev,
		Identifier objclass,
		string hints);
typedef void   (SOMLINK * somTD_WPDServer_somdDeleteObj)(WPDServer *somSelf, Environment *ev,
		SOMObject* somobj);
typedef SOMClass*   (SOMLINK * somTD_WPDServer_somdGetClassObj)(WPDServer *somSelf, Environment *ev,
		Identifier objclass);
typedef boolean   (SOMLINK * somTD_WPDServer_somdObjReferencesCached)(WPDServer *somSelf, Environment *ev);
typedef void   (SOMLINK * somTD_WPDServer_somDefaultInit)(WPDServer *somSelf,
		somInitCtrl* ctrl);
typedef void   (SOMLINK * somTD_WPDServer_somDestruct)(WPDServer *somSelf,
		octet doFree,
		somDestructCtrl* ctrl);
typedef void   (SOMLINK * somTD_WPDServer_somDefaultCopyInit)(WPDServer *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef WPDServer*   (SOMLINK * somTD_WPDServer_somDefaultAssign)(WPDServer *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef void   (SOMLINK * somTD_WPDServer_somDefaultConstCopyInit)(WPDServer *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef void   (SOMLINK * somTD_WPDServer_somDefaultVCopyInit)(WPDServer *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef void   (SOMLINK * somTD_WPDServer_somDefaultConstVCopyInit)(WPDServer *somSelf,
		somInitCtrl* ctrl,
		SOMObject* fromObj);
typedef WPDServer*   (SOMLINK * somTD_WPDServer_somDefaultConstAssign)(WPDServer *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef WPDServer*   (SOMLINK * somTD_WPDServer_somDefaultVAssign)(WPDServer *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef WPDServer*   (SOMLINK * somTD_WPDServer_somDefaultConstVAssign)(WPDServer *somSelf,
		somAssignCtrl* ctrl,
		SOMObject* fromObj);
typedef void   (SOMLINK * somTD_WPDServer_somInit)(WPDServer *somSelf);
typedef void   (SOMLINK * somTD_WPDServer_somFree)(WPDServer *somSelf);
typedef void   (SOMLINK * somTD_WPDServer_somUninit)(WPDServer *somSelf);
typedef SOMClass*   (SOMLINK * somTD_WPDServer_somGetClass)(WPDServer *somSelf);
typedef string   (SOMLINK * somTD_WPDServer_somGetClassName)(WPDServer *somSelf);
typedef long   (SOMLINK * somTD_WPDServer_somGetSize)(WPDServer *somSelf);
typedef boolean   (SOMLINK * somTD_WPDServer_somIsA)(WPDServer *somSelf,
		SOMClass* aClassObj);
typedef boolean   (SOMLINK * somTD_WPDServer_somIsInstanceOf)(WPDServer *somSelf,
		SOMClass* aClassObj);
typedef boolean   (SOMLINK * somTD_WPDServer_somRespondsTo)(WPDServer *somSelf,
		somId mId);
typedef boolean   (SOMLINK * somTD_WPDServer_somDispatch)(WPDServer *somSelf,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef boolean   (SOMLINK * somTD_WPDServer_somClassDispatch)(WPDServer *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap);
typedef boolean   (SOMLINK * somTD_WPDServer_somCastObj)(WPDServer *somSelf,
		SOMClass* cls);
typedef boolean   (SOMLINK * somTD_WPDServer_somResetObj)(WPDServer *somSelf);
typedef void   (SOMLINK * somTD_WPDServer_somDispatchV)(WPDServer *somSelf,
		somId methodId,
		somId descriptor,
		va_list ap);
typedef long   (SOMLINK * somTD_WPDServer_somDispatchL)(WPDServer *somSelf,
		somId methodId,
		somId descriptor,
		va_list ap);
typedef void*   (SOMLINK * somTD_WPDServer_somDispatchA)(WPDServer *somSelf,
		somId methodId,
		somId descriptor,
		va_list ap);
typedef double   (SOMLINK * somTD_WPDServer_somDispatchD)(WPDServer *somSelf,
		somId methodId,
		somId descriptor,
		va_list ap);
typedef SOMObject*   (SOMLINK * somTD_WPDServer_somPrintSelf)(WPDServer *somSelf);
typedef void   (SOMLINK * somTD_WPDServer_somDumpSelf)(WPDServer *somSelf,
		long level);
typedef void   (SOMLINK * somTD_WPDServer_somDumpSelfInt)(WPDServer *somSelf,
		long level);
}

#endif /* WPDServer_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for WPDServer
 */
class WPDServer : public SOMDServer
{
public:

// WPDServer::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t size)
{
   SOM_IgnoreWarning(size);
   if (!_WPDServer) WPDServerNewClass(WPDServer_MajorVersion,WPDServer_MinorVersion);
   return (void*)
      SOM_Resolve(_WPDServer,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_WPDServer));
}

// WPDServer::delete uses the default deallocator for the object's class.
void operator delete(void * obj)
{
   somToken objCls = obj ? *(void**)obj : (somToken) NULL;
   if (somIsObj(objCls)) {
      SOM_Resolve(objCls,SOMClass,somDeallocate)
         ((SOMClass*)objCls, (string)obj);
   }
}

WPDServer()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPDServerCClassData.parentMtab))->mtab)
      return;
   somDefaultInit(0);
}

WPDServer(WPDServer* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPDServerCClassData.parentMtab))->mtab)
      return;
   somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

WPDServer(const WPDServer* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPDServerCClassData.parentMtab))->mtab)
      return;
   somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}

~WPDServer()
{
   if (!somIsObj(this)) return;
   somDestruct(0,0);
   *(void**)this = **(void***)this;
}


/*
 * Reintroduce inherited methods
 */

/* method: somdRefFromSOMObj */
SOMDObject*   somdRefFromSOMObj(Environment *ev,
		SOMObject* somobj)
{
   return SOM_ResolveD(this,WPDServer,SOMDServer,somdRefFromSOMObj)
	(this, ev,somobj);
}


/* method: somdSOMObjFromRef */
SOMObject*   somdSOMObjFromRef(Environment *ev,
		SOMDObject* objref)
{
   return SOM_ResolveD(this,WPDServer,SOMDServer,somdSOMObjFromRef)
	(this, ev,objref);
}


/* va_list method: somdDispatchMethod */
/* the va_list invocation form */
void   WPDServer_somdDispatchMethod(Environment *ev,
		SOMObject* somobj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
   SOM_ResolveD(this,WPDServer,SOMDServer,somdDispatchMethod)
	(this, ev,somobj,retValue,methodId,ap);
}

/* the varargs invocation form */
void   somdDispatchMethod(Environment *ev,
		SOMObject* somobj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   SOM_ResolveD(this,WPDServer,SOMDServer,somdDispatchMethod)
	(this, ev,somobj,retValue,methodId,ap);
   va_end(ap);
}


/* method: somdCreateObj */
SOMObject*   somdCreateObj(Environment *ev,
		Identifier objclass,
		string hints)
{
   return SOM_ResolveD(this,WPDServer,SOMDServer,somdCreateObj)
	(this, ev,objclass,hints);
}


/* method: somdDeleteObj */
void   somdDeleteObj(Environment *ev,
		SOMObject* somobj)
{
   SOM_ResolveD(this,WPDServer,SOMDServer,somdDeleteObj)
	(this, ev,somobj);
}


/* method: somdGetClassObj */
SOMClass*   somdGetClassObj(Environment *ev,
		Identifier objclass)
{
   return SOM_ResolveD(this,WPDServer,SOMDServer,somdGetClassObj)
	(this, ev,objclass);
}


/* method: somdObjReferencesCached */
boolean   somdObjReferencesCached(Environment *ev)
{
   return SOM_ResolveD(this,WPDServer,SOMDServer,somdObjReferencesCached)
	(this, ev);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(somInitCtrl* ctrl)
{
   SOM_ResolveD(this,WPDServer,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree,
		somDestructCtrl* ctrl)
{
   SOM_ResolveD(this,WPDServer,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* method: somDefaultCopyInit */
void   somDefaultCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,WPDServer,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
WPDServer*  somDefaultAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,WPDServer,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,WPDServer,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultVCopyInit */
void   somDefaultVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,WPDServer,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(somInitCtrl* ctrl,
		SOMObject* fromObj)
{
   SOM_ResolveD(this,WPDServer,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
WPDServer*  somDefaultConstAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,WPDServer,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
WPDServer*  somDefaultVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,WPDServer,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
WPDServer*  somDefaultConstVAssign(somAssignCtrl* ctrl,
		SOMObject* fromObj)
{
   return SOM_ResolveD(this,WPDServer,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,WPDServer,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,WPDServer,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,WPDServer,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,WPDServer,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,WPDServer,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,WPDServer,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,WPDServer,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,WPDServer,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,WPDServer,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */
/* the va_list invocation form */
boolean   WPDServer_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,WPDServer,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,WPDServer,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   WPDServer_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
return SOM_ResolveD(this,WPDServer,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,WPDServer,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,WPDServer,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,WPDServer,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */
/* the va_list invocation form */
void   WPDServer_somDispatchV(somId methodId,
		somId descriptor,
		va_list ap)
{
   SOM_ResolveD(this,WPDServer,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId,
		somId descriptor,
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,WPDServer,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */
/* the va_list invocation form */
long   WPDServer_somDispatchL(somId methodId,
		somId descriptor,
		va_list ap)
{
return SOM_ResolveD(this,WPDServer,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId,
		somId descriptor,
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,WPDServer,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */
/* the va_list invocation form */
void*   WPDServer_somDispatchA(somId methodId,
		somId descriptor,
		va_list ap)
{
return SOM_ResolveD(this,WPDServer,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId,
		somId descriptor,
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,WPDServer,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */
/* the va_list invocation form */
double   WPDServer_somDispatchD(somId methodId,
		somId descriptor,
		va_list ap)
{
return SOM_ResolveD(this,WPDServer,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId,
		somId descriptor,
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,WPDServer,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,WPDServer,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,WPDServer,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,WPDServer,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* WPDServer */



#endif       /* SOM_WPDServer_xh */
